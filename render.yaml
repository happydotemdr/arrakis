# Arrakis Infrastructure Blueprint - Render.com
# Production-ready deployment with Render best practices

# Preview Environments
previews:
  generation: automatic

# Database Definitions
databases:
  # Development Database - Free tier with pgvector
  - name: arrakis-dev-db
    plan: free
    postgresMajorVersion: "16"
    databaseName: arrakis_dev
    user: arrakis_dev_user
    ipAllowList:
      - source: 0.0.0.0/0
        description: "Allow all (development only)"

  # Staging Database - Basic tier with pgvector
  - name: arrakis-staging-db
    plan: basic-1gb
    postgresMajorVersion: "16"
    databaseName: arrakis_staging
    user: arrakis_staging_user
    ipAllowList:
      - source: 0.0.0.0/0
        description: "Staging access"

  # Production Database - Pro tier with high availability
  - name: arrakis-prod-db
    plan: pro-4gb
    postgresMajorVersion: "16"
    databaseName: arrakis_production
    user: arrakis_prod_user
    highAvailability:
      enabled: true
    diskSizeGB: 50
    ipAllowList:
      - source: 0.0.0.0/0
        description: "Production access (configure specific IPs in production)"


# Service Definitions
services:
  # ===================
  # REDIS KEY-VALUE STORES
  # ===================

  # Development Redis
  - type: keyvalue
    name: arrakis-dev-redis
    plan: free
    region: oregon
    ipAllowList:
      - source: 0.0.0.0/0
        description: "Development access"

  # Staging Redis
  - type: keyvalue
    name: arrakis-staging-redis
    plan: starter
    region: oregon
    ipAllowList:
      - source: 0.0.0.0/0
        description: "Staging access"

  # Production Redis with optimized settings
  - type: keyvalue
    name: arrakis-prod-redis
    plan: standard
    region: oregon
    maxmemoryPolicy: allkeys-lru
    ipAllowList:
      - source: 0.0.0.0/0
        description: "Production access (configure specific IPs in production)"
  # ===================
  # DEVELOPMENT ENVIRONMENT
  # ===================
  - type: web
    name: arrakis-dev
    runtime: node
    plan: starter
    region: oregon
    repo: https://github.com/happydotemdr/arrakis.git
    branch: develop
    autoDeploy: true
    buildCommand: "corepack enable && bun install && bun run build"
    startCommand: "bun run start"
    healthCheckPath: /api/health
    maxShutdownDelaySeconds: 60

    # Auto-scaling configuration
    scaling:
      minInstances: 1
      maxInstances: 2
      targetCPUPercent: 70

    # Preview environments
    previews:
      generation: automatic

    # Build filtering
    buildFilter:
      paths:
        - "app/**/*"
        - "components/**/*"
        - "lib/**/*"
        - "package.json"
      ignoredPaths:
        - "docs/**/*"
        - "*.md"

    envVars:
      # Database and Redis connections
      - key: DATABASE_URL
        fromDatabase:
          name: arrakis-dev-db
          property: connectionString
      - key: REDIS_URL
        fromService:
          name: arrakis-dev-redis
          type: keyvalue
          property: connectionString

      # Environment-specific URLs
      - key: NEXT_PUBLIC_APP_URL
        value: https://arrakis-dev.onrender.com

      # Reference existing environment groups
      - fromGroup: arrakis-shared
      - fromGroup: arrakis-dev
      - fromGroup: arrakis-secrets-dev

  # ===================
  # STAGING ENVIRONMENT
  # ===================
  - type: web
    name: arrakis-staging
    runtime: node
    plan: standard
    region: oregon
    repo: https://github.com/happydotemdr/arrakis.git
    branch: staging
    autoDeploy: true
    buildCommand: "corepack enable && bun install && bun run build"
    startCommand: "bun run start"
    healthCheckPath: /api/health
    maxShutdownDelaySeconds: 120

    # Auto-scaling configuration
    scaling:
      minInstances: 1
      maxInstances: 3
      targetCPUPercent: 60
      targetMemoryPercent: 70

    envVars:
      # Database and Redis connections
      - key: DATABASE_URL
        fromDatabase:
          name: arrakis-staging-db
          property: connectionString
      - key: REDIS_URL
        fromService:
          name: arrakis-staging-redis
          type: keyvalue
          property: connectionString

      # Environment-specific URLs
      - key: NEXT_PUBLIC_APP_URL
        value: https://arrakis-staging.onrender.com

      # Reference existing environment groups
      - fromGroup: arrakis-shared
      - fromGroup: arrakis-staging
      - fromGroup: arrakis-secrets-prod  # Use prod secrets for staging

  # ===================
  # PRODUCTION ENVIRONMENT
  # ===================
  - type: web
    name: arrakis-prod
    runtime: node
    plan: pro
    region: oregon
    repo: https://github.com/happydotemdr/arrakis.git
    branch: master
    autoDeploy: false  # Manual deployments for production safety
    buildCommand: "corepack enable && bun install && bun run build"
    startCommand: "bun run start"
    healthCheckPath: /api/health
    maxShutdownDelaySeconds: 300

    # Production auto-scaling
    scaling:
      minInstances: 2
      maxInstances: 10
      targetCPUPercent: 50
      targetMemoryPercent: 60

    # Custom domains (configure in Render Dashboard)
    domains:
      - arrakis.onrender.com

    envVars:
      # Database and Redis connections
      - key: DATABASE_URL
        fromDatabase:
          name: arrakis-prod-db
          property: connectionString
      - key: REDIS_URL
        fromService:
          name: arrakis-prod-redis
          type: keyvalue
          property: connectionString

      # Environment-specific URLs
      - key: NEXT_PUBLIC_APP_URL
        value: https://arrakis.onrender.com

      # Reference existing environment groups
      - fromGroup: arrakis-shared
      - fromGroup: arrakis-prod
      - fromGroup: arrakis-secrets-prod

  # ===================
  # BACKGROUND WORKERS
  # ===================

  # Development Worker
  - type: pserv
    name: arrakis-dev-worker
    runtime: node
    plan: starter
    region: oregon
    repo: https://github.com/happydotemdr/arrakis.git
    branch: develop
    autoDeploy: true
    buildCommand: "corepack enable && bun install"
    startCommand: "bun run worker:start"

    envVars:
      # Database and Redis connections
      - key: DATABASE_URL
        fromDatabase:
          name: arrakis-dev-db
          property: connectionString
      - key: REDIS_URL
        fromService:
          name: arrakis-dev-redis
          type: keyvalue
          property: connectionString

      # Reference existing environment groups
      - fromGroup: arrakis-shared
      - fromGroup: arrakis-dev
      - fromGroup: arrakis-secrets-dev

  # Staging Worker
  - type: pserv
    name: arrakis-staging-worker
    runtime: node
    plan: standard
    region: oregon
    repo: https://github.com/happydotemdr/arrakis.git
    branch: staging
    autoDeploy: true
    buildCommand: "corepack enable && bun install"
    startCommand: "bun run worker:start"

    envVars:
      # Database and Redis connections
      - key: DATABASE_URL
        fromDatabase:
          name: arrakis-staging-db
          property: connectionString
      - key: REDIS_URL
        fromService:
          name: arrakis-staging-redis
          type: keyvalue
          property: connectionString

      # Reference existing environment groups
      - fromGroup: arrakis-shared
      - fromGroup: arrakis-staging
      - fromGroup: arrakis-secrets-prod

  # Production Worker with persistent disk
  - type: pserv
    name: arrakis-prod-worker
    runtime: node
    plan: pro
    region: oregon
    repo: https://github.com/happydotemdr/arrakis.git
    branch: master
    autoDeploy: false
    buildCommand: "corepack enable && bun install"
    startCommand: "bun run worker:start"

    # Persistent disk for worker data
    disk:
      name: worker-data
      mountPath: /app/data
      sizeGB: 10

    envVars:
      # Database and Redis connections
      - key: DATABASE_URL
        fromDatabase:
          name: arrakis-prod-db
          property: connectionString
      - key: REDIS_URL
        fromService:
          name: arrakis-prod-redis
          type: keyvalue
          property: connectionString

      # Reference existing environment groups
      - fromGroup: arrakis-shared
      - fromGroup: arrakis-prod
      - fromGroup: arrakis-secrets-prod