/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/trpc/[trpc]/route";
exports.ids = ["app/api/trpc/[trpc]/route"];
exports.modules = {

/***/ "(rsc)/./app/api/trpc/[trpc]/route.ts":
/*!**************************************!*\
  !*** ./app/api/trpc/[trpc]/route.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ handler),\n/* harmony export */   POST: () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_adapters_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @trpc/server/adapters/fetch */ \"(rsc)/./node_modules/@trpc/server/dist/adapters/fetch/index.mjs\");\n/* harmony import */ var _lib_api_router__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/api/router */ \"(rsc)/./lib/api/router.ts\");\n/* harmony import */ var _lib_api_trpc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/api/trpc */ \"(rsc)/./lib/api/trpc.ts\");\n/**\n * tRPC API Route Handler\n * Handles all tRPC requests in the Next.js App Router\n */ \n\n\nconst handler = (req)=>(0,_trpc_server_adapters_fetch__WEBPACK_IMPORTED_MODULE_2__.fetchRequestHandler)({\n        endpoint: '/api/trpc',\n        req,\n        router: _lib_api_router__WEBPACK_IMPORTED_MODULE_0__.appRouter,\n        createContext: _lib_api_trpc__WEBPACK_IMPORTED_MODULE_1__.createTRPCContext,\n        onError:  true ? ({ path, error })=>{\n            console.error(`‚ùå tRPC failed on ${path ?? '<no-path>'}: ${error.message}`);\n        } : 0\n    });\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL3RycGMvW3RycGNdL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7OztDQUdDLEdBRWdFO0FBQ3JCO0FBQ007QUFFbEQsTUFBTUcsVUFBVSxDQUFDQyxNQUNmSixnRkFBbUJBLENBQUM7UUFDbEJLLFVBQVU7UUFDVkQ7UUFDQUUsUUFBUUwsc0RBQVNBO1FBQ2pCTSxlQUFlTCw0REFBaUJBO1FBQ2hDTSxTQUNFQyxLQUFzQyxHQUNsQyxDQUFDLEVBQUVDLElBQUksRUFBRUMsS0FBSyxFQUFFO1lBQ2RDLFFBQVFELEtBQUssQ0FDWCxDQUFDLGlCQUFpQixFQUFFRCxRQUFRLFlBQVksRUFBRSxFQUFFQyxNQUFNRSxPQUFPLEVBQUU7UUFFL0QsSUFDQUMsQ0FBU0E7SUFDakI7QUFFd0MiLCJzb3VyY2VzIjpbIkM6XFxwcm9qZWN0c1xcYXJyYWtpc1xcYXBwXFxhcGlcXHRycGNcXFt0cnBjXVxccm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiB0UlBDIEFQSSBSb3V0ZSBIYW5kbGVyXG4gKiBIYW5kbGVzIGFsbCB0UlBDIHJlcXVlc3RzIGluIHRoZSBOZXh0LmpzIEFwcCBSb3V0ZXJcbiAqL1xuXG5pbXBvcnQgeyBmZXRjaFJlcXVlc3RIYW5kbGVyIH0gZnJvbSAnQHRycGMvc2VydmVyL2FkYXB0ZXJzL2ZldGNoJ1xuaW1wb3J0IHsgYXBwUm91dGVyIH0gZnJvbSAnQC9saWIvYXBpL3JvdXRlcidcbmltcG9ydCB7IGNyZWF0ZVRSUENDb250ZXh0IH0gZnJvbSAnQC9saWIvYXBpL3RycGMnXG5cbmNvbnN0IGhhbmRsZXIgPSAocmVxOiBSZXF1ZXN0KSA9PlxuICBmZXRjaFJlcXVlc3RIYW5kbGVyKHtcbiAgICBlbmRwb2ludDogJy9hcGkvdHJwYycsXG4gICAgcmVxLFxuICAgIHJvdXRlcjogYXBwUm91dGVyLFxuICAgIGNyZWF0ZUNvbnRleHQ6IGNyZWF0ZVRSUENDb250ZXh0LFxuICAgIG9uRXJyb3I6XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50J1xuICAgICAgICA/ICh7IHBhdGgsIGVycm9yIH0pID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgIGDinYwgdFJQQyBmYWlsZWQgb24gJHtwYXRoID8/ICc8bm8tcGF0aD4nfTogJHtlcnJvci5tZXNzYWdlfWBcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgIDogdW5kZWZpbmVkLFxuICB9KVxuXG5leHBvcnQgeyBoYW5kbGVyIGFzIEdFVCwgaGFuZGxlciBhcyBQT1NUIH1cbiJdLCJuYW1lcyI6WyJmZXRjaFJlcXVlc3RIYW5kbGVyIiwiYXBwUm91dGVyIiwiY3JlYXRlVFJQQ0NvbnRleHQiLCJoYW5kbGVyIiwicmVxIiwiZW5kcG9pbnQiLCJyb3V0ZXIiLCJjcmVhdGVDb250ZXh0Iiwib25FcnJvciIsInByb2Nlc3MiLCJwYXRoIiwiZXJyb3IiLCJjb25zb2xlIiwibWVzc2FnZSIsInVuZGVmaW5lZCIsIkdFVCIsIlBPU1QiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./app/api/trpc/[trpc]/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/api/router.ts":
/*!***************************!*\
  !*** ./lib/api/router.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appRouter: () => (/* binding */ appRouter)\n/* harmony export */ });\n/* harmony import */ var _trpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./trpc */ \"(rsc)/./lib/api/trpc.ts\");\n/* harmony import */ var _routers_sessions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./routers/sessions */ \"(rsc)/./lib/api/routers/sessions.ts\");\n/* harmony import */ var _routers_search__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./routers/search */ \"(rsc)/./lib/api/routers/search.ts\");\n/* harmony import */ var _routers_capture__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./routers/capture */ \"(rsc)/./lib/api/routers/capture.ts\");\n/* harmony import */ var _routers_claude__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./routers/claude */ \"(rsc)/./lib/api/routers/claude.ts\");\n/* harmony import */ var _routers_templates__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./routers/templates */ \"(rsc)/./lib/api/routers/templates.ts\");\n/**\n * Main tRPC App Router\n * Combines all individual routers into the main app router\n */ \n\n\n\n\n\n/**\n * Main application router\n *\n * Add new routers here as you create them\n */ const appRouter = (0,_trpc__WEBPACK_IMPORTED_MODULE_0__.router)({\n    sessions: _routers_sessions__WEBPACK_IMPORTED_MODULE_1__.sessionsRouter,\n    search: _routers_search__WEBPACK_IMPORTED_MODULE_2__.searchRouter,\n    capture: _routers_capture__WEBPACK_IMPORTED_MODULE_3__.captureRouter,\n    claude: _routers_claude__WEBPACK_IMPORTED_MODULE_4__.claudeRouter,\n    templates: _routers_templates__WEBPACK_IMPORTED_MODULE_5__.templatesRouter\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvYXBpL3JvdXRlci50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7OztDQUdDLEdBRThCO0FBQ29CO0FBQ0o7QUFDRTtBQUNGO0FBQ007QUFFckQ7Ozs7Q0FJQyxHQUNNLE1BQU1NLFlBQVlOLDZDQUFNQSxDQUFDO0lBQzlCTyxVQUFVTiw2REFBY0E7SUFDeEJPLFFBQVFOLHlEQUFZQTtJQUNwQk8sU0FBU04sMkRBQWFBO0lBQ3RCTyxRQUFRTix5REFBWUE7SUFDcEJPLFdBQVdOLCtEQUFlQTtBQUM1QixHQUFFIiwic291cmNlcyI6WyJDOlxccHJvamVjdHNcXGFycmFraXNcXGxpYlxcYXBpXFxyb3V0ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBNYWluIHRSUEMgQXBwIFJvdXRlclxuICogQ29tYmluZXMgYWxsIGluZGl2aWR1YWwgcm91dGVycyBpbnRvIHRoZSBtYWluIGFwcCByb3V0ZXJcbiAqL1xuXG5pbXBvcnQgeyByb3V0ZXIgfSBmcm9tICcuL3RycGMnXG5pbXBvcnQgeyBzZXNzaW9uc1JvdXRlciB9IGZyb20gJy4vcm91dGVycy9zZXNzaW9ucydcbmltcG9ydCB7IHNlYXJjaFJvdXRlciB9IGZyb20gJy4vcm91dGVycy9zZWFyY2gnXG5pbXBvcnQgeyBjYXB0dXJlUm91dGVyIH0gZnJvbSAnLi9yb3V0ZXJzL2NhcHR1cmUnXG5pbXBvcnQgeyBjbGF1ZGVSb3V0ZXIgfSBmcm9tICcuL3JvdXRlcnMvY2xhdWRlJ1xuaW1wb3J0IHsgdGVtcGxhdGVzUm91dGVyIH0gZnJvbSAnLi9yb3V0ZXJzL3RlbXBsYXRlcydcblxuLyoqXG4gKiBNYWluIGFwcGxpY2F0aW9uIHJvdXRlclxuICpcbiAqIEFkZCBuZXcgcm91dGVycyBoZXJlIGFzIHlvdSBjcmVhdGUgdGhlbVxuICovXG5leHBvcnQgY29uc3QgYXBwUm91dGVyID0gcm91dGVyKHtcbiAgc2Vzc2lvbnM6IHNlc3Npb25zUm91dGVyLFxuICBzZWFyY2g6IHNlYXJjaFJvdXRlcixcbiAgY2FwdHVyZTogY2FwdHVyZVJvdXRlcixcbiAgY2xhdWRlOiBjbGF1ZGVSb3V0ZXIsXG4gIHRlbXBsYXRlczogdGVtcGxhdGVzUm91dGVyLFxufSlcblxuLy8gRXhwb3J0IHR5cGUgZGVmaW5pdGlvbiBmb3IgY2xpZW50LXNpZGUgdHlwZSBzYWZldHlcbmV4cG9ydCB0eXBlIEFwcFJvdXRlciA9IHR5cGVvZiBhcHBSb3V0ZXJcbiJdLCJuYW1lcyI6WyJyb3V0ZXIiLCJzZXNzaW9uc1JvdXRlciIsInNlYXJjaFJvdXRlciIsImNhcHR1cmVSb3V0ZXIiLCJjbGF1ZGVSb3V0ZXIiLCJ0ZW1wbGF0ZXNSb3V0ZXIiLCJhcHBSb3V0ZXIiLCJzZXNzaW9ucyIsInNlYXJjaCIsImNhcHR1cmUiLCJjbGF1ZGUiLCJ0ZW1wbGF0ZXMiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/api/router.ts\n");

/***/ }),

/***/ "(rsc)/./lib/api/routers/capture.ts":
/*!************************************!*\
  !*** ./lib/api/routers/capture.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   captureRouter: () => (/* binding */ captureRouter)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var _trpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../trpc */ \"(rsc)/./lib/api/trpc.ts\");\n/* harmony import */ var _trpc_server__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @trpc/server */ \"(rsc)/./node_modules/@trpc/server/dist/tracked-Blz8XOf1.mjs\");\n/* harmony import */ var _lib_capture_auto_capture_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/capture/auto-capture-service */ \"(rsc)/./lib/capture/auto-capture-service.ts\");\n/**\n * Capture tRPC Router\n * API endpoints for capture service management\n */ \n\n\n\n// Input schemas\nconst captureConfigSchema = zod__WEBPACK_IMPORTED_MODULE_2__.object({\n    enabled: zod__WEBPACK_IMPORTED_MODULE_2__.boolean(),\n    autoStart: zod__WEBPACK_IMPORTED_MODULE_2__.boolean(),\n    interceptMode: zod__WEBPACK_IMPORTED_MODULE_2__[\"enum\"]([\n        'proxy',\n        'wrapper',\n        'monitor'\n    ]),\n    notification: zod__WEBPACK_IMPORTED_MODULE_2__.boolean(),\n    logLevel: zod__WEBPACK_IMPORTED_MODULE_2__[\"enum\"]([\n        'error',\n        'warn',\n        'info',\n        'debug'\n    ]),\n    storageEnabled: zod__WEBPACK_IMPORTED_MODULE_2__.boolean()\n});\nconst captureRouter = (0,_trpc__WEBPACK_IMPORTED_MODULE_0__.router)({\n    /**\n   * Get capture service status\n   */ status: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.query(async ()=>{\n        try {\n            return _lib_capture_auto_capture_service__WEBPACK_IMPORTED_MODULE_1__.defaultAutoCaptureService.getStatus();\n        } catch (error) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to get capture status',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Start capture service\n   */ start: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.mutation(async ()=>{\n        try {\n            await _lib_capture_auto_capture_service__WEBPACK_IMPORTED_MODULE_1__.defaultAutoCaptureService.start();\n            return {\n                success: true,\n                message: 'Capture service started'\n            };\n        } catch (error) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to start capture service',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Stop capture service\n   */ stop: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.mutation(async ()=>{\n        try {\n            await _lib_capture_auto_capture_service__WEBPACK_IMPORTED_MODULE_1__.defaultAutoCaptureService.stop();\n            return {\n                success: true,\n                message: 'Capture service stopped'\n            };\n        } catch (error) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to stop capture service',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Update capture service configuration\n   */ updateConfig: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(captureConfigSchema.partial()).mutation(async ({ input })=>{\n        try {\n            _lib_capture_auto_capture_service__WEBPACK_IMPORTED_MODULE_1__.defaultAutoCaptureService.updateConfig(input);\n            return {\n                success: true,\n                message: 'Configuration updated'\n            };\n        } catch (error) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to update configuration',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Get capture history/logs\n   */ history: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(zod__WEBPACK_IMPORTED_MODULE_2__.object({\n        limit: zod__WEBPACK_IMPORTED_MODULE_2__.number().min(1).max(100).default(50),\n        offset: zod__WEBPACK_IMPORTED_MODULE_2__.number().min(0).default(0),\n        level: zod__WEBPACK_IMPORTED_MODULE_2__[\"enum\"]([\n            'error',\n            'warn',\n            'info',\n            'debug'\n        ]).optional()\n    })).query(async ({ input })=>{\n        try {\n            // TODO: Implement capture history/logs functionality\n            return {\n                logs: [],\n                totalCount: 0\n            };\n        } catch (error) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to fetch capture history',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Test capture functionality\n   */ test: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.mutation(async ()=>{\n        try {\n            // TODO: Implement capture test functionality\n            // This would run a test capture to verify everything is working\n            return {\n                success: true,\n                message: 'Capture test completed successfully',\n                details: {\n                    proxyInstalled: true,\n                    databaseConnected: true,\n                    serviceRunning: true\n                }\n            };\n        } catch (error) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Capture test failed',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Get capture statistics\n   */ stats: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.query(async ()=>{\n        try {\n            const status = _lib_capture_auto_capture_service__WEBPACK_IMPORTED_MODULE_1__.defaultAutoCaptureService.getStatus();\n            return {\n                totalSessions: status.totalSessions,\n                sessionsToday: status.sessionsToday,\n                lastCaptureTime: status.lastCaptureTime,\n                errors: status.errors.length,\n                uptime: 0,\n                mode: status.mode,\n                running: status.running\n            };\n        } catch (error) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to fetch capture statistics',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Reset capture service\n   */ reset: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.mutation(async ()=>{\n        try {\n            await _lib_capture_auto_capture_service__WEBPACK_IMPORTED_MODULE_1__.defaultAutoCaptureService.stop();\n            // TODO: Clear any cached data, reset counters, etc.\n            await _lib_capture_auto_capture_service__WEBPACK_IMPORTED_MODULE_1__.defaultAutoCaptureService.start();\n            return {\n                success: true,\n                message: 'Capture service reset successfully'\n            };\n        } catch (error) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to reset capture service',\n                cause: error\n            });\n        }\n    })\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixtREFBU0EsQ0FBQztnQkFDbEJpQixNQUFNO2dCQUNOQyxTQUFTO2dCQUNUQyxPQUFPSDtZQUNUO1FBQ0Y7SUFDRjtBQUNGLEdBQUUiLCJzb3VyY2VzIjpbIkM6XFxwcm9qZWN0c1xcYXJyYWtpc1xcbGliXFxhcGlcXHJvdXRlcnNcXGNhcHR1cmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDYXB0dXJlIHRSUEMgUm91dGVyXG4gKiBBUEkgZW5kcG9pbnRzIGZvciBjYXB0dXJlIHNlcnZpY2UgbWFuYWdlbWVudFxuICovXG5cbmltcG9ydCB7IHogfSBmcm9tICd6b2QnXG5pbXBvcnQgeyByb3V0ZXIsIHB1YmxpY1Byb2NlZHVyZSB9IGZyb20gJy4uL3RycGMnXG5pbXBvcnQgeyBUUlBDRXJyb3IgfSBmcm9tICdAdHJwYy9zZXJ2ZXInXG5pbXBvcnQge1xuICBkZWZhdWx0QXV0b0NhcHR1cmVTZXJ2aWNlLFxuICB0eXBlIENhcHR1cmVTZXJ2aWNlQ29uZmlnLFxuICB0eXBlIENhcHR1cmVTdGF0dXMsXG59IGZyb20gJ0AvbGliL2NhcHR1cmUvYXV0by1jYXB0dXJlLXNlcnZpY2UnXG5cbi8vIElucHV0IHNjaGVtYXNcbmNvbnN0IGNhcHR1cmVDb25maWdTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGVuYWJsZWQ6IHouYm9vbGVhbigpLFxuICBhdXRvU3RhcnQ6IHouYm9vbGVhbigpLFxuICBpbnRlcmNlcHRNb2RlOiB6LmVudW0oWydwcm94eScsICd3cmFwcGVyJywgJ21vbml0b3InXSksXG4gIG5vdGlmaWNhdGlvbjogei5ib29sZWFuKCksXG4gIGxvZ0xldmVsOiB6LmVudW0oWydlcnJvcicsICd3YXJuJywgJ2luZm8nLCAnZGVidWcnXSksXG4gIHN0b3JhZ2VFbmFibGVkOiB6LmJvb2xlYW4oKSxcbn0pXG5cbmV4cG9ydCBjb25zdCBjYXB0dXJlUm91dGVyID0gcm91dGVyKHtcbiAgLyoqXG4gICAqIEdldCBjYXB0dXJlIHNlcnZpY2Ugc3RhdHVzXG4gICAqL1xuICBzdGF0dXM6IHB1YmxpY1Byb2NlZHVyZS5xdWVyeShhc3luYyAoKTogUHJvbWlzZTxDYXB0dXJlU3RhdHVzPiA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBkZWZhdWx0QXV0b0NhcHR1cmVTZXJ2aWNlLmdldFN0YXR1cygpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBUUlBDRXJyb3Ioe1xuICAgICAgICBjb2RlOiAnSU5URVJOQUxfU0VSVkVSX0VSUk9SJyxcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBnZXQgY2FwdHVyZSBzdGF0dXMnLFxuICAgICAgICBjYXVzZTogZXJyb3IsXG4gICAgICB9KVxuICAgIH1cbiAgfSksXG5cbiAgLyoqXG4gICAqIFN0YXJ0IGNhcHR1cmUgc2VydmljZVxuICAgKi9cbiAgc3RhcnQ6IHB1YmxpY1Byb2NlZHVyZS5tdXRhdGlvbihhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGRlZmF1bHRBdXRvQ2FwdHVyZVNlcnZpY2Uuc3RhcnQoKVxuICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgbWVzc2FnZTogJ0NhcHR1cmUgc2VydmljZSBzdGFydGVkJyB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBUUlBDRXJyb3Ioe1xuICAgICAgICBjb2RlOiAnSU5URVJOQUxfU0VSVkVSX0VSUk9SJyxcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBzdGFydCBjYXB0dXJlIHNlcnZpY2UnLFxuICAgICAgICBjYXVzZTogZXJyb3IsXG4gICAgICB9KVxuICAgIH1cbiAgfSksXG5cbiAgLyoqXG4gICAqIFN0b3AgY2FwdHVyZSBzZXJ2aWNlXG4gICAqL1xuICBzdG9wOiBwdWJsaWNQcm9jZWR1cmUubXV0YXRpb24oYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBkZWZhdWx0QXV0b0NhcHR1cmVTZXJ2aWNlLnN0b3AoKVxuICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgbWVzc2FnZTogJ0NhcHR1cmUgc2VydmljZSBzdG9wcGVkJyB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBUUlBDRXJyb3Ioe1xuICAgICAgICBjb2RlOiAnSU5URVJOQUxfU0VSVkVSX0VSUk9SJyxcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBzdG9wIGNhcHR1cmUgc2VydmljZScsXG4gICAgICAgIGNhdXNlOiBlcnJvcixcbiAgICAgIH0pXG4gICAgfVxuICB9KSxcblxuICAvKipcbiAgICogVXBkYXRlIGNhcHR1cmUgc2VydmljZSBjb25maWd1cmF0aW9uXG4gICAqL1xuICB1cGRhdGVDb25maWc6IHB1YmxpY1Byb2NlZHVyZVxuICAgIC5pbnB1dChjYXB0dXJlQ29uZmlnU2NoZW1hLnBhcnRpYWwoKSlcbiAgICAubXV0YXRpb24oYXN5bmMgKHsgaW5wdXQgfSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGVmYXVsdEF1dG9DYXB0dXJlU2VydmljZS51cGRhdGVDb25maWcoaW5wdXQpXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIG1lc3NhZ2U6ICdDb25maWd1cmF0aW9uIHVwZGF0ZWQnIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBUUlBDRXJyb3Ioe1xuICAgICAgICAgIGNvZGU6ICdJTlRFUk5BTF9TRVJWRVJfRVJST1InLFxuICAgICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gdXBkYXRlIGNvbmZpZ3VyYXRpb24nLFxuICAgICAgICAgIGNhdXNlOiBlcnJvcixcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KSxcblxuICAvKipcbiAgICogR2V0IGNhcHR1cmUgaGlzdG9yeS9sb2dzXG4gICAqL1xuICBoaXN0b3J5OiBwdWJsaWNQcm9jZWR1cmVcbiAgICAuaW5wdXQoXG4gICAgICB6Lm9iamVjdCh7XG4gICAgICAgIGxpbWl0OiB6Lm51bWJlcigpLm1pbigxKS5tYXgoMTAwKS5kZWZhdWx0KDUwKSxcbiAgICAgICAgb2Zmc2V0OiB6Lm51bWJlcigpLm1pbigwKS5kZWZhdWx0KDApLFxuICAgICAgICBsZXZlbDogei5lbnVtKFsnZXJyb3InLCAnd2FybicsICdpbmZvJywgJ2RlYnVnJ10pLm9wdGlvbmFsKCksXG4gICAgICB9KVxuICAgIClcbiAgICAucXVlcnkoYXN5bmMgKHsgaW5wdXQgfSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVE9ETzogSW1wbGVtZW50IGNhcHR1cmUgaGlzdG9yeS9sb2dzIGZ1bmN0aW9uYWxpdHlcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBsb2dzOiBbXSxcbiAgICAgICAgICB0b3RhbENvdW50OiAwLFxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgVFJQQ0Vycm9yKHtcbiAgICAgICAgICBjb2RlOiAnSU5URVJOQUxfU0VSVkVSX0VSUk9SJyxcbiAgICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIGZldGNoIGNhcHR1cmUgaGlzdG9yeScsXG4gICAgICAgICAgY2F1c2U6IGVycm9yLFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pLFxuXG4gIC8qKlxuICAgKiBUZXN0IGNhcHR1cmUgZnVuY3Rpb25hbGl0eVxuICAgKi9cbiAgdGVzdDogcHVibGljUHJvY2VkdXJlLm11dGF0aW9uKGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gVE9ETzogSW1wbGVtZW50IGNhcHR1cmUgdGVzdCBmdW5jdGlvbmFsaXR5XG4gICAgICAvLyBUaGlzIHdvdWxkIHJ1biBhIHRlc3QgY2FwdHVyZSB0byB2ZXJpZnkgZXZlcnl0aGluZyBpcyB3b3JraW5nXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBtZXNzYWdlOiAnQ2FwdHVyZSB0ZXN0IGNvbXBsZXRlZCBzdWNjZXNzZnVsbHknLFxuICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgcHJveHlJbnN0YWxsZWQ6IHRydWUsXG4gICAgICAgICAgZGF0YWJhc2VDb25uZWN0ZWQ6IHRydWUsXG4gICAgICAgICAgc2VydmljZVJ1bm5pbmc6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBUUlBDRXJyb3Ioe1xuICAgICAgICBjb2RlOiAnSU5URVJOQUxfU0VSVkVSX0VSUk9SJyxcbiAgICAgICAgbWVzc2FnZTogJ0NhcHR1cmUgdGVzdCBmYWlsZWQnLFxuICAgICAgICBjYXVzZTogZXJyb3IsXG4gICAgICB9KVxuICAgIH1cbiAgfSksXG5cbiAgLyoqXG4gICAqIEdldCBjYXB0dXJlIHN0YXRpc3RpY3NcbiAgICovXG4gIHN0YXRzOiBwdWJsaWNQcm9jZWR1cmUucXVlcnkoYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBzdGF0dXMgPSBkZWZhdWx0QXV0b0NhcHR1cmVTZXJ2aWNlLmdldFN0YXR1cygpXG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvdGFsU2Vzc2lvbnM6IHN0YXR1cy50b3RhbFNlc3Npb25zLFxuICAgICAgICBzZXNzaW9uc1RvZGF5OiBzdGF0dXMuc2Vzc2lvbnNUb2RheSxcbiAgICAgICAgbGFzdENhcHR1cmVUaW1lOiBzdGF0dXMubGFzdENhcHR1cmVUaW1lLFxuICAgICAgICBlcnJvcnM6IHN0YXR1cy5lcnJvcnMubGVuZ3RoLFxuICAgICAgICB1cHRpbWU6IDAsIC8vIFRPRE86IENhbGN1bGF0ZSBzZXJ2aWNlIHVwdGltZVxuICAgICAgICBtb2RlOiBzdGF0dXMubW9kZSxcbiAgICAgICAgcnVubmluZzogc3RhdHVzLnJ1bm5pbmcsXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBUUlBDRXJyb3Ioe1xuICAgICAgICBjb2RlOiAnSU5URVJOQUxfU0VSVkVSX0VSUk9SJyxcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBmZXRjaCBjYXB0dXJlIHN0YXRpc3RpY3MnLFxuICAgICAgICBjYXVzZTogZXJyb3IsXG4gICAgICB9KVxuICAgIH1cbiAgfSksXG5cbiAgLyoqXG4gICAqIFJlc2V0IGNhcHR1cmUgc2VydmljZVxuICAgKi9cbiAgcmVzZXQ6IHB1YmxpY1Byb2NlZHVyZS5tdXRhdGlvbihhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGRlZmF1bHRBdXRvQ2FwdHVyZVNlcnZpY2Uuc3RvcCgpXG4gICAgICAvLyBUT0RPOiBDbGVhciBhbnkgY2FjaGVkIGRhdGEsIHJlc2V0IGNvdW50ZXJzLCBldGMuXG4gICAgICBhd2FpdCBkZWZhdWx0QXV0b0NhcHR1cmVTZXJ2aWNlLnN0YXJ0KClcblxuICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgbWVzc2FnZTogJ0NhcHR1cmUgc2VydmljZSByZXNldCBzdWNjZXNzZnVsbHknIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IFRSUENFcnJvcih7XG4gICAgICAgIGNvZGU6ICdJTlRFUk5BTF9TRVJWRVJfRVJST1InLFxuICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIHJlc2V0IGNhcHR1cmUgc2VydmljZScsXG4gICAgICAgIGNhdXNlOiBlcnJvcixcbiAgICAgIH0pXG4gICAgfVxuICB9KSxcbn0pXG4iXSwibmFtZXMiOlsieiIsInJvdXRlciIsInB1YmxpY1Byb2NlZHVyZSIsIlRSUENFcnJvciIsImRlZmF1bHRBdXRvQ2FwdHVyZVNlcnZpY2UiLCJjYXB0dXJlQ29uZmlnU2NoZW1hIiwib2JqZWN0IiwiZW5hYmxlZCIsImJvb2xlYW4iLCJhdXRvU3RhcnQiLCJpbnRlcmNlcHRNb2RlIiwiZW51bSIsIm5vdGlmaWNhdGlvbiIsImxvZ0xldmVsIiwic3RvcmFnZUVuYWJsZWQiLCJjYXB0dXJlUm91dGVyIiwic3RhdHVzIiwicXVlcnkiLCJnZXRTdGF0dXMiLCJlcnJvciIsImNvZGUiLCJtZXNzYWdlIiwiY2F1c2UiLCJzdGFydCIsIm11dGF0aW9uIiwic3VjY2VzcyIsInN0b3AiLCJ1cGRhdGVDb25maWciLCJpbnB1dCIsInBhcnRpYWwiLCJoaXN0b3J5IiwibGltaXQiLCJudW1iZXIiLCJtaW4iLCJtYXgiLCJkZWZhdWx0Iiwib2Zmc2V0IiwibGV2ZWwiLCJvcHRpb25hbCIsImxvZ3MiLCJ0b3RhbENvdW50IiwidGVzdCIsImRldGFpbHMiLCJwcm94eUluc3RhbGxlZCIsImRhdGFiYXNlQ29ubmVjdGVkIiwic2VydmljZVJ1bm5pbmciLCJzdGF0cyIsInRvdGFsU2Vzc2lvbnMiLCJzZXNzaW9uc1RvZGF5IiwibGFzdENhcHR1cmVUaW1lIiwiZXJyb3JzIiwibGVuZ3RoIiwidXB0aW1lIiwibW9kZSIsInJ1bm5pbmciLCJyZXNldCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/api/routers/capture.ts\n");

/***/ }),

/***/ "(rsc)/./lib/api/routers/claude.ts":
/*!***********************************!*\
  !*** ./lib/api/routers/claude.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   claudeRouter: () => (/* binding */ claudeRouter)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var _trpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../trpc */ \"(rsc)/./lib/api/trpc.ts\");\n/* harmony import */ var _trpc_server__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @trpc/server */ \"(rsc)/./node_modules/@trpc/server/dist/tracked-Blz8XOf1.mjs\");\n/* harmony import */ var _lib_claude_api_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/claude/api-client */ \"(rsc)/./lib/claude/api-client.ts\");\n/**\n * Claude API tRPC Router\n * Real Claude API integration endpoints\n */ \n\n\n\n// Input schemas\nconst claudeMessageSchema = zod__WEBPACK_IMPORTED_MODULE_2__.object({\n    prompt: zod__WEBPACK_IMPORTED_MODULE_2__.string().min(1, 'Prompt cannot be empty'),\n    options: zod__WEBPACK_IMPORTED_MODULE_2__.object({\n        model: zod__WEBPACK_IMPORTED_MODULE_2__.string().optional(),\n        maxTokens: zod__WEBPACK_IMPORTED_MODULE_2__.number().min(1).max(8000).optional(),\n        temperature: zod__WEBPACK_IMPORTED_MODULE_2__.number().min(0).max(2).optional(),\n        systemPrompt: zod__WEBPACK_IMPORTED_MODULE_2__.string().optional(),\n        captureToDatabase: zod__WEBPACK_IMPORTED_MODULE_2__.boolean().default(true),\n        username: zod__WEBPACK_IMPORTED_MODULE_2__.string().default('arrakis-user')\n    }).optional()\n});\nconst claudeStreamSchema = zod__WEBPACK_IMPORTED_MODULE_2__.object({\n    prompt: zod__WEBPACK_IMPORTED_MODULE_2__.string().min(1, 'Prompt cannot be empty'),\n    options: zod__WEBPACK_IMPORTED_MODULE_2__.object({\n        model: zod__WEBPACK_IMPORTED_MODULE_2__.string().optional(),\n        maxTokens: zod__WEBPACK_IMPORTED_MODULE_2__.number().min(1).max(8000).optional(),\n        temperature: zod__WEBPACK_IMPORTED_MODULE_2__.number().min(0).max(2).optional(),\n        systemPrompt: zod__WEBPACK_IMPORTED_MODULE_2__.string().optional(),\n        captureToDatabase: zod__WEBPACK_IMPORTED_MODULE_2__.boolean().default(true),\n        username: zod__WEBPACK_IMPORTED_MODULE_2__.string().default('arrakis-user')\n    }).optional()\n});\nconst claudeRouter = (0,_trpc__WEBPACK_IMPORTED_MODULE_0__.router)({\n    /**\n   * Send a message to Claude API\n   */ sendMessage: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(claudeMessageSchema).mutation(async ({ input })=>{\n        try {\n            console.log('üöÄ tRPC: Processing Claude API request...');\n            console.log('üìã Input received:', JSON.stringify(input, null, 2));\n            const { prompt, options } = input;\n            // Sanitize options to prevent JSON issues\n            const sanitizedOptions = {\n                model: options?.model || 'claude-sonnet-4-20250514',\n                maxTokens: options?.maxTokens || 4000,\n                temperature: options?.temperature || 0.7,\n                captureToDatabase: options?.captureToDatabase !== false,\n                username: options?.username || 'arrakis-user',\n                systemPrompt: options?.systemPrompt?.replace(/\\\\/g, '/') || undefined\n            };\n            console.log('üßπ Sanitized options:', JSON.stringify(sanitizedOptions, null, 2));\n            const response = await _lib_claude_api_client__WEBPACK_IMPORTED_MODULE_1__.claudeClient.sendMessage(prompt, sanitizedOptions);\n            console.log('‚úÖ tRPC: Claude API request completed');\n            return {\n                success: true,\n                data: response\n            };\n        } catch (error) {\n            console.error('‚ùå tRPC: Claude API error:', error);\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to get Claude response',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Stream a message to Claude API (for future real-time features)\n   */ streamMessage: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(claudeStreamSchema).mutation(async ({ input })=>{\n        try {\n            console.log('üîÑ tRPC: Starting Claude API stream...');\n            const { prompt, options = {} } = input;\n            // For now, we'll use the regular sendMessage since tRPC doesn't handle streams easily\n            // In the future, we can implement WebSocket streaming\n            const response = await _lib_claude_api_client__WEBPACK_IMPORTED_MODULE_1__.claudeClient.sendMessage(prompt, options);\n            console.log('‚úÖ tRPC: Claude API stream completed');\n            return {\n                success: true,\n                data: response,\n                streaming: false\n            };\n        } catch (error) {\n            console.error('‚ùå tRPC: Claude API stream error:', error);\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to stream Claude response',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Test Claude API connection\n   */ test: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.mutation(async ()=>{\n        try {\n            console.log('üîß tRPC: Testing Claude API connection...');\n            const testResponse = await _lib_claude_api_client__WEBPACK_IMPORTED_MODULE_1__.claudeClient.sendMessage('Respond with \"Connection test successful\" to confirm the API is working.', {\n                maxTokens: 50,\n                captureToDatabase: false\n            });\n            console.log('‚úÖ tRPC: Claude API test completed');\n            return {\n                success: true,\n                message: 'Claude API connection successful',\n                details: {\n                    responseId: testResponse.id,\n                    model: testResponse.model,\n                    tokensUsed: testResponse.usage.input_tokens + testResponse.usage.output_tokens,\n                    responseText: testResponse.content.find((c)=>c.type === 'text')?.text || ''\n                }\n            };\n        } catch (error) {\n            console.error('‚ùå tRPC: Claude API test failed:', error);\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Claude API test failed',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Get Claude API status and models\n   */ status: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.query(async ()=>{\n        try {\n            const hasApiKey = !!process.env.ANTHROPIC_API_KEY;\n            return {\n                connected: hasApiKey,\n                apiKeyConfigured: hasApiKey,\n                availableModels: [\n                    'claude-sonnet-4-20250514',\n                    'claude-3-5-sonnet-20241022',\n                    'claude-3-sonnet-20240229',\n                    'claude-3-haiku-20240307'\n                ],\n                defaultModel: 'claude-sonnet-4-20250514',\n                estimatedCost: {\n                    inputPer1K: 0.003,\n                    outputPer1K: 0.015,\n                    currency: 'USD'\n                }\n            };\n        } catch (error) {\n            console.error('‚ùå tRPC: Failed to get Claude API status:', error);\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to get Claude API status',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Get usage statistics\n   */ usage: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.query(async ()=>{\n        try {\n            // TODO: Implement usage tracking from database\n            // For now, return placeholder data\n            return {\n                totalRequests: 0,\n                totalTokens: 0,\n                totalCost: 0,\n                requestsToday: 0,\n                tokensToday: 0,\n                costToday: 0,\n                averageResponseTime: 0,\n                successRate: 100\n            };\n        } catch (error) {\n            console.error('‚ùå tRPC: Failed to get usage statistics:', error);\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to get usage statistics',\n                cause: error\n            });\n        }\n    })\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/api/routers/claude.ts\n");

/***/ }),

/***/ "(rsc)/./lib/api/routers/search.ts":
/*!***********************************!*\
  !*** ./lib/api/routers/search.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   searchRouter: () => (/* binding */ searchRouter)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var _trpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../trpc */ \"(rsc)/./lib/api/trpc.ts\");\n/* harmony import */ var _trpc_server__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @trpc/server */ \"(rsc)/./node_modules/@trpc/server/dist/tracked-Blz8XOf1.mjs\");\n/**\n * Search tRPC Router\n * API endpoints for conversation search functionality\n */ \n\n\n// Input schemas\nconst searchQuerySchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    query: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1).max(500),\n    type: zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\n        'text',\n        'semantic',\n        'hybrid'\n    ]).default('hybrid'),\n    limit: zod__WEBPACK_IMPORTED_MODULE_1__.number().min(1).max(100).default(20),\n    filters: zod__WEBPACK_IMPORTED_MODULE_1__.object({\n        sessionIds: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.string().uuid()).optional(),\n        startDate: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional(),\n        endDate: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional(),\n        toolsUsed: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.string()).optional(),\n        minCost: zod__WEBPACK_IMPORTED_MODULE_1__.number().optional(),\n        maxCost: zod__WEBPACK_IMPORTED_MODULE_1__.number().optional(),\n        roles: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\n            'user',\n            'assistant'\n        ])).optional()\n    }).optional()\n});\nconst savedSearchSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1).max(100),\n    query: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1).max(500),\n    filters: zod__WEBPACK_IMPORTED_MODULE_1__.object({\n        startDate: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional(),\n        endDate: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional(),\n        toolsUsed: zod__WEBPACK_IMPORTED_MODULE_1__.array(zod__WEBPACK_IMPORTED_MODULE_1__.string()).optional()\n    }).optional()\n});\nconst searchRouter = (0,_trpc__WEBPACK_IMPORTED_MODULE_0__.router)({\n    /**\n   * Search conversations\n   */ conversations: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(searchQuerySchema).query(async ({ input })=>{\n        try {\n            const { query, type, limit, filters } = input;\n            // TODO: Implement actual search functionality\n            // This would use pgvector for semantic search and full-text for text search\n            // Placeholder response\n            return {\n                results: [],\n                totalCount: 0,\n                searchType: type,\n                processingTime: 0\n            };\n        } catch (error) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_2__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Search failed',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Get search suggestions\n   */ suggestions: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(zod__WEBPACK_IMPORTED_MODULE_1__.object({\n        query: zod__WEBPACK_IMPORTED_MODULE_1__.string().min(1).max(100),\n        limit: zod__WEBPACK_IMPORTED_MODULE_1__.number().min(1).max(10).default(5)\n    })).query(async ({ input })=>{\n        try {\n            const { query, limit } = input;\n            // TODO: Implement search suggestions based on:\n            // - Previous searches\n            // - Common terms\n            // - Tool names\n            // - Session titles\n            return {\n                suggestions: []\n            };\n        } catch (error) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_2__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to get search suggestions',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Get saved searches\n   */ savedSearches: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.query(async ()=>{\n        try {\n            // TODO: Implement saved searches functionality\n            return {\n                searches: []\n            };\n        } catch (error) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_2__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to fetch saved searches',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Save search\n   */ saveSearch: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(savedSearchSchema).mutation(async ({ input })=>{\n        try {\n            const { name, query, filters } = input;\n            // TODO: Implement save search functionality\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_2__.TRPCError({\n                code: 'NOT_IMPLEMENTED',\n                message: 'Save search not implemented yet'\n            });\n        } catch (error) {\n            if (error instanceof _trpc_server__WEBPACK_IMPORTED_MODULE_2__.TRPCError) {\n                throw error;\n            }\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_2__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to save search',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Delete saved search\n   */ deleteSavedSearch: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(zod__WEBPACK_IMPORTED_MODULE_1__.string().uuid()).mutation(async ({ input: searchId })=>{\n        try {\n            // TODO: Implement delete saved search\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_2__.TRPCError({\n                code: 'NOT_IMPLEMENTED',\n                message: 'Delete saved search not implemented yet'\n            });\n        } catch (error) {\n            if (error instanceof _trpc_server__WEBPACK_IMPORTED_MODULE_2__.TRPCError) {\n                throw error;\n            }\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_2__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to delete saved search',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Get search analytics\n   */ analytics: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.query(async ()=>{\n        try {\n            // TODO: Implement search analytics\n            return {\n                totalSearches: 0,\n                popularQueries: [],\n                searchPerformance: {\n                    averageResponseTime: 0,\n                    successRate: 0\n                }\n            };\n        } catch (error) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_2__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to fetch search analytics',\n                cause: error\n            });\n        }\n    })\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/api/routers/search.ts\n");

/***/ }),

/***/ "(rsc)/./lib/api/routers/sessions.ts":
/*!*************************************!*\
  !*** ./lib/api/routers/sessions.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sessionsRouter: () => (/* binding */ sessionsRouter)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var _trpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../trpc */ \"(rsc)/./lib/api/trpc.ts\");\n/* harmony import */ var _lib_db_queries__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/db/queries */ \"(rsc)/./lib/db/queries.ts\");\n/* harmony import */ var _trpc_server__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @trpc/server */ \"(rsc)/./node_modules/@trpc/server/dist/tracked-Blz8XOf1.mjs\");\n/**\n * Sessions tRPC Router\n * API endpoints for session management and retrieval\n */ \n\n\n\n// Input schemas\nconst sessionFiltersSchema = zod__WEBPACK_IMPORTED_MODULE_2__.object({\n    startDate: zod__WEBPACK_IMPORTED_MODULE_2__.string().optional(),\n    endDate: zod__WEBPACK_IMPORTED_MODULE_2__.string().optional(),\n    status: zod__WEBPACK_IMPORTED_MODULE_2__[\"enum\"]([\n        'active',\n        'completed',\n        'error'\n    ]).optional(),\n    minCost: zod__WEBPACK_IMPORTED_MODULE_2__.number().optional(),\n    maxCost: zod__WEBPACK_IMPORTED_MODULE_2__.number().optional(),\n    toolsUsed: zod__WEBPACK_IMPORTED_MODULE_2__.array(zod__WEBPACK_IMPORTED_MODULE_2__.string()).optional()\n});\nconst paginationSchema = zod__WEBPACK_IMPORTED_MODULE_2__.object({\n    limit: zod__WEBPACK_IMPORTED_MODULE_2__.number().min(1).max(100).default(20),\n    cursor: zod__WEBPACK_IMPORTED_MODULE_2__.string().optional()\n});\nconst sessionsRouter = (0,_trpc__WEBPACK_IMPORTED_MODULE_0__.router)({\n    /**\n   * Get paginated list of sessions with optional filters\n   */ list: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(zod__WEBPACK_IMPORTED_MODULE_2__.object({\n        filters: sessionFiltersSchema.optional(),\n        pagination: paginationSchema.optional()\n    })).query(async ({ input })=>{\n        try {\n            const { filters, pagination } = input;\n            const sessions = await (0,_lib_db_queries__WEBPACK_IMPORTED_MODULE_1__.getSessions)({\n                filters,\n                limit: pagination?.limit || 20,\n                cursor: pagination?.cursor\n            });\n            return {\n                sessions,\n                nextCursor: sessions.length === (pagination?.limit || 20) ? sessions[sessions.length - 1].id : null\n            };\n        } catch (error) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to fetch sessions',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Get session by ID with full details\n   */ byId: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(zod__WEBPACK_IMPORTED_MODULE_2__.string().uuid()).query(async ({ input: sessionId })=>{\n        try {\n            const session = await (0,_lib_db_queries__WEBPACK_IMPORTED_MODULE_1__.getSessionById)(sessionId);\n            if (!session) {\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                    code: 'NOT_FOUND',\n                    message: 'Session not found'\n                });\n            }\n            return session;\n        } catch (error) {\n            if (error instanceof _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError) {\n                throw error;\n            }\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to fetch session',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Get messages for a session\n   */ messages: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(zod__WEBPACK_IMPORTED_MODULE_2__.object({\n        sessionId: zod__WEBPACK_IMPORTED_MODULE_2__.string().uuid(),\n        limit: zod__WEBPACK_IMPORTED_MODULE_2__.number().min(1).max(100).default(50),\n        offset: zod__WEBPACK_IMPORTED_MODULE_2__.number().min(0).default(0)\n    })).query(async ({ input })=>{\n        try {\n            const { sessionId, limit, offset } = input;\n            const messages = await (0,_lib_db_queries__WEBPACK_IMPORTED_MODULE_1__.getSessionMessages)(sessionId, {\n                limit,\n                offset\n            });\n            return messages;\n        } catch (error) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to fetch session messages',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Get session statistics\n   */ stats: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.query(async ()=>{\n        try {\n            // TODO: Implement session statistics\n            return {\n                totalSessions: 0,\n                sessionsThisWeek: 0,\n                totalMessages: 0,\n                totalCost: 0,\n                averageSessionLength: 0,\n                topTools: []\n            };\n        } catch (error) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to fetch session statistics',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Delete session\n   */ delete: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(zod__WEBPACK_IMPORTED_MODULE_2__.string().uuid()).mutation(async ({ input: sessionId })=>{\n        try {\n            // TODO: Implement session deletion\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: 'NOT_IMPLEMENTED',\n                message: 'Session deletion not implemented yet'\n            });\n        } catch (error) {\n            if (error instanceof _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError) {\n                throw error;\n            }\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to delete session',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Export session\n   */ export: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(zod__WEBPACK_IMPORTED_MODULE_2__.object({\n        sessionId: zod__WEBPACK_IMPORTED_MODULE_2__.string().uuid(),\n        format: zod__WEBPACK_IMPORTED_MODULE_2__[\"enum\"]([\n            'json',\n            'markdown',\n            'pdf'\n        ]),\n        includeMetadata: zod__WEBPACK_IMPORTED_MODULE_2__.boolean().default(true)\n    })).mutation(async ({ input })=>{\n        try {\n            const { sessionId, format, includeMetadata } = input;\n            // Get session with messages\n            const session = await (0,_lib_db_queries__WEBPACK_IMPORTED_MODULE_1__.getSessionById)(sessionId);\n            if (!session) {\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                    code: 'NOT_FOUND',\n                    message: 'Session not found'\n                });\n            }\n            const messages = await (0,_lib_db_queries__WEBPACK_IMPORTED_MODULE_1__.getSessionMessages)(sessionId, {\n                limit: 1000,\n                offset: 0\n            });\n            const exportData = {\n                session: {\n                    id: session.id,\n                    title: session.title,\n                    createdAt: session.createdAt,\n                    status: session.status,\n                    ...includeMetadata && {\n                        metadata: session.metadata\n                    }\n                },\n                messages: messages.map((msg)=>({\n                        id: msg.id,\n                        role: msg.role,\n                        content: msg.content,\n                        createdAt: msg.createdAt,\n                        ...includeMetadata && {\n                            tokens: msg.tokens,\n                            costUsd: msg.costUsd,\n                            metadata: msg.metadata\n                        }\n                    })),\n                exportedAt: new Date(),\n                format\n            };\n            // Format data based on requested format\n            let content;\n            let mimeType;\n            let filename;\n            switch(format){\n                case 'json':\n                    content = JSON.stringify(exportData, null, 2);\n                    mimeType = 'application/json';\n                    filename = `session-${sessionId}.json`;\n                    break;\n                case 'markdown':\n                    content = formatAsMarkdown(exportData);\n                    mimeType = 'text/markdown';\n                    filename = `session-${sessionId}.md`;\n                    break;\n                case 'pdf':\n                    // For MVP, we'll export as markdown and let client handle PDF conversion\n                    content = formatAsMarkdown(exportData);\n                    mimeType = 'text/markdown';\n                    filename = `session-${sessionId}.md`;\n                    break;\n                default:\n                    throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                        code: 'BAD_REQUEST',\n                        message: 'Unsupported export format'\n                    });\n            }\n            return {\n                content,\n                mimeType,\n                filename,\n                size: Buffer.byteLength(content, 'utf8')\n            };\n        } catch (error) {\n            if (error instanceof _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError) {\n                throw error;\n            }\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to export session',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Bulk export sessions\n   */ bulkExport: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(zod__WEBPACK_IMPORTED_MODULE_2__.object({\n        sessionIds: zod__WEBPACK_IMPORTED_MODULE_2__.array(zod__WEBPACK_IMPORTED_MODULE_2__.string().uuid()),\n        format: zod__WEBPACK_IMPORTED_MODULE_2__[\"enum\"]([\n            'json',\n            'markdown',\n            'pdf'\n        ]),\n        includeMetadata: zod__WEBPACK_IMPORTED_MODULE_2__.boolean().default(true)\n    })).mutation(async ({ input })=>{\n        try {\n            const { sessionIds, format, includeMetadata } = input;\n            const exportResults = [];\n            for (const sessionId of sessionIds){\n                try {\n                    const session = await (0,_lib_db_queries__WEBPACK_IMPORTED_MODULE_1__.getSessionById)(sessionId);\n                    if (!session) continue;\n                    const messages = await (0,_lib_db_queries__WEBPACK_IMPORTED_MODULE_1__.getSessionMessages)(sessionId, {\n                        limit: 1000,\n                        offset: 0\n                    });\n                    exportResults.push({\n                        session: {\n                            id: session.id,\n                            title: session.title,\n                            createdAt: session.createdAt,\n                            status: session.status,\n                            ...includeMetadata && {\n                                metadata: session.metadata\n                            }\n                        },\n                        messages: messages.map((msg)=>({\n                                id: msg.id,\n                                role: msg.role,\n                                content: msg.content,\n                                createdAt: msg.createdAt,\n                                ...includeMetadata && {\n                                    tokens: msg.tokens,\n                                    costUsd: msg.costUsd,\n                                    metadata: msg.metadata\n                                }\n                            }))\n                    });\n                } catch (error) {\n                    console.error(`Failed to export session ${sessionId}:`, error);\n                }\n            }\n            const bulkExportData = {\n                sessions: exportResults,\n                exportedAt: new Date(),\n                format,\n                totalSessions: exportResults.length\n            };\n            let content;\n            let mimeType;\n            let filename;\n            switch(format){\n                case 'json':\n                    content = JSON.stringify(bulkExportData, null, 2);\n                    mimeType = 'application/json';\n                    filename = `arrakis-conversations-${Date.now()}.json`;\n                    break;\n                case 'markdown':\n                    content = formatBulkAsMarkdown(bulkExportData);\n                    mimeType = 'text/markdown';\n                    filename = `arrakis-conversations-${Date.now()}.md`;\n                    break;\n                case 'pdf':\n                    content = formatBulkAsMarkdown(bulkExportData);\n                    mimeType = 'text/markdown';\n                    filename = `arrakis-conversations-${Date.now()}.md`;\n                    break;\n                default:\n                    throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                        code: 'BAD_REQUEST',\n                        message: 'Unsupported export format'\n                    });\n            }\n            return {\n                content,\n                mimeType,\n                filename,\n                size: Buffer.byteLength(content, 'utf8'),\n                exportedSessionsCount: exportResults.length\n            };\n        } catch (error) {\n            if (error instanceof _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError) {\n                throw error;\n            }\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to bulk export sessions',\n                cause: error\n            });\n        }\n    })\n});\n// Helper functions for export formatting\nfunction formatAsMarkdown(exportData) {\n    const { session, messages } = exportData;\n    let markdown = `# ${session.title || 'Untitled Conversation'}\\n\\n`;\n    markdown += `**Session ID:** ${session.id}\\n`;\n    markdown += `**Created:** ${new Date(session.createdAt).toLocaleString()}\\n`;\n    markdown += `**Status:** ${session.status}\\n\\n`;\n    if (session.metadata?.sessionInfo?.projectPath) {\n        markdown += `**Project:** ${session.metadata.sessionInfo.projectPath}\\n\\n`;\n    }\n    markdown += `---\\n\\n`;\n    for (const message of messages){\n        const role = message.role.charAt(0).toUpperCase() + message.role.slice(1);\n        markdown += `## ${role}\\n\\n`;\n        markdown += `${message.content}\\n\\n`;\n        if (message.metadata && Object.keys(message.metadata).length > 0) {\n            markdown += `*Metadata: ${JSON.stringify(message.metadata)}*\\n\\n`;\n        }\n        markdown += `---\\n\\n`;\n    }\n    markdown += `*Exported on ${new Date().toLocaleString()}*\\n`;\n    return markdown;\n}\nfunction formatBulkAsMarkdown(bulkExportData) {\n    let markdown = `# Arrakis Conversation Export\\n\\n`;\n    markdown += `**Exported:** ${new Date(bulkExportData.exportedAt).toLocaleString()}\\n`;\n    markdown += `**Total Sessions:** ${bulkExportData.totalSessions}\\n\\n`;\n    markdown += `---\\n\\n`;\n    for (const sessionData of bulkExportData.sessions){\n        const singleExport = {\n            session: sessionData.session,\n            messages: sessionData.messages,\n            exportedAt: bulkExportData.exportedAt,\n            format: bulkExportData.format\n        };\n        markdown += formatAsMarkdown(singleExport);\n        markdown += `\\n\\n`;\n    }\n    return markdown;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFjLEdBQUcsR0FBRyxDQUFDO0lBRTVELE9BQU9EO0FBQ1Q7QUFFQSxTQUFTRixxQkFBcUJGLGNBQW1CO0lBQy9DLElBQUlJLFdBQVcsQ0FBQyxpQ0FBaUMsQ0FBQztJQUNsREEsWUFBWSxDQUFDLGNBQWMsRUFBRSxJQUFJbEIsS0FBS2MsZUFBZWYsVUFBVSxFQUFFb0IsY0FBYyxHQUFHLEVBQUUsQ0FBQztJQUNyRkQsWUFBWSxDQUFDLG9CQUFvQixFQUFFSixlQUFlckMsYUFBYSxDQUFDLElBQUksQ0FBQztJQUNyRXlDLFlBQVksQ0FBQyxPQUFPLENBQUM7SUFFckIsS0FBSyxNQUFNUyxlQUFlYixlQUFlcEQsUUFBUSxDQUFFO1FBQ2pELE1BQU1rRSxlQUFlO1lBQ25CdkQsU0FBU3NELFlBQVl0RCxPQUFPO1lBQzVCQyxVQUFVcUQsWUFBWXJELFFBQVE7WUFDOUJ5QixZQUFZZSxlQUFlZixVQUFVO1lBQ3JDYixRQUFRNEIsZUFBZTVCLE1BQU07UUFDL0I7UUFFQWdDLFlBQVliLGlCQUFpQnVCO1FBQzdCVixZQUFZLENBQUMsSUFBSSxDQUFDO0lBQ3BCO0lBRUEsT0FBT0E7QUFDVCIsInNvdXJjZXMiOlsiQzpcXHByb2plY3RzXFxhcnJha2lzXFxsaWJcXGFwaVxccm91dGVyc1xcc2Vzc2lvbnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTZXNzaW9ucyB0UlBDIFJvdXRlclxuICogQVBJIGVuZHBvaW50cyBmb3Igc2Vzc2lvbiBtYW5hZ2VtZW50IGFuZCByZXRyaWV2YWxcbiAqL1xuXG5pbXBvcnQgeyB6IH0gZnJvbSAnem9kJ1xuaW1wb3J0IHsgcm91dGVyLCBwdWJsaWNQcm9jZWR1cmUgfSBmcm9tICcuLi90cnBjJ1xuaW1wb3J0IHtcbiAgZ2V0U2Vzc2lvbnMsXG4gIGdldFNlc3Npb25CeUlkLFxuICBnZXRTZXNzaW9uTWVzc2FnZXMsXG59IGZyb20gJ0AvbGliL2RiL3F1ZXJpZXMnXG5pbXBvcnQgeyBUUlBDRXJyb3IgfSBmcm9tICdAdHJwYy9zZXJ2ZXInXG5cbi8vIElucHV0IHNjaGVtYXNcbmNvbnN0IHNlc3Npb25GaWx0ZXJzU2NoZW1hID0gei5vYmplY3Qoe1xuICBzdGFydERhdGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgZW5kRGF0ZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBzdGF0dXM6IHouZW51bShbJ2FjdGl2ZScsICdjb21wbGV0ZWQnLCAnZXJyb3InXSkub3B0aW9uYWwoKSxcbiAgbWluQ29zdDogei5udW1iZXIoKS5vcHRpb25hbCgpLFxuICBtYXhDb3N0OiB6Lm51bWJlcigpLm9wdGlvbmFsKCksXG4gIHRvb2xzVXNlZDogei5hcnJheSh6LnN0cmluZygpKS5vcHRpb25hbCgpLFxufSlcblxuY29uc3QgcGFnaW5hdGlvblNjaGVtYSA9IHoub2JqZWN0KHtcbiAgbGltaXQ6IHoubnVtYmVyKCkubWluKDEpLm1heCgxMDApLmRlZmF1bHQoMjApLFxuICBjdXJzb3I6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbn0pXG5cbmV4cG9ydCBjb25zdCBzZXNzaW9uc1JvdXRlciA9IHJvdXRlcih7XG4gIC8qKlxuICAgKiBHZXQgcGFnaW5hdGVkIGxpc3Qgb2Ygc2Vzc2lvbnMgd2l0aCBvcHRpb25hbCBmaWx0ZXJzXG4gICAqL1xuICBsaXN0OiBwdWJsaWNQcm9jZWR1cmVcbiAgICAuaW5wdXQoXG4gICAgICB6Lm9iamVjdCh7XG4gICAgICAgIGZpbHRlcnM6IHNlc3Npb25GaWx0ZXJzU2NoZW1hLm9wdGlvbmFsKCksXG4gICAgICAgIHBhZ2luYXRpb246IHBhZ2luYXRpb25TY2hlbWEub3B0aW9uYWwoKSxcbiAgICAgIH0pXG4gICAgKVxuICAgIC5xdWVyeShhc3luYyAoeyBpbnB1dCB9KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7IGZpbHRlcnMsIHBhZ2luYXRpb24gfSA9IGlucHV0XG4gICAgICAgIGNvbnN0IHNlc3Npb25zID0gYXdhaXQgZ2V0U2Vzc2lvbnMoe1xuICAgICAgICAgIGZpbHRlcnMsXG4gICAgICAgICAgbGltaXQ6IHBhZ2luYXRpb24/LmxpbWl0IHx8IDIwLFxuICAgICAgICAgIGN1cnNvcjogcGFnaW5hdGlvbj8uY3Vyc29yLFxuICAgICAgICB9KVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2Vzc2lvbnMsXG4gICAgICAgICAgbmV4dEN1cnNvcjpcbiAgICAgICAgICAgIHNlc3Npb25zLmxlbmd0aCA9PT0gKHBhZ2luYXRpb24/LmxpbWl0IHx8IDIwKVxuICAgICAgICAgICAgICA/IHNlc3Npb25zW3Nlc3Npb25zLmxlbmd0aCAtIDFdLmlkXG4gICAgICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IFRSUENFcnJvcih7XG4gICAgICAgICAgY29kZTogJ0lOVEVSTkFMX1NFUlZFUl9FUlJPUicsXG4gICAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBmZXRjaCBzZXNzaW9ucycsXG4gICAgICAgICAgY2F1c2U6IGVycm9yLFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pLFxuXG4gIC8qKlxuICAgKiBHZXQgc2Vzc2lvbiBieSBJRCB3aXRoIGZ1bGwgZGV0YWlsc1xuICAgKi9cbiAgYnlJZDogcHVibGljUHJvY2VkdXJlXG4gICAgLmlucHV0KHouc3RyaW5nKCkudXVpZCgpKVxuICAgIC5xdWVyeShhc3luYyAoeyBpbnB1dDogc2Vzc2lvbklkIH0pID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBnZXRTZXNzaW9uQnlJZChzZXNzaW9uSWQpXG5cbiAgICAgICAgaWYgKCFzZXNzaW9uKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFRSUENFcnJvcih7XG4gICAgICAgICAgICBjb2RlOiAnTk9UX0ZPVU5EJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdTZXNzaW9uIG5vdCBmb3VuZCcsXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZXNzaW9uXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBUUlBDRXJyb3IpIHtcbiAgICAgICAgICB0aHJvdyBlcnJvclxuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IFRSUENFcnJvcih7XG4gICAgICAgICAgY29kZTogJ0lOVEVSTkFMX1NFUlZFUl9FUlJPUicsXG4gICAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBmZXRjaCBzZXNzaW9uJyxcbiAgICAgICAgICBjYXVzZTogZXJyb3IsXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSksXG5cbiAgLyoqXG4gICAqIEdldCBtZXNzYWdlcyBmb3IgYSBzZXNzaW9uXG4gICAqL1xuICBtZXNzYWdlczogcHVibGljUHJvY2VkdXJlXG4gICAgLmlucHV0KFxuICAgICAgei5vYmplY3Qoe1xuICAgICAgICBzZXNzaW9uSWQ6IHouc3RyaW5nKCkudXVpZCgpLFxuICAgICAgICBsaW1pdDogei5udW1iZXIoKS5taW4oMSkubWF4KDEwMCkuZGVmYXVsdCg1MCksXG4gICAgICAgIG9mZnNldDogei5udW1iZXIoKS5taW4oMCkuZGVmYXVsdCgwKSxcbiAgICAgIH0pXG4gICAgKVxuICAgIC5xdWVyeShhc3luYyAoeyBpbnB1dCB9KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7IHNlc3Npb25JZCwgbGltaXQsIG9mZnNldCB9ID0gaW5wdXRcbiAgICAgICAgY29uc3QgbWVzc2FnZXMgPSBhd2FpdCBnZXRTZXNzaW9uTWVzc2FnZXMoc2Vzc2lvbklkLCB7IGxpbWl0LCBvZmZzZXQgfSlcblxuICAgICAgICByZXR1cm4gbWVzc2FnZXNcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBUUlBDRXJyb3Ioe1xuICAgICAgICAgIGNvZGU6ICdJTlRFUk5BTF9TRVJWRVJfRVJST1InLFxuICAgICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gZmV0Y2ggc2Vzc2lvbiBtZXNzYWdlcycsXG4gICAgICAgICAgY2F1c2U6IGVycm9yLFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pLFxuXG4gIC8qKlxuICAgKiBHZXQgc2Vzc2lvbiBzdGF0aXN0aWNzXG4gICAqL1xuICBzdGF0czogcHVibGljUHJvY2VkdXJlLnF1ZXJ5KGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gVE9ETzogSW1wbGVtZW50IHNlc3Npb24gc3RhdGlzdGljc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG90YWxTZXNzaW9uczogMCxcbiAgICAgICAgc2Vzc2lvbnNUaGlzV2VlazogMCxcbiAgICAgICAgdG90YWxNZXNzYWdlczogMCxcbiAgICAgICAgdG90YWxDb3N0OiAwLFxuICAgICAgICBhdmVyYWdlU2Vzc2lvbkxlbmd0aDogMCxcbiAgICAgICAgdG9wVG9vbHM6IFtdLFxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVFJQQ0Vycm9yKHtcbiAgICAgICAgY29kZTogJ0lOVEVSTkFMX1NFUlZFUl9FUlJPUicsXG4gICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gZmV0Y2ggc2Vzc2lvbiBzdGF0aXN0aWNzJyxcbiAgICAgICAgY2F1c2U6IGVycm9yLFxuICAgICAgfSlcbiAgICB9XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBEZWxldGUgc2Vzc2lvblxuICAgKi9cbiAgZGVsZXRlOiBwdWJsaWNQcm9jZWR1cmVcbiAgICAuaW5wdXQoei5zdHJpbmcoKS51dWlkKCkpXG4gICAgLm11dGF0aW9uKGFzeW5jICh7IGlucHV0OiBzZXNzaW9uSWQgfSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVE9ETzogSW1wbGVtZW50IHNlc3Npb24gZGVsZXRpb25cbiAgICAgICAgdGhyb3cgbmV3IFRSUENFcnJvcih7XG4gICAgICAgICAgY29kZTogJ05PVF9JTVBMRU1FTlRFRCcsXG4gICAgICAgICAgbWVzc2FnZTogJ1Nlc3Npb24gZGVsZXRpb24gbm90IGltcGxlbWVudGVkIHlldCcsXG4gICAgICAgIH0pXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBUUlBDRXJyb3IpIHtcbiAgICAgICAgICB0aHJvdyBlcnJvclxuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IFRSUENFcnJvcih7XG4gICAgICAgICAgY29kZTogJ0lOVEVSTkFMX1NFUlZFUl9FUlJPUicsXG4gICAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBkZWxldGUgc2Vzc2lvbicsXG4gICAgICAgICAgY2F1c2U6IGVycm9yLFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pLFxuXG4gIC8qKlxuICAgKiBFeHBvcnQgc2Vzc2lvblxuICAgKi9cbiAgZXhwb3J0OiBwdWJsaWNQcm9jZWR1cmVcbiAgICAuaW5wdXQoXG4gICAgICB6Lm9iamVjdCh7XG4gICAgICAgIHNlc3Npb25JZDogei5zdHJpbmcoKS51dWlkKCksXG4gICAgICAgIGZvcm1hdDogei5lbnVtKFsnanNvbicsICdtYXJrZG93bicsICdwZGYnXSksXG4gICAgICAgIGluY2x1ZGVNZXRhZGF0YTogei5ib29sZWFuKCkuZGVmYXVsdCh0cnVlKSxcbiAgICAgIH0pXG4gICAgKVxuICAgIC5tdXRhdGlvbihhc3luYyAoeyBpbnB1dCB9KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7IHNlc3Npb25JZCwgZm9ybWF0LCBpbmNsdWRlTWV0YWRhdGEgfSA9IGlucHV0XG5cbiAgICAgICAgLy8gR2V0IHNlc3Npb24gd2l0aCBtZXNzYWdlc1xuICAgICAgICBjb25zdCBzZXNzaW9uID0gYXdhaXQgZ2V0U2Vzc2lvbkJ5SWQoc2Vzc2lvbklkKVxuICAgICAgICBpZiAoIXNlc3Npb24pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVFJQQ0Vycm9yKHtcbiAgICAgICAgICAgIGNvZGU6ICdOT1RfRk9VTkQnLFxuICAgICAgICAgICAgbWVzc2FnZTogJ1Nlc3Npb24gbm90IGZvdW5kJyxcbiAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbWVzc2FnZXMgPSBhd2FpdCBnZXRTZXNzaW9uTWVzc2FnZXMoc2Vzc2lvbklkLCB7XG4gICAgICAgICAgbGltaXQ6IDEwMDAsXG4gICAgICAgICAgb2Zmc2V0OiAwLFxuICAgICAgICB9KVxuXG4gICAgICAgIGNvbnN0IGV4cG9ydERhdGEgPSB7XG4gICAgICAgICAgc2Vzc2lvbjoge1xuICAgICAgICAgICAgaWQ6IHNlc3Npb24uaWQsXG4gICAgICAgICAgICB0aXRsZTogc2Vzc2lvbi50aXRsZSxcbiAgICAgICAgICAgIGNyZWF0ZWRBdDogc2Vzc2lvbi5jcmVhdGVkQXQsXG4gICAgICAgICAgICBzdGF0dXM6IHNlc3Npb24uc3RhdHVzLFxuICAgICAgICAgICAgLi4uKGluY2x1ZGVNZXRhZGF0YSAmJiB7IG1ldGFkYXRhOiBzZXNzaW9uLm1ldGFkYXRhIH0pLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgbWVzc2FnZXM6IG1lc3NhZ2VzLm1hcCgobXNnKSA9PiAoe1xuICAgICAgICAgICAgaWQ6IG1zZy5pZCxcbiAgICAgICAgICAgIHJvbGU6IG1zZy5yb2xlLFxuICAgICAgICAgICAgY29udGVudDogbXNnLmNvbnRlbnQsXG4gICAgICAgICAgICBjcmVhdGVkQXQ6IG1zZy5jcmVhdGVkQXQsXG4gICAgICAgICAgICAuLi4oaW5jbHVkZU1ldGFkYXRhICYmIHtcbiAgICAgICAgICAgICAgdG9rZW5zOiBtc2cudG9rZW5zLFxuICAgICAgICAgICAgICBjb3N0VXNkOiBtc2cuY29zdFVzZCxcbiAgICAgICAgICAgICAgbWV0YWRhdGE6IG1zZy5tZXRhZGF0YSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pKSxcbiAgICAgICAgICBleHBvcnRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgICAgIGZvcm1hdCxcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZvcm1hdCBkYXRhIGJhc2VkIG9uIHJlcXVlc3RlZCBmb3JtYXRcbiAgICAgICAgbGV0IGNvbnRlbnQ6IHN0cmluZ1xuICAgICAgICBsZXQgbWltZVR5cGU6IHN0cmluZ1xuICAgICAgICBsZXQgZmlsZW5hbWU6IHN0cmluZ1xuXG4gICAgICAgIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgICAgICAgY2FzZSAnanNvbic6XG4gICAgICAgICAgICBjb250ZW50ID0gSlNPTi5zdHJpbmdpZnkoZXhwb3J0RGF0YSwgbnVsbCwgMilcbiAgICAgICAgICAgIG1pbWVUeXBlID0gJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICBmaWxlbmFtZSA9IGBzZXNzaW9uLSR7c2Vzc2lvbklkfS5qc29uYFxuICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgIGNhc2UgJ21hcmtkb3duJzpcbiAgICAgICAgICAgIGNvbnRlbnQgPSBmb3JtYXRBc01hcmtkb3duKGV4cG9ydERhdGEpXG4gICAgICAgICAgICBtaW1lVHlwZSA9ICd0ZXh0L21hcmtkb3duJ1xuICAgICAgICAgICAgZmlsZW5hbWUgPSBgc2Vzc2lvbi0ke3Nlc3Npb25JZH0ubWRgXG4gICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgY2FzZSAncGRmJzpcbiAgICAgICAgICAgIC8vIEZvciBNVlAsIHdlJ2xsIGV4cG9ydCBhcyBtYXJrZG93biBhbmQgbGV0IGNsaWVudCBoYW5kbGUgUERGIGNvbnZlcnNpb25cbiAgICAgICAgICAgIGNvbnRlbnQgPSBmb3JtYXRBc01hcmtkb3duKGV4cG9ydERhdGEpXG4gICAgICAgICAgICBtaW1lVHlwZSA9ICd0ZXh0L21hcmtkb3duJ1xuICAgICAgICAgICAgZmlsZW5hbWUgPSBgc2Vzc2lvbi0ke3Nlc3Npb25JZH0ubWRgXG4gICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBUUlBDRXJyb3Ioe1xuICAgICAgICAgICAgICBjb2RlOiAnQkFEX1JFUVVFU1QnLFxuICAgICAgICAgICAgICBtZXNzYWdlOiAnVW5zdXBwb3J0ZWQgZXhwb3J0IGZvcm1hdCcsXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgIG1pbWVUeXBlLFxuICAgICAgICAgIGZpbGVuYW1lLFxuICAgICAgICAgIHNpemU6IEJ1ZmZlci5ieXRlTGVuZ3RoKGNvbnRlbnQsICd1dGY4JyksXG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIFRSUENFcnJvcikge1xuICAgICAgICAgIHRocm93IGVycm9yXG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgVFJQQ0Vycm9yKHtcbiAgICAgICAgICBjb2RlOiAnSU5URVJOQUxfU0VSVkVSX0VSUk9SJyxcbiAgICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIGV4cG9ydCBzZXNzaW9uJyxcbiAgICAgICAgICBjYXVzZTogZXJyb3IsXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSksXG5cbiAgLyoqXG4gICAqIEJ1bGsgZXhwb3J0IHNlc3Npb25zXG4gICAqL1xuICBidWxrRXhwb3J0OiBwdWJsaWNQcm9jZWR1cmVcbiAgICAuaW5wdXQoXG4gICAgICB6Lm9iamVjdCh7XG4gICAgICAgIHNlc3Npb25JZHM6IHouYXJyYXkoei5zdHJpbmcoKS51dWlkKCkpLFxuICAgICAgICBmb3JtYXQ6IHouZW51bShbJ2pzb24nLCAnbWFya2Rvd24nLCAncGRmJ10pLFxuICAgICAgICBpbmNsdWRlTWV0YWRhdGE6IHouYm9vbGVhbigpLmRlZmF1bHQodHJ1ZSksXG4gICAgICB9KVxuICAgIClcbiAgICAubXV0YXRpb24oYXN5bmMgKHsgaW5wdXQgfSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyBzZXNzaW9uSWRzLCBmb3JtYXQsIGluY2x1ZGVNZXRhZGF0YSB9ID0gaW5wdXRcblxuICAgICAgICBjb25zdCBleHBvcnRSZXN1bHRzID0gW11cblxuICAgICAgICBmb3IgKGNvbnN0IHNlc3Npb25JZCBvZiBzZXNzaW9uSWRzKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBnZXRTZXNzaW9uQnlJZChzZXNzaW9uSWQpXG4gICAgICAgICAgICBpZiAoIXNlc3Npb24pIGNvbnRpbnVlXG5cbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gYXdhaXQgZ2V0U2Vzc2lvbk1lc3NhZ2VzKHNlc3Npb25JZCwge1xuICAgICAgICAgICAgICBsaW1pdDogMTAwMCxcbiAgICAgICAgICAgICAgb2Zmc2V0OiAwLFxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgZXhwb3J0UmVzdWx0cy5wdXNoKHtcbiAgICAgICAgICAgICAgc2Vzc2lvbjoge1xuICAgICAgICAgICAgICAgIGlkOiBzZXNzaW9uLmlkLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBzZXNzaW9uLnRpdGxlLFxuICAgICAgICAgICAgICAgIGNyZWF0ZWRBdDogc2Vzc2lvbi5jcmVhdGVkQXQsXG4gICAgICAgICAgICAgICAgc3RhdHVzOiBzZXNzaW9uLnN0YXR1cyxcbiAgICAgICAgICAgICAgICAuLi4oaW5jbHVkZU1ldGFkYXRhICYmIHsgbWV0YWRhdGE6IHNlc3Npb24ubWV0YWRhdGEgfSksXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG1lc3NhZ2VzOiBtZXNzYWdlcy5tYXAoKG1zZykgPT4gKHtcbiAgICAgICAgICAgICAgICBpZDogbXNnLmlkLFxuICAgICAgICAgICAgICAgIHJvbGU6IG1zZy5yb2xlLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IG1zZy5jb250ZW50LFxuICAgICAgICAgICAgICAgIGNyZWF0ZWRBdDogbXNnLmNyZWF0ZWRBdCxcbiAgICAgICAgICAgICAgICAuLi4oaW5jbHVkZU1ldGFkYXRhICYmIHtcbiAgICAgICAgICAgICAgICAgIHRva2VuczogbXNnLnRva2VucyxcbiAgICAgICAgICAgICAgICAgIGNvc3RVc2Q6IG1zZy5jb3N0VXNkLFxuICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IG1zZy5tZXRhZGF0YSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGV4cG9ydCBzZXNzaW9uICR7c2Vzc2lvbklkfTpgLCBlcnJvcilcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBidWxrRXhwb3J0RGF0YSA9IHtcbiAgICAgICAgICBzZXNzaW9uczogZXhwb3J0UmVzdWx0cyxcbiAgICAgICAgICBleHBvcnRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgICAgIGZvcm1hdCxcbiAgICAgICAgICB0b3RhbFNlc3Npb25zOiBleHBvcnRSZXN1bHRzLmxlbmd0aCxcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjb250ZW50OiBzdHJpbmdcbiAgICAgICAgbGV0IG1pbWVUeXBlOiBzdHJpbmdcbiAgICAgICAgbGV0IGZpbGVuYW1lOiBzdHJpbmdcblxuICAgICAgICBzd2l0Y2ggKGZvcm1hdCkge1xuICAgICAgICAgIGNhc2UgJ2pzb24nOlxuICAgICAgICAgICAgY29udGVudCA9IEpTT04uc3RyaW5naWZ5KGJ1bGtFeHBvcnREYXRhLCBudWxsLCAyKVxuICAgICAgICAgICAgbWltZVR5cGUgPSAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgIGZpbGVuYW1lID0gYGFycmFraXMtY29udmVyc2F0aW9ucy0ke0RhdGUubm93KCl9Lmpzb25gXG4gICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgY2FzZSAnbWFya2Rvd24nOlxuICAgICAgICAgICAgY29udGVudCA9IGZvcm1hdEJ1bGtBc01hcmtkb3duKGJ1bGtFeHBvcnREYXRhKVxuICAgICAgICAgICAgbWltZVR5cGUgPSAndGV4dC9tYXJrZG93bidcbiAgICAgICAgICAgIGZpbGVuYW1lID0gYGFycmFraXMtY29udmVyc2F0aW9ucy0ke0RhdGUubm93KCl9Lm1kYFxuICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgIGNhc2UgJ3BkZic6XG4gICAgICAgICAgICBjb250ZW50ID0gZm9ybWF0QnVsa0FzTWFya2Rvd24oYnVsa0V4cG9ydERhdGEpXG4gICAgICAgICAgICBtaW1lVHlwZSA9ICd0ZXh0L21hcmtkb3duJ1xuICAgICAgICAgICAgZmlsZW5hbWUgPSBgYXJyYWtpcy1jb252ZXJzYXRpb25zLSR7RGF0ZS5ub3coKX0ubWRgXG4gICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBUUlBDRXJyb3Ioe1xuICAgICAgICAgICAgICBjb2RlOiAnQkFEX1JFUVVFU1QnLFxuICAgICAgICAgICAgICBtZXNzYWdlOiAnVW5zdXBwb3J0ZWQgZXhwb3J0IGZvcm1hdCcsXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgIG1pbWVUeXBlLFxuICAgICAgICAgIGZpbGVuYW1lLFxuICAgICAgICAgIHNpemU6IEJ1ZmZlci5ieXRlTGVuZ3RoKGNvbnRlbnQsICd1dGY4JyksXG4gICAgICAgICAgZXhwb3J0ZWRTZXNzaW9uc0NvdW50OiBleHBvcnRSZXN1bHRzLmxlbmd0aCxcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgVFJQQ0Vycm9yKSB7XG4gICAgICAgICAgdGhyb3cgZXJyb3JcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBUUlBDRXJyb3Ioe1xuICAgICAgICAgIGNvZGU6ICdJTlRFUk5BTF9TRVJWRVJfRVJST1InLFxuICAgICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gYnVsayBleHBvcnQgc2Vzc2lvbnMnLFxuICAgICAgICAgIGNhdXNlOiBlcnJvcixcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KSxcbn0pXG5cbi8vIEhlbHBlciBmdW5jdGlvbnMgZm9yIGV4cG9ydCBmb3JtYXR0aW5nXG5mdW5jdGlvbiBmb3JtYXRBc01hcmtkb3duKGV4cG9ydERhdGE6IGFueSk6IHN0cmluZyB7XG4gIGNvbnN0IHsgc2Vzc2lvbiwgbWVzc2FnZXMgfSA9IGV4cG9ydERhdGFcblxuICBsZXQgbWFya2Rvd24gPSBgIyAke3Nlc3Npb24udGl0bGUgfHwgJ1VudGl0bGVkIENvbnZlcnNhdGlvbid9XFxuXFxuYFxuICBtYXJrZG93biArPSBgKipTZXNzaW9uIElEOioqICR7c2Vzc2lvbi5pZH1cXG5gXG4gIG1hcmtkb3duICs9IGAqKkNyZWF0ZWQ6KiogJHtuZXcgRGF0ZShzZXNzaW9uLmNyZWF0ZWRBdCkudG9Mb2NhbGVTdHJpbmcoKX1cXG5gXG4gIG1hcmtkb3duICs9IGAqKlN0YXR1czoqKiAke3Nlc3Npb24uc3RhdHVzfVxcblxcbmBcblxuICBpZiAoc2Vzc2lvbi5tZXRhZGF0YT8uc2Vzc2lvbkluZm8/LnByb2plY3RQYXRoKSB7XG4gICAgbWFya2Rvd24gKz0gYCoqUHJvamVjdDoqKiAke3Nlc3Npb24ubWV0YWRhdGEuc2Vzc2lvbkluZm8ucHJvamVjdFBhdGh9XFxuXFxuYFxuICB9XG5cbiAgbWFya2Rvd24gKz0gYC0tLVxcblxcbmBcblxuICBmb3IgKGNvbnN0IG1lc3NhZ2Ugb2YgbWVzc2FnZXMpIHtcbiAgICBjb25zdCByb2xlID0gbWVzc2FnZS5yb2xlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbWVzc2FnZS5yb2xlLnNsaWNlKDEpXG4gICAgbWFya2Rvd24gKz0gYCMjICR7cm9sZX1cXG5cXG5gXG4gICAgbWFya2Rvd24gKz0gYCR7bWVzc2FnZS5jb250ZW50fVxcblxcbmBcblxuICAgIGlmIChtZXNzYWdlLm1ldGFkYXRhICYmIE9iamVjdC5rZXlzKG1lc3NhZ2UubWV0YWRhdGEpLmxlbmd0aCA+IDApIHtcbiAgICAgIG1hcmtkb3duICs9IGAqTWV0YWRhdGE6ICR7SlNPTi5zdHJpbmdpZnkobWVzc2FnZS5tZXRhZGF0YSl9KlxcblxcbmBcbiAgICB9XG5cbiAgICBtYXJrZG93biArPSBgLS0tXFxuXFxuYFxuICB9XG5cbiAgbWFya2Rvd24gKz0gYCpFeHBvcnRlZCBvbiAke25ldyBEYXRlKCkudG9Mb2NhbGVTdHJpbmcoKX0qXFxuYFxuXG4gIHJldHVybiBtYXJrZG93blxufVxuXG5mdW5jdGlvbiBmb3JtYXRCdWxrQXNNYXJrZG93bihidWxrRXhwb3J0RGF0YTogYW55KTogc3RyaW5nIHtcbiAgbGV0IG1hcmtkb3duID0gYCMgQXJyYWtpcyBDb252ZXJzYXRpb24gRXhwb3J0XFxuXFxuYFxuICBtYXJrZG93biArPSBgKipFeHBvcnRlZDoqKiAke25ldyBEYXRlKGJ1bGtFeHBvcnREYXRhLmV4cG9ydGVkQXQpLnRvTG9jYWxlU3RyaW5nKCl9XFxuYFxuICBtYXJrZG93biArPSBgKipUb3RhbCBTZXNzaW9uczoqKiAke2J1bGtFeHBvcnREYXRhLnRvdGFsU2Vzc2lvbnN9XFxuXFxuYFxuICBtYXJrZG93biArPSBgLS0tXFxuXFxuYFxuXG4gIGZvciAoY29uc3Qgc2Vzc2lvbkRhdGEgb2YgYnVsa0V4cG9ydERhdGEuc2Vzc2lvbnMpIHtcbiAgICBjb25zdCBzaW5nbGVFeHBvcnQgPSB7XG4gICAgICBzZXNzaW9uOiBzZXNzaW9uRGF0YS5zZXNzaW9uLFxuICAgICAgbWVzc2FnZXM6IHNlc3Npb25EYXRhLm1lc3NhZ2VzLFxuICAgICAgZXhwb3J0ZWRBdDogYnVsa0V4cG9ydERhdGEuZXhwb3J0ZWRBdCxcbiAgICAgIGZvcm1hdDogYnVsa0V4cG9ydERhdGEuZm9ybWF0LFxuICAgIH1cblxuICAgIG1hcmtkb3duICs9IGZvcm1hdEFzTWFya2Rvd24oc2luZ2xlRXhwb3J0KVxuICAgIG1hcmtkb3duICs9IGBcXG5cXG5gXG4gIH1cblxuICByZXR1cm4gbWFya2Rvd25cbn1cbiJdLCJuYW1lcyI6WyJ6Iiwicm91dGVyIiwicHVibGljUHJvY2VkdXJlIiwiZ2V0U2Vzc2lvbnMiLCJnZXRTZXNzaW9uQnlJZCIsImdldFNlc3Npb25NZXNzYWdlcyIsIlRSUENFcnJvciIsInNlc3Npb25GaWx0ZXJzU2NoZW1hIiwib2JqZWN0Iiwic3RhcnREYXRlIiwic3RyaW5nIiwib3B0aW9uYWwiLCJlbmREYXRlIiwic3RhdHVzIiwiZW51bSIsIm1pbkNvc3QiLCJudW1iZXIiLCJtYXhDb3N0IiwidG9vbHNVc2VkIiwiYXJyYXkiLCJwYWdpbmF0aW9uU2NoZW1hIiwibGltaXQiLCJtaW4iLCJtYXgiLCJkZWZhdWx0IiwiY3Vyc29yIiwic2Vzc2lvbnNSb3V0ZXIiLCJsaXN0IiwiaW5wdXQiLCJmaWx0ZXJzIiwicGFnaW5hdGlvbiIsInF1ZXJ5Iiwic2Vzc2lvbnMiLCJuZXh0Q3Vyc29yIiwibGVuZ3RoIiwiaWQiLCJlcnJvciIsImNvZGUiLCJtZXNzYWdlIiwiY2F1c2UiLCJieUlkIiwidXVpZCIsInNlc3Npb25JZCIsInNlc3Npb24iLCJtZXNzYWdlcyIsIm9mZnNldCIsInN0YXRzIiwidG90YWxTZXNzaW9ucyIsInNlc3Npb25zVGhpc1dlZWsiLCJ0b3RhbE1lc3NhZ2VzIiwidG90YWxDb3N0IiwiYXZlcmFnZVNlc3Npb25MZW5ndGgiLCJ0b3BUb29scyIsImRlbGV0ZSIsIm11dGF0aW9uIiwiZXhwb3J0IiwiZm9ybWF0IiwiaW5jbHVkZU1ldGFkYXRhIiwiYm9vbGVhbiIsImV4cG9ydERhdGEiLCJ0aXRsZSIsImNyZWF0ZWRBdCIsIm1ldGFkYXRhIiwibWFwIiwibXNnIiwicm9sZSIsImNvbnRlbnQiLCJ0b2tlbnMiLCJjb3N0VXNkIiwiZXhwb3J0ZWRBdCIsIkRhdGUiLCJtaW1lVHlwZSIsImZpbGVuYW1lIiwiSlNPTiIsInN0cmluZ2lmeSIsImZvcm1hdEFzTWFya2Rvd24iLCJzaXplIiwiQnVmZmVyIiwiYnl0ZUxlbmd0aCIsImJ1bGtFeHBvcnQiLCJzZXNzaW9uSWRzIiwiZXhwb3J0UmVzdWx0cyIsInB1c2giLCJjb25zb2xlIiwiYnVsa0V4cG9ydERhdGEiLCJub3ciLCJmb3JtYXRCdWxrQXNNYXJrZG93biIsImV4cG9ydGVkU2Vzc2lvbnNDb3VudCIsIm1hcmtkb3duIiwidG9Mb2NhbGVTdHJpbmciLCJzZXNzaW9uSW5mbyIsInByb2plY3RQYXRoIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzbGljZSIsIk9iamVjdCIsImtleXMiLCJzZXNzaW9uRGF0YSIsInNpbmdsZUV4cG9ydCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/api/routers/sessions.ts\n");

/***/ }),

/***/ "(rsc)/./lib/api/routers/templates.ts":
/*!**************************************!*\
  !*** ./lib/api/routers/templates.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   templatesRouter: () => (/* binding */ templatesRouter)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var _trpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../trpc */ \"(rsc)/./lib/api/trpc.ts\");\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db/index.ts\");\n/* harmony import */ var _lib_db_schema__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/db/schema */ \"(rsc)/./lib/db/schema.ts\");\n/* harmony import */ var _trpc_server__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @trpc/server */ \"(rsc)/./node_modules/@trpc/server/dist/tracked-Blz8XOf1.mjs\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! drizzle-orm */ \"(rsc)/./node_modules/drizzle-orm/sql/expressions/conditions.js\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! drizzle-orm */ \"(rsc)/./node_modules/drizzle-orm/sql/expressions/select.js\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! drizzle-orm */ \"(rsc)/./node_modules/drizzle-orm/sql/sql.js\");\n/**\n * Templates tRPC Router\n * API endpoints for conversation template management\n */ \n\n\n\n\n\n// Input schemas\nconst templateCreateSchema = zod__WEBPACK_IMPORTED_MODULE_3__.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_3__.string().min(1).max(200),\n    description: zod__WEBPACK_IMPORTED_MODULE_3__.string().optional(),\n    template: zod__WEBPACK_IMPORTED_MODULE_3__.string().min(1),\n    category: zod__WEBPACK_IMPORTED_MODULE_3__.string().default('general'),\n    isPublic: zod__WEBPACK_IMPORTED_MODULE_3__.boolean().default(false),\n    userId: zod__WEBPACK_IMPORTED_MODULE_3__.number().default(1)\n});\nconst templateUpdateSchema = zod__WEBPACK_IMPORTED_MODULE_3__.object({\n    id: zod__WEBPACK_IMPORTED_MODULE_3__.number(),\n    name: zod__WEBPACK_IMPORTED_MODULE_3__.string().min(1).max(200).optional(),\n    description: zod__WEBPACK_IMPORTED_MODULE_3__.string().optional(),\n    template: zod__WEBPACK_IMPORTED_MODULE_3__.string().min(1).optional(),\n    category: zod__WEBPACK_IMPORTED_MODULE_3__.string().optional(),\n    isPublic: zod__WEBPACK_IMPORTED_MODULE_3__.boolean().optional()\n});\nconst templateFiltersSchema = zod__WEBPACK_IMPORTED_MODULE_3__.object({\n    category: zod__WEBPACK_IMPORTED_MODULE_3__.string().optional(),\n    isPublic: zod__WEBPACK_IMPORTED_MODULE_3__.boolean().optional(),\n    userId: zod__WEBPACK_IMPORTED_MODULE_3__.number().optional(),\n    search: zod__WEBPACK_IMPORTED_MODULE_3__.string().optional()\n});\nconst templatesRouter = (0,_trpc__WEBPACK_IMPORTED_MODULE_0__.router)({\n    /**\n   * Get all templates with optional filters\n   */ list: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(templateFiltersSchema.optional()).query(async ({ input })=>{\n        try {\n            const filters = input || {};\n            // Build where conditions\n            const conditions = [];\n            if (filters.category) {\n                conditions.push((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_4__.eq)(_lib_db_schema__WEBPACK_IMPORTED_MODULE_2__.conversationTemplates.category, filters.category));\n            }\n            if (filters.isPublic !== undefined) {\n                conditions.push((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_4__.eq)(_lib_db_schema__WEBPACK_IMPORTED_MODULE_2__.conversationTemplates.isPublic, filters.isPublic));\n            }\n            if (filters.userId) {\n                conditions.push((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_4__.eq)(_lib_db_schema__WEBPACK_IMPORTED_MODULE_2__.conversationTemplates.userId, filters.userId));\n            }\n            if (filters.search) {\n                conditions.push((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_4__.or)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_4__.like)(_lib_db_schema__WEBPACK_IMPORTED_MODULE_2__.conversationTemplates.name, `%${filters.search}%`), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_4__.like)(_lib_db_schema__WEBPACK_IMPORTED_MODULE_2__.conversationTemplates.description, `%${filters.search}%`), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_4__.like)(_lib_db_schema__WEBPACK_IMPORTED_MODULE_2__.conversationTemplates.template, `%${filters.search}%`)));\n            }\n            // Build final query\n            const baseQuery = _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.select().from(_lib_db_schema__WEBPACK_IMPORTED_MODULE_2__.conversationTemplates);\n            const finalQuery = conditions.length > 0 ? baseQuery.where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_4__.and)(...conditions)) : baseQuery;\n            const templates = await finalQuery.orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.desc)(_lib_db_schema__WEBPACK_IMPORTED_MODULE_2__.conversationTemplates.usageCount), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.desc)(_lib_db_schema__WEBPACK_IMPORTED_MODULE_2__.conversationTemplates.createdAt));\n            return templates;\n        } catch (error) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_6__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to fetch templates',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Get template by ID\n   */ byId: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(zod__WEBPACK_IMPORTED_MODULE_3__.number()).query(async ({ input: id })=>{\n        try {\n            const template = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.select().from(_lib_db_schema__WEBPACK_IMPORTED_MODULE_2__.conversationTemplates).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_4__.eq)(_lib_db_schema__WEBPACK_IMPORTED_MODULE_2__.conversationTemplates.id, id)).limit(1);\n            if (template.length === 0) {\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_6__.TRPCError({\n                    code: 'NOT_FOUND',\n                    message: 'Template not found'\n                });\n            }\n            return template[0];\n        } catch (error) {\n            if (error instanceof _trpc_server__WEBPACK_IMPORTED_MODULE_6__.TRPCError) {\n                throw error;\n            }\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_6__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to fetch template',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Create new template\n   */ create: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(templateCreateSchema).mutation(async ({ input })=>{\n        try {\n            const newTemplate = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.insert(_lib_db_schema__WEBPACK_IMPORTED_MODULE_2__.conversationTemplates).values({\n                ...input,\n                createdAt: new Date(),\n                updatedAt: new Date()\n            }).returning();\n            return newTemplate[0];\n        } catch (error) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_6__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to create template',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Update template\n   */ update: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(templateUpdateSchema).mutation(async ({ input })=>{\n        try {\n            const { id, ...updateData } = input;\n            const updatedTemplate = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.update(_lib_db_schema__WEBPACK_IMPORTED_MODULE_2__.conversationTemplates).set({\n                ...updateData,\n                updatedAt: new Date()\n            }).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_4__.eq)(_lib_db_schema__WEBPACK_IMPORTED_MODULE_2__.conversationTemplates.id, id)).returning();\n            if (updatedTemplate.length === 0) {\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_6__.TRPCError({\n                    code: 'NOT_FOUND',\n                    message: 'Template not found'\n                });\n            }\n            return updatedTemplate[0];\n        } catch (error) {\n            if (error instanceof _trpc_server__WEBPACK_IMPORTED_MODULE_6__.TRPCError) {\n                throw error;\n            }\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_6__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to update template',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Delete template\n   */ delete: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(zod__WEBPACK_IMPORTED_MODULE_3__.number()).mutation(async ({ input: id })=>{\n        try {\n            const deletedTemplate = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.delete(_lib_db_schema__WEBPACK_IMPORTED_MODULE_2__.conversationTemplates).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_4__.eq)(_lib_db_schema__WEBPACK_IMPORTED_MODULE_2__.conversationTemplates.id, id)).returning();\n            if (deletedTemplate.length === 0) {\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_6__.TRPCError({\n                    code: 'NOT_FOUND',\n                    message: 'Template not found'\n                });\n            }\n            return {\n                success: true\n            };\n        } catch (error) {\n            if (error instanceof _trpc_server__WEBPACK_IMPORTED_MODULE_6__.TRPCError) {\n                throw error;\n            }\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_6__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to delete template',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Use template (increment usage count and return processed template)\n   */ use: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(zod__WEBPACK_IMPORTED_MODULE_3__.object({\n        id: zod__WEBPACK_IMPORTED_MODULE_3__.number(),\n        variables: zod__WEBPACK_IMPORTED_MODULE_3__.record(zod__WEBPACK_IMPORTED_MODULE_3__.string()).optional()\n    })).mutation(async ({ input })=>{\n        try {\n            const { id, variables = {} } = input;\n            // Get template\n            const template = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.select().from(_lib_db_schema__WEBPACK_IMPORTED_MODULE_2__.conversationTemplates).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_4__.eq)(_lib_db_schema__WEBPACK_IMPORTED_MODULE_2__.conversationTemplates.id, id)).limit(1);\n            if (template.length === 0) {\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_6__.TRPCError({\n                    code: 'NOT_FOUND',\n                    message: 'Template not found'\n                });\n            }\n            const foundTemplate = template[0];\n            // Increment usage count\n            await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.update(_lib_db_schema__WEBPACK_IMPORTED_MODULE_2__.conversationTemplates).set({\n                usageCount: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_7__.sql)`${_lib_db_schema__WEBPACK_IMPORTED_MODULE_2__.conversationTemplates.usageCount} + 1`,\n                updatedAt: new Date()\n            }).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_4__.eq)(_lib_db_schema__WEBPACK_IMPORTED_MODULE_2__.conversationTemplates.id, id));\n            // Process template with variables\n            let processedTemplate = foundTemplate.template;\n            // Replace variables in template (e.g., {{variable}} with actual values)\n            for (const [key, value] of Object.entries(variables)){\n                const placeholder = `{{${key}}}`;\n                processedTemplate = processedTemplate.replace(new RegExp(placeholder, 'g'), value);\n            }\n            return {\n                ...foundTemplate,\n                processedTemplate,\n                usageCount: (foundTemplate.usageCount || 0) + 1\n            };\n        } catch (error) {\n            if (error instanceof _trpc_server__WEBPACK_IMPORTED_MODULE_6__.TRPCError) {\n                throw error;\n            }\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_6__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to use template',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Get template categories\n   */ categories: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.query(async ()=>{\n        try {\n            const categories = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                category: _lib_db_schema__WEBPACK_IMPORTED_MODULE_2__.conversationTemplates.category,\n                count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_7__.sql)`count(*)`\n            }).from(_lib_db_schema__WEBPACK_IMPORTED_MODULE_2__.conversationTemplates).groupBy(_lib_db_schema__WEBPACK_IMPORTED_MODULE_2__.conversationTemplates.category).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.desc)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_7__.sql)`count(*)`));\n            return categories;\n        } catch (error) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_6__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to fetch categories',\n                cause: error\n            });\n        }\n    }),\n    /**\n   * Get popular templates (by usage count)\n   */ popular: _trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(zod__WEBPACK_IMPORTED_MODULE_3__.object({\n        limit: zod__WEBPACK_IMPORTED_MODULE_3__.number().default(10)\n    })).query(async ({ input })=>{\n        try {\n            const popularTemplates = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.db.select().from(_lib_db_schema__WEBPACK_IMPORTED_MODULE_2__.conversationTemplates).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_4__.eq)(_lib_db_schema__WEBPACK_IMPORTED_MODULE_2__.conversationTemplates.isPublic, true)).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.desc)(_lib_db_schema__WEBPACK_IMPORTED_MODULE_2__.conversationTemplates.usageCount)).limit(input.limit);\n            return popularTemplates;\n        } catch (error) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_6__.TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: 'Failed to fetch popular templates',\n                cause: error\n            });\n        }\n    })\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/api/routers/templates.ts\n");

/***/ }),

/***/ "(rsc)/./lib/api/trpc.ts":
/*!*************************!*\
  !*** ./lib/api/trpc.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTRPCContext: () => (/* binding */ createTRPCContext),\n/* harmony export */   loggerMiddleware: () => (/* binding */ loggerMiddleware),\n/* harmony export */   protectedProcedure: () => (/* binding */ protectedProcedure),\n/* harmony export */   publicProcedure: () => (/* binding */ publicProcedure),\n/* harmony export */   router: () => (/* binding */ router)\n/* harmony export */ });\n/* harmony import */ var _trpc_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @trpc/server */ \"(rsc)/./node_modules/@trpc/server/dist/initTRPC-CB9uBez5.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/ZodError.js\");\n/* harmony import */ var superjson__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! superjson */ \"(rsc)/./node_modules/superjson/dist/index.js\");\n/**\n * tRPC Setup and Configuration\n * Base tRPC configuration with context and middleware\n */ \n\n\n/**\n * Create tRPC context\n * This is where you can add authentication, database connections, etc.\n */ const createTRPCContext = (opts)=>{\n    return {\n        // Add your context here\n        // For now, we'll keep it simple\n        user: null\n    };\n};\n/**\n * Initialize tRPC\n */ const t = _trpc_server__WEBPACK_IMPORTED_MODULE_1__.initTRPC.context().create({\n    transformer: superjson__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n    errorFormatter ({ shape, error }) {\n        return {\n            ...shape,\n            data: {\n                ...shape.data,\n                zodError: error.cause instanceof zod__WEBPACK_IMPORTED_MODULE_2__.ZodError ? error.cause.flatten() : null\n            }\n        };\n    }\n});\n/**\n * Public procedure\n * Available to all users\n */ const publicProcedure = t.procedure;\n/**\n * Protected procedure\n * Requires authentication (TODO: implement auth middleware)\n */ const protectedProcedure = t.procedure.use({\n    \"use[protectedProcedure]\": ({ ctx, next })=>{\n        // For now, we'll skip authentication\n        // In production, you'd check for valid session/token here\n        return next({\n            ctx: {\n                ...ctx\n            }\n        });\n    }\n}[\"use[protectedProcedure]\"]);\n/**\n * Create router\n */ const router = t.router;\n/**\n * Middleware for logging\n */ const loggerMiddleware = t.middleware(async ({ path, type, next })=>{\n    const start = Date.now();\n    const result = await next();\n    const duration = Date.now() - start;\n    if (true) {\n        console.log(`tRPC ${type} ${path} - ${duration}ms`);\n    }\n    return result;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvYXBpL3RycGMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7O0NBR0MsR0FFaUQ7QUFFcEI7QUFDRztBQUVqQzs7O0NBR0MsR0FDTSxNQUFNRyxvQkFBb0IsQ0FBQ0M7SUFDaEMsT0FBTztRQUNMLHdCQUF3QjtRQUN4QixnQ0FBZ0M7UUFDaENDLE1BQU07SUFDUjtBQUNGLEVBQUM7QUFJRDs7Q0FFQyxHQUNELE1BQU1DLElBQUlOLGtEQUFRQSxDQUFDTyxPQUFPLEdBQVlDLE1BQU0sQ0FBQztJQUMzQ0MsYUFBYVAsaURBQVNBO0lBQ3RCUSxnQkFBZSxFQUFFQyxLQUFLLEVBQUVDLEtBQUssRUFBRTtRQUM3QixPQUFPO1lBQ0wsR0FBR0QsS0FBSztZQUNSRSxNQUFNO2dCQUNKLEdBQUdGLE1BQU1FLElBQUk7Z0JBQ2JDLFVBQ0VGLE1BQU1HLEtBQUssWUFBWWQseUNBQVFBLEdBQUdXLE1BQU1HLEtBQUssQ0FBQ0MsT0FBTyxLQUFLO1lBQzlEO1FBQ0Y7SUFDRjtBQUNGO0FBRUE7OztDQUdDLEdBQ00sTUFBTUMsa0JBQWtCWCxFQUFFWSxTQUFTO0FBRTFDOzs7Q0FHQyxHQUNNLE1BQU1DLHFCQUFxQmIsRUFBRVksU0FBUyxDQUFDRSxHQUFHOytCQUFDLENBQUMsRUFBRUMsR0FBRyxFQUFFQyxJQUFJLEVBQUU7UUFDOUQscUNBQXFDO1FBQ3JDLDBEQUEwRDtRQUMxRCxPQUFPQSxLQUFLO1lBQ1ZELEtBQUs7Z0JBQ0gsR0FBR0EsR0FBRztZQUVSO1FBQ0Y7SUFDRjs4QkFBRTtBQUVGOztDQUVDLEdBQ00sTUFBTUUsU0FBU2pCLEVBQUVpQixNQUFNO0FBRTlCOztDQUVDLEdBQ00sTUFBTUMsbUJBQW1CbEIsRUFBRW1CLFVBQVUsQ0FBQyxPQUFPLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFTCxJQUFJLEVBQUU7SUFDdEUsTUFBTU0sUUFBUUMsS0FBS0MsR0FBRztJQUN0QixNQUFNQyxTQUFTLE1BQU1UO0lBQ3JCLE1BQU1VLFdBQVdILEtBQUtDLEdBQUcsS0FBS0Y7SUFFOUIsSUFBSUssSUFBc0MsRUFBRTtRQUMxQ0MsUUFBUUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFUixLQUFLLENBQUMsRUFBRUQsS0FBSyxHQUFHLEVBQUVNLFNBQVMsRUFBRSxDQUFDO0lBQ3BEO0lBRUEsT0FBT0Q7QUFDVCxHQUFFIiwic291cmNlcyI6WyJDOlxccHJvamVjdHNcXGFycmFraXNcXGxpYlxcYXBpXFx0cnBjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogdFJQQyBTZXR1cCBhbmQgQ29uZmlndXJhdGlvblxuICogQmFzZSB0UlBDIGNvbmZpZ3VyYXRpb24gd2l0aCBjb250ZXh0IGFuZCBtaWRkbGV3YXJlXG4gKi9cblxuaW1wb3J0IHsgaW5pdFRSUEMsIFRSUENFcnJvciB9IGZyb20gJ0B0cnBjL3NlcnZlcidcbmltcG9ydCB0eXBlIHsgRmV0Y2hDcmVhdGVDb250ZXh0Rm5PcHRpb25zIH0gZnJvbSAnQHRycGMvc2VydmVyL2FkYXB0ZXJzL2ZldGNoJ1xuaW1wb3J0IHsgWm9kRXJyb3IgfSBmcm9tICd6b2QnXG5pbXBvcnQgc3VwZXJqc29uIGZyb20gJ3N1cGVyanNvbidcblxuLyoqXG4gKiBDcmVhdGUgdFJQQyBjb250ZXh0XG4gKiBUaGlzIGlzIHdoZXJlIHlvdSBjYW4gYWRkIGF1dGhlbnRpY2F0aW9uLCBkYXRhYmFzZSBjb25uZWN0aW9ucywgZXRjLlxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlVFJQQ0NvbnRleHQgPSAob3B0czogRmV0Y2hDcmVhdGVDb250ZXh0Rm5PcHRpb25zKSA9PiB7XG4gIHJldHVybiB7XG4gICAgLy8gQWRkIHlvdXIgY29udGV4dCBoZXJlXG4gICAgLy8gRm9yIG5vdywgd2UnbGwga2VlcCBpdCBzaW1wbGVcbiAgICB1c2VyOiBudWxsLCAvLyBUT0RPOiBBZGQgYXV0aGVudGljYXRpb25cbiAgfVxufVxuXG50eXBlIENvbnRleHQgPSBBd2FpdGVkPFJldHVyblR5cGU8dHlwZW9mIGNyZWF0ZVRSUENDb250ZXh0Pj5cblxuLyoqXG4gKiBJbml0aWFsaXplIHRSUENcbiAqL1xuY29uc3QgdCA9IGluaXRUUlBDLmNvbnRleHQ8Q29udGV4dD4oKS5jcmVhdGUoe1xuICB0cmFuc2Zvcm1lcjogc3VwZXJqc29uLFxuICBlcnJvckZvcm1hdHRlcih7IHNoYXBlLCBlcnJvciB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnNoYXBlLFxuICAgICAgZGF0YToge1xuICAgICAgICAuLi5zaGFwZS5kYXRhLFxuICAgICAgICB6b2RFcnJvcjpcbiAgICAgICAgICBlcnJvci5jYXVzZSBpbnN0YW5jZW9mIFpvZEVycm9yID8gZXJyb3IuY2F1c2UuZmxhdHRlbigpIDogbnVsbCxcbiAgICAgIH0sXG4gICAgfVxuICB9LFxufSlcblxuLyoqXG4gKiBQdWJsaWMgcHJvY2VkdXJlXG4gKiBBdmFpbGFibGUgdG8gYWxsIHVzZXJzXG4gKi9cbmV4cG9ydCBjb25zdCBwdWJsaWNQcm9jZWR1cmUgPSB0LnByb2NlZHVyZVxuXG4vKipcbiAqIFByb3RlY3RlZCBwcm9jZWR1cmVcbiAqIFJlcXVpcmVzIGF1dGhlbnRpY2F0aW9uIChUT0RPOiBpbXBsZW1lbnQgYXV0aCBtaWRkbGV3YXJlKVxuICovXG5leHBvcnQgY29uc3QgcHJvdGVjdGVkUHJvY2VkdXJlID0gdC5wcm9jZWR1cmUudXNlKCh7IGN0eCwgbmV4dCB9KSA9PiB7XG4gIC8vIEZvciBub3csIHdlJ2xsIHNraXAgYXV0aGVudGljYXRpb25cbiAgLy8gSW4gcHJvZHVjdGlvbiwgeW91J2QgY2hlY2sgZm9yIHZhbGlkIHNlc3Npb24vdG9rZW4gaGVyZVxuICByZXR1cm4gbmV4dCh7XG4gICAgY3R4OiB7XG4gICAgICAuLi5jdHgsXG4gICAgICAvLyB1c2VyOiB2YWxpZGF0ZWQgdXNlciBvYmplY3RcbiAgICB9LFxuICB9KVxufSlcblxuLyoqXG4gKiBDcmVhdGUgcm91dGVyXG4gKi9cbmV4cG9ydCBjb25zdCByb3V0ZXIgPSB0LnJvdXRlclxuXG4vKipcbiAqIE1pZGRsZXdhcmUgZm9yIGxvZ2dpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IGxvZ2dlck1pZGRsZXdhcmUgPSB0Lm1pZGRsZXdhcmUoYXN5bmMgKHsgcGF0aCwgdHlwZSwgbmV4dCB9KSA9PiB7XG4gIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKVxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBuZXh0KClcbiAgY29uc3QgZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gc3RhcnRcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICBjb25zb2xlLmxvZyhgdFJQQyAke3R5cGV9ICR7cGF0aH0gLSAke2R1cmF0aW9ufW1zYClcbiAgfVxuXG4gIHJldHVybiByZXN1bHRcbn0pXG4iXSwibmFtZXMiOlsiaW5pdFRSUEMiLCJab2RFcnJvciIsInN1cGVyanNvbiIsImNyZWF0ZVRSUENDb250ZXh0Iiwib3B0cyIsInVzZXIiLCJ0IiwiY29udGV4dCIsImNyZWF0ZSIsInRyYW5zZm9ybWVyIiwiZXJyb3JGb3JtYXR0ZXIiLCJzaGFwZSIsImVycm9yIiwiZGF0YSIsInpvZEVycm9yIiwiY2F1c2UiLCJmbGF0dGVuIiwicHVibGljUHJvY2VkdXJlIiwicHJvY2VkdXJlIiwicHJvdGVjdGVkUHJvY2VkdXJlIiwidXNlIiwiY3R4IiwibmV4dCIsInJvdXRlciIsImxvZ2dlck1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlIiwicGF0aCIsInR5cGUiLCJzdGFydCIsIkRhdGUiLCJub3ciLCJyZXN1bHQiLCJkdXJhdGlvbiIsInByb2Nlc3MiLCJjb25zb2xlIiwibG9nIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/api/trpc.ts\n");

/***/ }),

/***/ "(rsc)/./lib/capture/auto-capture-service.ts":
/*!*********************************************!*\
  !*** ./lib/capture/auto-capture-service.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AutoCaptureService: () => (/* binding */ AutoCaptureService),\n/* harmony export */   defaultAutoCaptureService: () => (/* binding */ defaultAutoCaptureService),\n/* harmony export */   getAutoCaptureStatus: () => (/* binding */ getAutoCaptureStatus),\n/* harmony export */   startAutoCapture: () => (/* binding */ startAutoCapture),\n/* harmony export */   stopAutoCapture: () => (/* binding */ stopAutoCapture)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! child_process */ \"child_process\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(child_process__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! os */ \"os\");\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(os__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _claude_proxy__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./claude-proxy */ \"(rsc)/./lib/capture/claude-proxy.ts\");\n/* harmony import */ var _claude_interceptor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./claude-interceptor */ \"(rsc)/./lib/capture/claude-interceptor.ts\");\n/**\n * Automatic Capture Service\n *\n * A background service that automatically monitors and captures Claude Code sessions\n * without user intervention. Uses transparent proxy injection and process monitoring.\n */ \n\n\n\n\n\n\n/**\n * Automatic Capture Service for Claude Code\n */ class AutoCaptureService extends events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n    constructor(){\n        super(), this.isRunning = false, this.watchers = [];\n        this.configPath = (0,path__WEBPACK_IMPORTED_MODULE_3__.join)((0,os__WEBPACK_IMPORTED_MODULE_4__.homedir)(), '.arrakis', 'capture-config.json');\n        this.config = this.loadConfig();\n        this.claudeProxy = new _claude_proxy__WEBPACK_IMPORTED_MODULE_5__.ClaudeProxy();\n        this.status = {\n            running: false,\n            sessionsToday: 0,\n            totalSessions: 0,\n            lastCaptureTime: null,\n            errors: [],\n            mode: this.config.interceptMode\n        };\n        this.setupEventHandlers();\n    }\n    /**\n   * Start the automatic capture service\n   */ async start() {\n        if (this.isRunning) {\n            this.log('info', 'Auto-capture service already running');\n            return;\n        }\n        this.log('info', 'Starting Arrakis auto-capture service...');\n        try {\n            // Setup proxy injection based on mode\n            switch(this.config.interceptMode){\n                case 'proxy':\n                    await this.setupProxyMode();\n                    break;\n                case 'wrapper':\n                    await this.setupWrapperMode();\n                    break;\n                case 'monitor':\n                    await this.setupMonitorMode();\n                    break;\n            }\n            this.isRunning = true;\n            this.status.running = true;\n            this.status.mode = this.config.interceptMode;\n            this.emit('service_started', {\n                mode: this.config.interceptMode\n            });\n            this.log('info', `‚úÖ Auto-capture service started in ${this.config.interceptMode} mode`);\n        } catch (error) {\n            this.handleError('Failed to start auto-capture service', error);\n            throw error;\n        }\n    }\n    /**\n   * Stop the automatic capture service\n   */ async stop() {\n        if (!this.isRunning) {\n            return;\n        }\n        this.log('info', 'Stopping auto-capture service...');\n        // Stop all watchers\n        this.watchers.forEach((watcher)=>{\n            if (!watcher.killed) {\n                watcher.kill('SIGTERM');\n            }\n        });\n        this.watchers = [];\n        // Cleanup proxy/wrapper\n        await this.cleanup();\n        this.isRunning = false;\n        this.status.running = false;\n        this.emit('service_stopped');\n        this.log('info', '‚úÖ Auto-capture service stopped');\n    }\n    /**\n   * Get current service status\n   */ getStatus() {\n        return {\n            ...this.status\n        };\n    }\n    /**\n   * Update service configuration\n   */ updateConfig(newConfig) {\n        this.config = {\n            ...this.config,\n            ...newConfig\n        };\n        this.saveConfig();\n        this.emit('config_updated', this.config);\n        this.log('info', 'Configuration updated');\n    }\n    /**\n   * Setup proxy mode - intercepts all claude commands transparently\n   */ async setupProxyMode() {\n        this.log('info', 'Setting up transparent proxy mode...');\n        // Create claude wrapper script that calls our proxy\n        const claudeWrapperPath = this.createClaudeWrapper();\n        // Setup PATH manipulation to intercept claude commands\n        await this.setupPathIntercept(claudeWrapperPath);\n        this.log('info', '‚úÖ Proxy mode configured');\n    }\n    /**\n   * Setup wrapper mode - replaces claude command with our wrapper\n   */ async setupWrapperMode() {\n        this.log('info', 'Setting up wrapper mode...');\n        // Create alias or symlink for claude command\n        await this.createClaudeAlias();\n        this.log('info', '‚úÖ Wrapper mode configured');\n    }\n    /**\n   * Setup monitor mode - monitors process list for claude commands\n   */ async setupMonitorMode() {\n        this.log('info', 'Setting up process monitor mode...');\n        // Start process monitor that watches for claude processes\n        const monitor = this.startProcessMonitor();\n        this.watchers.push(monitor);\n        this.log('info', '‚úÖ Monitor mode configured');\n    }\n    /**\n   * Create claude wrapper script\n   */ createClaudeWrapper() {\n        const arrakisDir = (0,path__WEBPACK_IMPORTED_MODULE_3__.join)((0,os__WEBPACK_IMPORTED_MODULE_4__.homedir)(), '.arrakis');\n        if (!(0,fs__WEBPACK_IMPORTED_MODULE_2__.existsSync)(arrakisDir)) {\n            (0,fs__WEBPACK_IMPORTED_MODULE_2__.mkdirSync)(arrakisDir, {\n                recursive: true\n            });\n        }\n        const isWindows = process.platform === 'win32';\n        const wrapperPath = (0,path__WEBPACK_IMPORTED_MODULE_3__.join)(arrakisDir, isWindows ? 'claude.bat' : 'claude');\n        const wrapperContent = isWindows ? this.getWindowsWrapper() : this.getUnixWrapper();\n        (0,fs__WEBPACK_IMPORTED_MODULE_2__.writeFileSync)(wrapperPath, wrapperContent, {\n            mode: 493\n        });\n        this.log('debug', `Created Claude wrapper at: ${wrapperPath}`);\n        return wrapperPath;\n    }\n    /**\n   * Get Windows wrapper script content\n   */ getWindowsWrapper() {\n        return `@echo off\nREM Arrakis Auto-Capture Wrapper for Claude Code\nnode \"${(0,path__WEBPACK_IMPORTED_MODULE_3__.join)(__dirname, 'claude-wrapper.js')}\" %*\n`;\n    }\n    /**\n   * Get Unix wrapper script content\n   */ getUnixWrapper() {\n        return `#!/bin/bash\n# Arrakis Auto-Capture Wrapper for Claude Code\nnode \"${(0,path__WEBPACK_IMPORTED_MODULE_3__.join)(__dirname, 'claude-wrapper.js')}\" \"$@\"\n`;\n    }\n    /**\n   * Setup PATH interception\n   */ async setupPathIntercept(wrapperPath) {\n        // This would modify shell profile files to prepend our wrapper directory to PATH\n        // Implementation depends on shell (bash, zsh, fish, etc.)\n        this.log('info', `PATH intercept setup for wrapper: ${wrapperPath}`);\n        // Note: In production, this would modify ~/.bashrc, ~/.zshrc, etc.\n        // For now, we'll just log the required manual step\n        console.log(`\nüìã Manual Setup Required:\nAdd this to your shell profile (~/.bashrc, ~/.zshrc, etc.):\nexport PATH=\"${(0,path__WEBPACK_IMPORTED_MODULE_3__.dirname)(wrapperPath)}:$PATH\"\n\nOr run: echo 'export PATH=\"${(0,path__WEBPACK_IMPORTED_MODULE_3__.dirname)(wrapperPath)}:$PATH\"' >> ~/.bashrc\n`);\n    }\n    /**\n   * Create claude alias\n   */ async createClaudeAlias() {\n        // Create symlink or alias for claude command\n        this.log('info', 'Creating claude command alias...');\n        // Implementation would create appropriate alias for the platform\n        console.log(`\nüìã Manual Setup Required:\nAdd this alias to your shell profile:\nalias claude='node ${(0,path__WEBPACK_IMPORTED_MODULE_3__.join)(__dirname, 'claude-wrapper.js')}'\n`);\n    }\n    /**\n   * Start process monitor\n   */ startProcessMonitor() {\n        this.log('info', 'Starting process monitor for Claude Code...');\n        // Monitor running processes for claude commands\n        const isWindows = process.platform === 'win32';\n        const command = isWindows ? 'wmic' : 'ps';\n        const args = isWindows ? [\n            'process',\n            'get',\n            'name,processid,commandline'\n        ] : [\n            'aux'\n        ];\n        const monitor = (0,child_process__WEBPACK_IMPORTED_MODULE_1__.spawn)(command, args, {\n            stdio: [\n                'pipe',\n                'pipe',\n                'pipe'\n            ]\n        });\n        monitor.stdout?.on('data', (data)=>{\n            this.processMonitorOutput(data.toString());\n        });\n        monitor.on('exit', ()=>{\n            // Restart monitor after delay\n            setTimeout(()=>{\n                if (this.isRunning) {\n                    const newMonitor = this.startProcessMonitor();\n                    this.watchers.push(newMonitor);\n                }\n            }, 5000);\n        });\n        return monitor;\n    }\n    /**\n   * Process monitor output to detect claude commands\n   */ processMonitorOutput(output) {\n        if (output.toLowerCase().includes('claude')) {\n            this.log('debug', 'Detected Claude Code process');\n            // Extract process info and start capture\n            this.handleDetectedClaudeProcess(output);\n        }\n    }\n    /**\n   * Handle detected claude process\n   */ async handleDetectedClaudeProcess(processInfo) {\n        try {\n            this.log('info', 'üéØ Detected Claude Code execution, starting capture...');\n            // Start interceptor for this session\n            const sessionId = await _claude_interceptor__WEBPACK_IMPORTED_MODULE_6__.defaultInterceptor.interceptSession();\n            this.status.sessionsToday++;\n            this.status.totalSessions++;\n            this.status.lastCaptureTime = new Date().toISOString();\n            this.emit('session_detected', {\n                sessionId,\n                processInfo\n            });\n        } catch (error) {\n            this.handleError('Failed to capture detected Claude session', error);\n        }\n    }\n    /**\n   * Setup event handlers\n   */ setupEventHandlers() {\n        // Listen to interceptor events\n        _claude_interceptor__WEBPACK_IMPORTED_MODULE_6__.defaultInterceptor.on('session_complete', (data)=>{\n            this.emit('session_captured', data);\n            this.log('info', `‚úÖ Session captured: ${data.sessionId}`);\n        });\n        _claude_interceptor__WEBPACK_IMPORTED_MODULE_6__.defaultInterceptor.on('session_error', (data)=>{\n            this.handleError('Session capture failed', data.error);\n        });\n        // Handle proxy events\n        this.claudeProxy.on('claude_message', (data)=>{\n            this.emit('message_captured', data);\n        });\n    }\n    /**\n   * Load configuration from file\n   */ loadConfig() {\n        const defaultConfig = {\n            enabled: true,\n            autoStart: false,\n            interceptMode: 'proxy',\n            notification: true,\n            logLevel: 'info',\n            storageEnabled: true\n        };\n        if (!(0,fs__WEBPACK_IMPORTED_MODULE_2__.existsSync)(this.configPath)) {\n            // Create default config\n            this.saveConfig(defaultConfig);\n            return defaultConfig;\n        }\n        try {\n            const configData = (0,fs__WEBPACK_IMPORTED_MODULE_2__.readFileSync)(this.configPath, 'utf-8');\n            return {\n                ...defaultConfig,\n                ...JSON.parse(configData)\n            };\n        } catch (error) {\n            this.log('warn', 'Failed to load config, using defaults');\n            return defaultConfig;\n        }\n    }\n    /**\n   * Save configuration to file\n   */ saveConfig(config = this.config) {\n        try {\n            const configDir = (0,path__WEBPACK_IMPORTED_MODULE_3__.dirname)(this.configPath);\n            if (!(0,fs__WEBPACK_IMPORTED_MODULE_2__.existsSync)(configDir)) {\n                (0,fs__WEBPACK_IMPORTED_MODULE_2__.mkdirSync)(configDir, {\n                    recursive: true\n                });\n            }\n            (0,fs__WEBPACK_IMPORTED_MODULE_2__.writeFileSync)(this.configPath, JSON.stringify(config, null, 2));\n        } catch (error) {\n            this.log('error', 'Failed to save configuration');\n        }\n    }\n    /**\n   * Cleanup resources\n   */ async cleanup() {\n        // Cleanup any temporary files, aliases, etc.\n        this.log('info', 'Cleaning up auto-capture resources...');\n    }\n    /**\n   * Handle errors\n   */ handleError(message, error) {\n        const errorMsg = `${message}: ${error?.message || error}`;\n        this.status.errors.push(errorMsg);\n        this.log('error', errorMsg);\n        this.emit('error', {\n            message,\n            error\n        });\n    }\n    /**\n   * Log messages based on level\n   */ log(level, message) {\n        const levels = {\n            error: 0,\n            warn: 1,\n            info: 2,\n            debug: 3\n        };\n        const configLevel = levels[this.config.logLevel];\n        const messageLevel = levels[level];\n        if (messageLevel <= configLevel) {\n            const timestamp = new Date().toISOString();\n            console.log(`[${timestamp}] [${level.toUpperCase()}] ${message}`);\n        }\n    }\n}\n/**\n * Default auto-capture service instance\n */ const defaultAutoCaptureService = new AutoCaptureService();\n/**\n * Convenience functions\n */ async function startAutoCapture() {\n    return defaultAutoCaptureService.start();\n}\nasync function stopAutoCapture() {\n    return defaultAutoCaptureService.stop();\n}\nfunction getAutoCaptureStatus() {\n    return defaultAutoCaptureService.getStatus();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/capture/auto-capture-service.ts\n");

/***/ }),

/***/ "(rsc)/./lib/capture/claude-interceptor.ts":
/*!*******************************************!*\
  !*** ./lib/capture/claude-interceptor.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClaudeInterceptor: () => (/* binding */ ClaudeInterceptor),\n/* harmony export */   defaultInterceptor: () => (/* binding */ defaultInterceptor),\n/* harmony export */   interceptClaudeSession: () => (/* binding */ interceptClaudeSession)\n/* harmony export */ });\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! child_process */ \"child_process\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(child_process__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index */ \"(rsc)/./lib/capture/index.ts\");\n/**\n * Claude Code Session Interceptor\n *\n * This service intercepts and captures Claude Code conversations in real-time,\n * preserving all rich JSON metadata including tool calls, costs, and context.\n */ \n\n\n\n/**\n * Claude Code Session Interceptor\n */ class ClaudeInterceptor extends events__WEBPACK_IMPORTED_MODULE_1__.EventEmitter {\n    constructor(){\n        super(), this.sessions = new Map(), this.currentProcess = null;\n    }\n    /**\n   * Start intercepting a Claude Code session\n   */ async interceptSession(args = []) {\n        const sessionId = (0,crypto__WEBPACK_IMPORTED_MODULE_2__.randomUUID)();\n        // Ensure we capture JSON output\n        const claudeArgs = [\n            ...args,\n            '--output-format',\n            'stream-json',\n            '--verbose'\n        ];\n        console.log('üéØ Starting Claude Code interception:', claudeArgs.join(' '));\n        const claudeProcess = (0,child_process__WEBPACK_IMPORTED_MODULE_0__.spawn)('claude', claudeArgs, {\n            stdio: [\n                'pipe',\n                'pipe',\n                'pipe'\n            ],\n            env: process.env\n        });\n        this.currentProcess = claudeProcess;\n        const context = new SessionContext(sessionId);\n        this.sessions.set(sessionId, context);\n        // Handle JSON stream output\n        claudeProcess.stdout?.on('data', (data)=>{\n            this.parseClaudeOutput(data.toString(), context);\n        });\n        // Handle errors\n        claudeProcess.stderr?.on('data', (data)=>{\n            console.error('Claude Code stderr:', data.toString());\n        });\n        // Handle process exit\n        claudeProcess.on('close', async (code)=>{\n            console.log(`Claude Code process exited with code ${code}`);\n            await this.finalizeSession(context);\n        });\n        return sessionId;\n    }\n    /**\n   * Parse Claude Code JSON output stream\n   */ parseClaudeOutput(data, context) {\n        const lines = data.split('\\n').filter((line)=>line.trim());\n        for (const line of lines){\n            try {\n                const message = JSON.parse(line);\n                this.processMessage(message, context);\n            } catch (error) {\n                // Skip non-JSON lines (may be regular output)\n                if (line.trim() && !line.includes('Query:')) {\n                    console.log('Non-JSON output:', line);\n                }\n            }\n        }\n    }\n    /**\n   * Process individual Claude messages\n   */ processMessage(message, context) {\n        console.log(`üì® Processing ${message.type} message:`, message.uuid || 'no-uuid');\n        switch(message.type){\n            case 'system':\n                if (message.subtype === 'init') {\n                    context.initMessage = message;\n                    context.claudeSessionId = message.session_id;\n                }\n                break;\n            case 'user':\n                context.messages.push(this.convertUserMessage(message));\n                break;\n            case 'assistant':\n                context.messages.push(this.convertAssistantMessage(message));\n                break;\n            case 'result':\n                context.resultMessage = message;\n                context.isComplete = true;\n                break;\n        }\n        // Emit event for real-time processing\n        this.emit('message', {\n            message,\n            context\n        });\n    }\n    /**\n   * Convert Claude user message to our format\n   */ convertUserMessage(msg) {\n        const textContent = msg.message.content.filter((c)=>c.type === 'text').map((c)=>c.text).join('\\n');\n        return {\n            role: 'user',\n            content: textContent,\n            timestamp: new Date().toISOString(),\n            metadata: {\n                uuid: msg.uuid,\n                parent_tool_use_id: msg.parent_tool_use_id,\n                raw_content: msg.message.content\n            }\n        };\n    }\n    /**\n   * Convert Claude assistant message to our format\n   */ convertAssistantMessage(msg) {\n        const textContent = msg.message.content.filter((c)=>c.type === 'text').map((c)=>c.text).join('\\n');\n        const toolCalls = msg.message.content.filter((c)=>c.type === 'tool_use');\n        return {\n            role: 'assistant',\n            content: textContent,\n            timestamp: new Date().toISOString(),\n            metadata: {\n                uuid: msg.uuid,\n                parent_tool_use_id: msg.parent_tool_use_id,\n                tool_calls: toolCalls,\n                raw_content: msg.message.content\n            }\n        };\n    }\n    /**\n   * Finalize and store session when complete\n   */ async finalizeSession(context) {\n        if (!context.isComplete || !context.resultMessage) {\n            console.warn('‚ö†Ô∏è Session incomplete, storing partial data');\n        }\n        const conversationData = {\n            title: this.generateSessionTitle(context),\n            claudeSessionId: context.claudeSessionId,\n            messages: context.messages,\n            metadata: {\n                source: 'claude-code',\n                timestamp: new Date().toISOString(),\n                sessionInfo: context.initMessage ? {\n                    projectPath: context.initMessage.cwd,\n                    workingDirectory: context.initMessage.cwd\n                } : undefined,\n                performance: context.resultMessage ? {\n                    totalTokens: context.resultMessage.usage.input_tokens + context.resultMessage.usage.output_tokens,\n                    totalCost: context.resultMessage.total_cost_usd,\n                    duration: context.resultMessage.duration_ms\n                } : undefined\n            }\n        };\n        try {\n            const sessionId = await (0,_index__WEBPACK_IMPORTED_MODULE_3__.captureConversation)(conversationData);\n            console.log(`‚úÖ Captured Claude Code session: ${sessionId}`);\n            console.log(`üìä Stats: ${context.messages.length} messages, $${context.resultMessage?.total_cost_usd || 0}`);\n            this.emit('session_complete', {\n                sessionId,\n                context\n            });\n        } catch (error) {\n            console.error('‚ùå Failed to store session:', error);\n            this.emit('session_error', {\n                error,\n                context\n            });\n        }\n        // Cleanup\n        this.sessions.delete(context.arrakisSessionId);\n    }\n    /**\n   * Generate meaningful session title\n   */ generateSessionTitle(context) {\n        if (context.messages.length === 0) {\n            return 'Empty Claude Code Session';\n        }\n        const firstUserMessage = context.messages.find((m)=>m.role === 'user');\n        if (firstUserMessage && firstUserMessage.content.length > 10) {\n            const content = firstUserMessage.content.trim();\n            const firstSentence = content.split(/[.!?]/)[0];\n            return firstSentence.length > 50 ? content.substring(0, 47) + '...' : firstSentence;\n        }\n        return `Claude Code Session ${new Date().toLocaleDateString()}`;\n    }\n    /**\n   * Stop current interception\n   */ stop() {\n        if (this.currentProcess) {\n            this.currentProcess.kill('SIGTERM');\n            this.currentProcess = null;\n        }\n    }\n}\n/**\n * Session context for tracking conversation state\n */ class SessionContext {\n    constructor(arrakisSessionId){\n        this.claudeSessionId = '';\n        this.messages = [];\n        this.initMessage = null;\n        this.resultMessage = null;\n        this.isComplete = false;\n        this.arrakisSessionId = arrakisSessionId;\n    }\n}\n/**\n * Default interceptor instance\n */ const defaultInterceptor = new ClaudeInterceptor();\n/**\n * Convenience function to start interception\n */ async function interceptClaudeSession(args = []) {\n    return defaultInterceptor.interceptSession(args);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/capture/claude-interceptor.ts\n");

/***/ }),

/***/ "(rsc)/./lib/capture/claude-proxy.ts":
/*!*************************************!*\
  !*** ./lib/capture/claude-proxy.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClaudeProxy: () => (/* binding */ ClaudeProxy),\n/* harmony export */   continueClaudeSession: () => (/* binding */ continueClaudeSession),\n/* harmony export */   defaultProxy: () => (/* binding */ defaultProxy),\n/* harmony export */   executeClaudeCommand: () => (/* binding */ executeClaudeCommand),\n/* harmony export */   resumeClaudeSession: () => (/* binding */ resumeClaudeSession)\n/* harmony export */ });\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! child_process */ \"child_process\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(child_process__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _claude_interceptor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./claude-interceptor */ \"(rsc)/./lib/capture/claude-interceptor.ts\");\n/* harmony import */ var _metadata_parser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./metadata-parser */ \"(rsc)/./lib/capture/metadata-parser.ts\");\n/* harmony import */ var _tool_tracker__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tool-tracker */ \"(rsc)/./lib/capture/tool-tracker.ts\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./index */ \"(rsc)/./lib/capture/index.ts\");\n/**\n * Claude Code Proxy\n *\n * A comprehensive wrapper/proxy for Claude Code that captures conversations\n * in real-time with full metadata, tool calls, and performance analytics.\n */ \n\n\n\n\n\n/**\n * Main Claude Code Proxy\n */ class ClaudeProxy extends events__WEBPACK_IMPORTED_MODULE_1__.EventEmitter {\n    constructor(){\n        super(), this.activeSessions = new Map();\n        this.interceptor = new _claude_interceptor__WEBPACK_IMPORTED_MODULE_2__.ClaudeInterceptor();\n        this.parser = new _metadata_parser__WEBPACK_IMPORTED_MODULE_3__.ClaudeMetadataParser();\n        this.toolTracker = new _tool_tracker__WEBPACK_IMPORTED_MODULE_4__.ToolCallTracker();\n        this.setupEventHandlers();\n    }\n    /**\n   * Execute Claude Code command with full capture\n   */ async executeCommand(prompt, options = {}) {\n        const opts = this.mergeDefaultOptions(options);\n        console.log('üöÄ Starting Claude Code proxy execution...');\n        console.log(`üìù Prompt: ${prompt.substring(0, 100)}${prompt.length > 100 ? '...' : ''}`);\n        const sessionContext = new SessionContext();\n        const sessionId = sessionContext.sessionId;\n        this.activeSessions.set(sessionId, sessionContext);\n        try {\n            // Build Claude Code command\n            const claudeArgs = this.buildClaudeArgs(prompt, opts);\n            // Start capture if enabled\n            if (opts.enableCapture) {\n                await this.startCapture(sessionId, claudeArgs, opts);\n            }\n            // Execute Claude Code\n            const output = await this.runClaudeCommand(claudeArgs, sessionContext, opts);\n            // Process session results\n            const summary = await this.finalizeSession(sessionContext, opts);\n            console.log('‚úÖ Claude Code execution completed');\n            console.log(`üìä Summary: ${summary.messageCount} messages, $${summary.cost}, ${summary.toolCallsCount} tool calls`);\n            return {\n                output,\n                summary\n            };\n        } catch (error) {\n            console.error('‚ùå Claude Code execution failed:', error);\n            throw error;\n        } finally{\n            this.activeSessions.delete(sessionId);\n        }\n    }\n    /**\n   * Resume existing Claude Code session\n   */ async resumeSession(sessionId, prompt, options = {}) {\n        const opts = {\n            ...options,\n            claudeArgs: [\n                ...options.claudeArgs || [],\n                '--resume',\n                sessionId\n            ]\n        };\n        return this.executeCommand(prompt, opts);\n    }\n    /**\n   * Continue most recent Claude Code session\n   */ async continueSession(prompt, options = {}) {\n        const opts = {\n            ...options,\n            claudeArgs: [\n                ...options.claudeArgs || [],\n                '--continue'\n            ]\n        };\n        return this.executeCommand(prompt, opts);\n    }\n    /**\n   * Analyze existing session data\n   */ async analyzeSession(sessionJsonData) {\n        return this.parser.parseFromJsonString(sessionJsonData);\n    }\n    /**\n   * Get session statistics\n   */ getSessionStatistics() {\n        return {\n            totalSessions: this.activeSessions.size,\n            activeSessions: this.activeSessions.size,\n            toolCallStats: this.toolTracker.getStatistics()\n        };\n    }\n    /**\n   * Setup event handlers\n   */ setupEventHandlers() {\n        this.interceptor.on('message', ({ message, context })=>{\n            // Track tool calls in real-time\n            const newToolCalls = this.toolTracker.processMessage(message);\n            if (newToolCalls.length > 0) {\n                this.emit('tool_calls', {\n                    toolCalls: newToolCalls,\n                    sessionId: context.claudeSessionId\n                });\n            }\n            // Emit message events\n            this.emit('claude_message', {\n                message,\n                sessionId: context.claudeSessionId\n            });\n        });\n        this.interceptor.on('session_complete', ({ sessionId, context })=>{\n            this.emit('session_complete', {\n                sessionId,\n                context\n            });\n        });\n        this.interceptor.on('session_error', ({ error, context })=>{\n            this.emit('session_error', {\n                error,\n                context\n            });\n        });\n    }\n    /**\n   * Start capture for session\n   */ async startCapture(sessionId, claudeArgs, options) {\n        if (options.captureMode === 'realtime' || options.captureMode === 'both') {\n            // Real-time capture via interceptor\n            await this.interceptor.interceptSession(claudeArgs);\n        }\n    }\n    /**\n   * Run Claude Code command\n   */ async runClaudeCommand(args, context, options) {\n        return new Promise((resolve, reject)=>{\n            const claudeProcess = (0,child_process__WEBPACK_IMPORTED_MODULE_0__.spawn)('claude', args, {\n                stdio: [\n                    'pipe',\n                    'pipe',\n                    'pipe'\n                ],\n                env: process.env\n            });\n            let output = '';\n            let errorOutput = '';\n            claudeProcess.stdout?.on('data', (data)=>{\n                const chunk = data.toString();\n                output += chunk;\n                // Parse JSON messages if in stream mode\n                if (options.outputFormat === 'stream-json') {\n                    this.parseStreamingOutput(chunk, context);\n                }\n            });\n            claudeProcess.stderr?.on('data', (data)=>{\n                errorOutput += data.toString();\n            });\n            claudeProcess.on('close', (code)=>{\n                context.endTime = new Date();\n                context.exitCode = code || 1;\n                context.output = output;\n                context.errorOutput = errorOutput;\n                if (code === 0) {\n                    resolve(output);\n                } else {\n                    reject(new Error(`Claude Code exited with code ${code}: ${errorOutput}`));\n                }\n            });\n            claudeProcess.on('error', (error)=>{\n                reject(error);\n            });\n            // Send prompt if provided directly\n            if (args.includes('-p') || args.includes('--print')) {\n                claudeProcess.stdin?.end();\n            }\n        });\n    }\n    /**\n   * Parse streaming JSON output\n   */ parseStreamingOutput(data, context) {\n        const lines = data.split('\\n').filter((line)=>line.trim());\n        for (const line of lines){\n            try {\n                const message = JSON.parse(line);\n                context.messages.push(message);\n                // Track tool calls\n                const toolCalls = this.toolTracker.processMessage(message);\n                context.toolCalls.push(...toolCalls);\n                this.emit('streaming_message', {\n                    message,\n                    context\n                });\n            } catch (error) {\n            // Skip non-JSON lines\n            }\n        }\n    }\n    /**\n   * Finalize session and create summary\n   */ async finalizeSession(context, options) {\n        const duration = context.endTime.getTime() - context.startTime.getTime();\n        let parsedSession = null;\n        let arrakisSessionId;\n        // Parse session metadata if we have JSON data\n        if (context.messages.length > 0) {\n            try {\n                parsedSession = this.parser.parseSession(context.messages);\n            } catch (error) {\n                console.warn('Failed to parse session metadata:', error);\n            }\n        }\n        // Store in database if enabled\n        if (options.autoStore && parsedSession) {\n            try {\n                const conversationData = {\n                    title: parsedSession.title,\n                    claudeSessionId: parsedSession.sessionId,\n                    messages: parsedSession.messages.map((m)=>({\n                            role: m.type,\n                            content: m.content,\n                            timestamp: m.timestamp,\n                            metadata: m.metadata\n                        })),\n                    metadata: {\n                        source: 'claude-code',\n                        timestamp: context.startTime.toISOString(),\n                        sessionInfo: {\n                            projectPath: parsedSession.environment.cwd,\n                            workingDirectory: parsedSession.environment.cwd\n                        },\n                        performance: {\n                            totalTokens: parsedSession.performance.totalTokens,\n                            totalCost: parsedSession.performance.totalCost,\n                            duration: duration\n                        }\n                    }\n                };\n                arrakisSessionId = await (0,_index__WEBPACK_IMPORTED_MODULE_5__.captureConversation)(conversationData);\n                console.log(`üíæ Stored session in Arrakis: ${arrakisSessionId}`);\n            } catch (error) {\n                console.error('Failed to store session in database:', error);\n            }\n        }\n        const summary = {\n            sessionId: context.sessionId,\n            arrakisSessionId,\n            title: parsedSession?.title || 'Claude Code Session',\n            startTime: context.startTime.toISOString(),\n            endTime: context.endTime.toISOString(),\n            duration,\n            cost: parsedSession?.performance.totalCost || 0,\n            messageCount: parsedSession?.conversation.messageCount || 0,\n            toolCallsCount: context.toolCalls.length,\n            success: context.exitCode === 0,\n            metadata: parsedSession || {}\n        };\n        return summary;\n    }\n    /**\n   * Build Claude Code arguments\n   */ buildClaudeArgs(prompt, options) {\n        const args = [];\n        // Add print mode for non-interactive execution\n        args.push('--print');\n        // Add prompt\n        args.push(prompt);\n        // Add output format\n        if (options.outputFormat) {\n            args.push('--output-format', options.outputFormat);\n        } else if (options.enableCapture) {\n            args.push('--output-format', 'stream-json');\n        }\n        // Add verbose mode\n        if (options.verbose) {\n            args.push('--verbose');\n        }\n        // Add custom args\n        if (options.claudeArgs) {\n            args.push(...options.claudeArgs);\n        }\n        return args;\n    }\n    /**\n   * Merge default options\n   */ mergeDefaultOptions(options) {\n        return {\n            enableCapture: true,\n            captureMode: 'both',\n            username: 'arrakis-user',\n            claudeArgs: [],\n            outputFormat: 'stream-json',\n            verbose: false,\n            autoStore: true,\n            sessionPrefix: 'arrakis',\n            enableAnalytics: true,\n            enableToolTracking: true,\n            ...options\n        };\n    }\n}\n/**\n * Session context for tracking execution\n */ class SessionContext {\n    constructor(){\n        this.sessionId = new Date().getTime().toString();\n        this.startTime = new Date();\n        this.endTime = new Date();\n        this.exitCode = 0;\n        this.output = '';\n        this.errorOutput = '';\n        this.messages = [];\n        this.toolCalls = [];\n    }\n}\n/**\n * Default proxy instance\n */ const defaultProxy = new ClaudeProxy();\n/**\n * Convenience functions\n */ async function executeClaudeCommand(prompt, options) {\n    return defaultProxy.executeCommand(prompt, options);\n}\nasync function resumeClaudeSession(sessionId, prompt, options) {\n    return defaultProxy.resumeSession(sessionId, prompt, options);\n}\nasync function continueClaudeSession(prompt, options) {\n    return defaultProxy.continueSession(prompt, options);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/capture/claude-proxy.ts\n");

/***/ }),

/***/ "(rsc)/./lib/capture/index.ts":
/*!******************************!*\
  !*** ./lib/capture/index.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConversationCapture: () => (/* binding */ ConversationCapture),\n/* harmony export */   captureConversation: () => (/* binding */ captureConversation),\n/* harmony export */   captureMessage: () => (/* binding */ captureMessage),\n/* harmony export */   defaultCapture: () => (/* binding */ defaultCapture)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _db_queries__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../db/queries */ \"(rsc)/./lib/db/queries.ts\");\n/**\n * Conversation Capture Service\n *\n * This service handles capturing Claude Code conversations and storing them\n * in the database for later search and analysis.\n */ \n\n/**\n * Main conversation capture service\n */ class ConversationCapture {\n    constructor(username = 'default-user'){\n        this.username = username;\n    }\n    /**\n   * Capture a complete conversation and store it in the database\n   */ async captureConversation(data) {\n        try {\n            // Ensure user exists\n            const user = await (0,_db_queries__WEBPACK_IMPORTED_MODULE_1__.getOrCreateUser)(this.username);\n            // Generate session title if not provided\n            const title = data.title || this.generateTitle(data.messages);\n            // Create session\n            const sessionData = {\n                userId: user.id,\n                claudeSessionId: data.claudeSessionId || (0,crypto__WEBPACK_IMPORTED_MODULE_0__.randomUUID)(),\n                title,\n                metadata: data.metadata || {}\n            };\n            const session = await (0,_db_queries__WEBPACK_IMPORTED_MODULE_1__.createSession)(sessionData);\n            // Store all messages\n            const messagePromises = data.messages.map(async (msgData)=>{\n                const messageData = {\n                    sessionId: session.id,\n                    role: msgData.role,\n                    content: msgData.content,\n                    tokens: msgData.tokens,\n                    costUsd: msgData.costUsd,\n                    metadata: msgData.metadata || {}\n                };\n                return (0,_db_queries__WEBPACK_IMPORTED_MODULE_1__.createMessage)(messageData);\n            });\n            await Promise.all(messagePromises);\n            console.log(`‚úÖ Captured conversation: ${title} (${data.messages.length} messages)`);\n            return session.id;\n        } catch (error) {\n            console.error('‚ùå Failed to capture conversation:', error);\n            throw error;\n        }\n    }\n    /**\n   * Capture a single message and add it to an existing session\n   */ async captureMessage(sessionId, messageData) {\n        try {\n            const newMessage = {\n                sessionId,\n                role: messageData.role,\n                content: messageData.content,\n                tokens: messageData.tokens,\n                costUsd: messageData.costUsd,\n                metadata: messageData.metadata || {}\n            };\n            await (0,_db_queries__WEBPACK_IMPORTED_MODULE_1__.createMessage)(newMessage);\n            console.log(`‚úÖ Captured message: ${messageData.role} - ${messageData.content.substring(0, 50)}...`);\n        } catch (error) {\n            console.error('‚ùå Failed to capture message:', error);\n            throw error;\n        }\n    }\n    /**\n   * Generate a meaningful title from conversation messages\n   */ generateTitle(messages) {\n        // Find the first substantial user message\n        const firstUserMessage = messages.find((msg)=>msg.role === 'user' && msg.content.length > 10);\n        if (firstUserMessage) {\n            // Extract first sentence or up to 50 characters\n            const content = firstUserMessage.content.trim();\n            const firstSentence = content.split(/[.!?]/)[0];\n            return firstSentence.length > 50 ? content.substring(0, 47) + '...' : firstSentence;\n        }\n        // Fallback to timestamp-based title\n        return `Conversation ${new Date().toLocaleDateString()}`;\n    }\n    /**\n   * Parse Claude Code session output and extract conversation data\n   */ parseClaudeOutput(output) {\n        // This is a placeholder for parsing Claude Code output\n        // Implementation will depend on the specific format of Claude Code logs/output\n        const lines = output.split('\\n');\n        const messages = [];\n        // Basic parsing logic - this will need to be enhanced based on actual format\n        let currentMessage = '';\n        let currentRole = 'user';\n        for (const line of lines){\n            if (line.trim().startsWith('user:')) {\n                if (currentMessage) {\n                    messages.push({\n                        role: currentRole,\n                        content: currentMessage.trim()\n                    });\n                }\n                currentRole = 'user';\n                currentMessage = line.replace(/^user:\\s*/, '');\n            } else if (line.trim().startsWith('assistant:')) {\n                if (currentMessage) {\n                    messages.push({\n                        role: currentRole,\n                        content: currentMessage.trim()\n                    });\n                }\n                currentRole = 'assistant';\n                currentMessage = line.replace(/^assistant:\\s*/, '');\n            } else {\n                currentMessage += '\\n' + line;\n            }\n        }\n        // Add final message\n        if (currentMessage) {\n            messages.push({\n                role: currentRole,\n                content: currentMessage.trim()\n            });\n        }\n        return {\n            messages,\n            metadata: {\n                source: 'claude-code',\n                timestamp: new Date().toISOString()\n            }\n        };\n    }\n}\n/**\n * Default instance for easy usage\n */ const defaultCapture = new ConversationCapture();\n/**\n * Convenience function for quick conversation capture\n */ async function captureConversation(data) {\n    return defaultCapture.captureConversation(data);\n}\n/**\n * Convenience function for capturing a single message\n */ async function captureMessage(sessionId, messageData) {\n    return defaultCapture.captureMessage(sessionId, messageData);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QVE7Z0JBQ1JDLFdBQVcsSUFBSVosT0FBT2EsV0FBVztZQUNuQztRQUNGO0lBQ0Y7QUFDRjtBQUVBOztDQUVDLEdBQ00sTUFBTUMsaUJBQWlCLElBQUlwRCxzQkFBcUI7QUFFdkQ7O0NBRUMsR0FDTSxlQUFlRSxvQkFDcEJDLElBQXNCO0lBRXRCLE9BQU9pRCxlQUFlbEQsbUJBQW1CLENBQUNDO0FBQzVDO0FBRUE7O0NBRUMsR0FDTSxlQUFlMEIsZUFDcEJYLFNBQWlCLEVBQ2pCRCxXQUF3QjtJQUV4QixPQUFPbUMsZUFBZXZCLGNBQWMsQ0FBQ1gsV0FBV0Q7QUFDbEQiLCJzb3VyY2VzIjpbIkM6XFxwcm9qZWN0c1xcYXJyYWtpc1xcbGliXFxjYXB0dXJlXFxpbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbnZlcnNhdGlvbiBDYXB0dXJlIFNlcnZpY2VcbiAqXG4gKiBUaGlzIHNlcnZpY2UgaGFuZGxlcyBjYXB0dXJpbmcgQ2xhdWRlIENvZGUgY29udmVyc2F0aW9ucyBhbmQgc3RvcmluZyB0aGVtXG4gKiBpbiB0aGUgZGF0YWJhc2UgZm9yIGxhdGVyIHNlYXJjaCBhbmQgYW5hbHlzaXMuXG4gKi9cblxuaW1wb3J0IHsgcmFuZG9tVVVJRCB9IGZyb20gJ2NyeXB0bydcbmltcG9ydCB7XG4gIGNyZWF0ZVVzZXIsXG4gIGNyZWF0ZVNlc3Npb24sXG4gIGNyZWF0ZU1lc3NhZ2UsXG4gIGdldE9yQ3JlYXRlVXNlcixcbn0gZnJvbSAnLi4vZGIvcXVlcmllcydcbmltcG9ydCB0eXBlIHsgTmV3U2Vzc2lvbiwgTmV3TWVzc2FnZSB9IGZyb20gJy4uL2RiL3NjaGVtYSdcblxuZXhwb3J0IGludGVyZmFjZSBDb252ZXJzYXRpb25NZXRhZGF0YSB7XG4gIHNvdXJjZTogJ2NsYXVkZS1jb2RlJyB8ICdtYW51YWwnIHwgJ2ltcG9ydCdcbiAgdGltZXN0YW1wOiBzdHJpbmdcbiAgc2Vzc2lvbkluZm8/OiB7XG4gICAgcHJvamVjdFBhdGg/OiBzdHJpbmdcbiAgICBnaXRCcmFuY2g/OiBzdHJpbmdcbiAgICB3b3JraW5nRGlyZWN0b3J5Pzogc3RyaW5nXG4gIH1cbiAgcGVyZm9ybWFuY2U/OiB7XG4gICAgdG90YWxUb2tlbnM/OiBudW1iZXJcbiAgICB0b3RhbENvc3Q/OiBudW1iZXJcbiAgICBkdXJhdGlvbj86IG51bWJlclxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnZURhdGEge1xuICByb2xlOiAndXNlcicgfCAnYXNzaXN0YW50JyB8ICdzeXN0ZW0nXG4gIGNvbnRlbnQ6IHN0cmluZ1xuICB0aW1lc3RhbXA/OiBzdHJpbmdcbiAgdG9rZW5zPzogbnVtYmVyXG4gIGNvc3RVc2Q/OiBzdHJpbmdcbiAgbWV0YWRhdGE/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29udmVyc2F0aW9uRGF0YSB7XG4gIHRpdGxlPzogc3RyaW5nXG4gIG1lc3NhZ2VzOiBNZXNzYWdlRGF0YVtdXG4gIG1ldGFkYXRhPzogQ29udmVyc2F0aW9uTWV0YWRhdGFcbiAgY2xhdWRlU2Vzc2lvbklkPzogc3RyaW5nXG59XG5cbi8qKlxuICogTWFpbiBjb252ZXJzYXRpb24gY2FwdHVyZSBzZXJ2aWNlXG4gKi9cbmV4cG9ydCBjbGFzcyBDb252ZXJzYXRpb25DYXB0dXJlIHtcbiAgcHJpdmF0ZSB1c2VybmFtZTogc3RyaW5nXG5cbiAgY29uc3RydWN0b3IodXNlcm5hbWU6IHN0cmluZyA9ICdkZWZhdWx0LXVzZXInKSB7XG4gICAgdGhpcy51c2VybmFtZSA9IHVzZXJuYW1lXG4gIH1cblxuICAvKipcbiAgICogQ2FwdHVyZSBhIGNvbXBsZXRlIGNvbnZlcnNhdGlvbiBhbmQgc3RvcmUgaXQgaW4gdGhlIGRhdGFiYXNlXG4gICAqL1xuICBhc3luYyBjYXB0dXJlQ29udmVyc2F0aW9uKGRhdGE6IENvbnZlcnNhdGlvbkRhdGEpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBFbnN1cmUgdXNlciBleGlzdHNcbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBnZXRPckNyZWF0ZVVzZXIodGhpcy51c2VybmFtZSlcblxuICAgICAgLy8gR2VuZXJhdGUgc2Vzc2lvbiB0aXRsZSBpZiBub3QgcHJvdmlkZWRcbiAgICAgIGNvbnN0IHRpdGxlID0gZGF0YS50aXRsZSB8fCB0aGlzLmdlbmVyYXRlVGl0bGUoZGF0YS5tZXNzYWdlcylcblxuICAgICAgLy8gQ3JlYXRlIHNlc3Npb25cbiAgICAgIGNvbnN0IHNlc3Npb25EYXRhOiBOZXdTZXNzaW9uID0ge1xuICAgICAgICB1c2VySWQ6IHVzZXIuaWQsXG4gICAgICAgIGNsYXVkZVNlc3Npb25JZDogZGF0YS5jbGF1ZGVTZXNzaW9uSWQgfHwgcmFuZG9tVVVJRCgpLFxuICAgICAgICB0aXRsZSxcbiAgICAgICAgbWV0YWRhdGE6IGRhdGEubWV0YWRhdGEgfHwge30sXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBjcmVhdGVTZXNzaW9uKHNlc3Npb25EYXRhKVxuXG4gICAgICAvLyBTdG9yZSBhbGwgbWVzc2FnZXNcbiAgICAgIGNvbnN0IG1lc3NhZ2VQcm9taXNlcyA9IGRhdGEubWVzc2FnZXMubWFwKGFzeW5jIChtc2dEYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VEYXRhOiBOZXdNZXNzYWdlID0ge1xuICAgICAgICAgIHNlc3Npb25JZDogc2Vzc2lvbi5pZCxcbiAgICAgICAgICByb2xlOiBtc2dEYXRhLnJvbGUsXG4gICAgICAgICAgY29udGVudDogbXNnRGF0YS5jb250ZW50LFxuICAgICAgICAgIHRva2VuczogbXNnRGF0YS50b2tlbnMsXG4gICAgICAgICAgY29zdFVzZDogbXNnRGF0YS5jb3N0VXNkLFxuICAgICAgICAgIG1ldGFkYXRhOiBtc2dEYXRhLm1ldGFkYXRhIHx8IHt9LFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZU1lc3NhZ2UobWVzc2FnZURhdGEpXG4gICAgICB9KVxuXG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChtZXNzYWdlUHJvbWlzZXMpXG5cbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBg4pyFIENhcHR1cmVkIGNvbnZlcnNhdGlvbjogJHt0aXRsZX0gKCR7ZGF0YS5tZXNzYWdlcy5sZW5ndGh9IG1lc3NhZ2VzKWBcbiAgICAgIClcbiAgICAgIHJldHVybiBzZXNzaW9uLmlkXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBGYWlsZWQgdG8gY2FwdHVyZSBjb252ZXJzYXRpb246JywgZXJyb3IpXG4gICAgICB0aHJvdyBlcnJvclxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYXB0dXJlIGEgc2luZ2xlIG1lc3NhZ2UgYW5kIGFkZCBpdCB0byBhbiBleGlzdGluZyBzZXNzaW9uXG4gICAqL1xuICBhc3luYyBjYXB0dXJlTWVzc2FnZShcbiAgICBzZXNzaW9uSWQ6IHN0cmluZyxcbiAgICBtZXNzYWdlRGF0YTogTWVzc2FnZURhdGFcbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG5ld01lc3NhZ2U6IE5ld01lc3NhZ2UgPSB7XG4gICAgICAgIHNlc3Npb25JZCxcbiAgICAgICAgcm9sZTogbWVzc2FnZURhdGEucm9sZSxcbiAgICAgICAgY29udGVudDogbWVzc2FnZURhdGEuY29udGVudCxcbiAgICAgICAgdG9rZW5zOiBtZXNzYWdlRGF0YS50b2tlbnMsXG4gICAgICAgIGNvc3RVc2Q6IG1lc3NhZ2VEYXRhLmNvc3RVc2QsXG4gICAgICAgIG1ldGFkYXRhOiBtZXNzYWdlRGF0YS5tZXRhZGF0YSB8fCB7fSxcbiAgICAgIH1cblxuICAgICAgYXdhaXQgY3JlYXRlTWVzc2FnZShuZXdNZXNzYWdlKVxuICAgICAgY29uc29sZS5sb2coXG4gICAgICAgIGDinIUgQ2FwdHVyZWQgbWVzc2FnZTogJHttZXNzYWdlRGF0YS5yb2xlfSAtICR7bWVzc2FnZURhdGEuY29udGVudC5zdWJzdHJpbmcoMCwgNTApfS4uLmBcbiAgICAgIClcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEZhaWxlZCB0byBjYXB0dXJlIG1lc3NhZ2U6JywgZXJyb3IpXG4gICAgICB0aHJvdyBlcnJvclxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIG1lYW5pbmdmdWwgdGl0bGUgZnJvbSBjb252ZXJzYXRpb24gbWVzc2FnZXNcbiAgICovXG4gIHByaXZhdGUgZ2VuZXJhdGVUaXRsZShtZXNzYWdlczogTWVzc2FnZURhdGFbXSk6IHN0cmluZyB7XG4gICAgLy8gRmluZCB0aGUgZmlyc3Qgc3Vic3RhbnRpYWwgdXNlciBtZXNzYWdlXG4gICAgY29uc3QgZmlyc3RVc2VyTWVzc2FnZSA9IG1lc3NhZ2VzLmZpbmQoXG4gICAgICAobXNnKSA9PiBtc2cucm9sZSA9PT0gJ3VzZXInICYmIG1zZy5jb250ZW50Lmxlbmd0aCA+IDEwXG4gICAgKVxuXG4gICAgaWYgKGZpcnN0VXNlck1lc3NhZ2UpIHtcbiAgICAgIC8vIEV4dHJhY3QgZmlyc3Qgc2VudGVuY2Ugb3IgdXAgdG8gNTAgY2hhcmFjdGVyc1xuICAgICAgY29uc3QgY29udGVudCA9IGZpcnN0VXNlck1lc3NhZ2UuY29udGVudC50cmltKClcbiAgICAgIGNvbnN0IGZpcnN0U2VudGVuY2UgPSBjb250ZW50LnNwbGl0KC9bLiE/XS8pWzBdXG4gICAgICByZXR1cm4gZmlyc3RTZW50ZW5jZS5sZW5ndGggPiA1MFxuICAgICAgICA/IGNvbnRlbnQuc3Vic3RyaW5nKDAsIDQ3KSArICcuLi4nXG4gICAgICAgIDogZmlyc3RTZW50ZW5jZVxuICAgIH1cblxuICAgIC8vIEZhbGxiYWNrIHRvIHRpbWVzdGFtcC1iYXNlZCB0aXRsZVxuICAgIHJldHVybiBgQ29udmVyc2F0aW9uICR7bmV3IERhdGUoKS50b0xvY2FsZURhdGVTdHJpbmcoKX1gXG4gIH1cblxuICAvKipcbiAgICogUGFyc2UgQ2xhdWRlIENvZGUgc2Vzc2lvbiBvdXRwdXQgYW5kIGV4dHJhY3QgY29udmVyc2F0aW9uIGRhdGFcbiAgICovXG4gIHBhcnNlQ2xhdWRlT3V0cHV0KG91dHB1dDogc3RyaW5nKTogQ29udmVyc2F0aW9uRGF0YSB7XG4gICAgLy8gVGhpcyBpcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJzaW5nIENsYXVkZSBDb2RlIG91dHB1dFxuICAgIC8vIEltcGxlbWVudGF0aW9uIHdpbGwgZGVwZW5kIG9uIHRoZSBzcGVjaWZpYyBmb3JtYXQgb2YgQ2xhdWRlIENvZGUgbG9ncy9vdXRwdXRcblxuICAgIGNvbnN0IGxpbmVzID0gb3V0cHV0LnNwbGl0KCdcXG4nKVxuICAgIGNvbnN0IG1lc3NhZ2VzOiBNZXNzYWdlRGF0YVtdID0gW11cblxuICAgIC8vIEJhc2ljIHBhcnNpbmcgbG9naWMgLSB0aGlzIHdpbGwgbmVlZCB0byBiZSBlbmhhbmNlZCBiYXNlZCBvbiBhY3R1YWwgZm9ybWF0XG4gICAgbGV0IGN1cnJlbnRNZXNzYWdlID0gJydcbiAgICBsZXQgY3VycmVudFJvbGU6ICd1c2VyJyB8ICdhc3Npc3RhbnQnIHwgJ3N5c3RlbScgPSAndXNlcidcblxuICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lcykge1xuICAgICAgaWYgKGxpbmUudHJpbSgpLnN0YXJ0c1dpdGgoJ3VzZXI6JykpIHtcbiAgICAgICAgaWYgKGN1cnJlbnRNZXNzYWdlKSB7XG4gICAgICAgICAgbWVzc2FnZXMucHVzaCh7XG4gICAgICAgICAgICByb2xlOiBjdXJyZW50Um9sZSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGN1cnJlbnRNZXNzYWdlLnRyaW0oKSxcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRSb2xlID0gJ3VzZXInXG4gICAgICAgIGN1cnJlbnRNZXNzYWdlID0gbGluZS5yZXBsYWNlKC9edXNlcjpcXHMqLywgJycpXG4gICAgICB9IGVsc2UgaWYgKGxpbmUudHJpbSgpLnN0YXJ0c1dpdGgoJ2Fzc2lzdGFudDonKSkge1xuICAgICAgICBpZiAoY3VycmVudE1lc3NhZ2UpIHtcbiAgICAgICAgICBtZXNzYWdlcy5wdXNoKHtcbiAgICAgICAgICAgIHJvbGU6IGN1cnJlbnRSb2xlLFxuICAgICAgICAgICAgY29udGVudDogY3VycmVudE1lc3NhZ2UudHJpbSgpLFxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudFJvbGUgPSAnYXNzaXN0YW50J1xuICAgICAgICBjdXJyZW50TWVzc2FnZSA9IGxpbmUucmVwbGFjZSgvXmFzc2lzdGFudDpcXHMqLywgJycpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50TWVzc2FnZSArPSAnXFxuJyArIGxpbmVcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgZmluYWwgbWVzc2FnZVxuICAgIGlmIChjdXJyZW50TWVzc2FnZSkge1xuICAgICAgbWVzc2FnZXMucHVzaCh7XG4gICAgICAgIHJvbGU6IGN1cnJlbnRSb2xlLFxuICAgICAgICBjb250ZW50OiBjdXJyZW50TWVzc2FnZS50cmltKCksXG4gICAgICB9KVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBtZXNzYWdlcyxcbiAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgIHNvdXJjZTogJ2NsYXVkZS1jb2RlJyxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICB9LFxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIERlZmF1bHQgaW5zdGFuY2UgZm9yIGVhc3kgdXNhZ2VcbiAqL1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRDYXB0dXJlID0gbmV3IENvbnZlcnNhdGlvbkNhcHR1cmUoKVxuXG4vKipcbiAqIENvbnZlbmllbmNlIGZ1bmN0aW9uIGZvciBxdWljayBjb252ZXJzYXRpb24gY2FwdHVyZVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2FwdHVyZUNvbnZlcnNhdGlvbihcbiAgZGF0YTogQ29udmVyc2F0aW9uRGF0YVxuKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgcmV0dXJuIGRlZmF1bHRDYXB0dXJlLmNhcHR1cmVDb252ZXJzYXRpb24oZGF0YSlcbn1cblxuLyoqXG4gKiBDb252ZW5pZW5jZSBmdW5jdGlvbiBmb3IgY2FwdHVyaW5nIGEgc2luZ2xlIG1lc3NhZ2VcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNhcHR1cmVNZXNzYWdlKFxuICBzZXNzaW9uSWQ6IHN0cmluZyxcbiAgbWVzc2FnZURhdGE6IE1lc3NhZ2VEYXRhXG4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgcmV0dXJuIGRlZmF1bHRDYXB0dXJlLmNhcHR1cmVNZXNzYWdlKHNlc3Npb25JZCwgbWVzc2FnZURhdGEpXG59XG4iXSwibmFtZXMiOlsicmFuZG9tVVVJRCIsImNyZWF0ZVNlc3Npb24iLCJjcmVhdGVNZXNzYWdlIiwiZ2V0T3JDcmVhdGVVc2VyIiwiQ29udmVyc2F0aW9uQ2FwdHVyZSIsInVzZXJuYW1lIiwiY2FwdHVyZUNvbnZlcnNhdGlvbiIsImRhdGEiLCJ1c2VyIiwidGl0bGUiLCJnZW5lcmF0ZVRpdGxlIiwibWVzc2FnZXMiLCJzZXNzaW9uRGF0YSIsInVzZXJJZCIsImlkIiwiY2xhdWRlU2Vzc2lvbklkIiwibWV0YWRhdGEiLCJzZXNzaW9uIiwibWVzc2FnZVByb21pc2VzIiwibWFwIiwibXNnRGF0YSIsIm1lc3NhZ2VEYXRhIiwic2Vzc2lvbklkIiwicm9sZSIsImNvbnRlbnQiLCJ0b2tlbnMiLCJjb3N0VXNkIiwiUHJvbWlzZSIsImFsbCIsImNvbnNvbGUiLCJsb2ciLCJsZW5ndGgiLCJlcnJvciIsImNhcHR1cmVNZXNzYWdlIiwibmV3TWVzc2FnZSIsInN1YnN0cmluZyIsImZpcnN0VXNlck1lc3NhZ2UiLCJmaW5kIiwibXNnIiwidHJpbSIsImZpcnN0U2VudGVuY2UiLCJzcGxpdCIsIkRhdGUiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJwYXJzZUNsYXVkZU91dHB1dCIsIm91dHB1dCIsImxpbmVzIiwiY3VycmVudE1lc3NhZ2UiLCJjdXJyZW50Um9sZSIsImxpbmUiLCJzdGFydHNXaXRoIiwicHVzaCIsInJlcGxhY2UiLCJzb3VyY2UiLCJ0aW1lc3RhbXAiLCJ0b0lTT1N0cmluZyIsImRlZmF1bHRDYXB0dXJlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/capture/index.ts\n");

/***/ }),

/***/ "(rsc)/./lib/capture/metadata-parser.ts":
/*!****************************************!*\
  !*** ./lib/capture/metadata-parser.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClaudeMetadataParser: () => (/* binding */ ClaudeMetadataParser),\n/* harmony export */   defaultParser: () => (/* binding */ defaultParser),\n/* harmony export */   parseClaudeSession: () => (/* binding */ parseClaudeSession),\n/* harmony export */   parseClaudeSessionFromJson: () => (/* binding */ parseClaudeSessionFromJson)\n/* harmony export */ });\n/**\n * Claude Code Metadata Parser\n *\n * Parses and extracts rich metadata from Claude Code JSON sessions,\n * including tool calls, performance metrics, and conversation context.\n */ /**\n * Main metadata parser class\n */ class ClaudeMetadataParser {\n    /**\n   * Parse a complete Claude Code session from JSON messages\n   */ parseSession(messages) {\n        const systemMessage = messages.find((m)=>m.type === 'system');\n        const resultMessage = messages.find((m)=>m.type === 'result');\n        const conversationMessages = messages.filter((m)=>m.type === 'user' || m.type === 'assistant');\n        if (!systemMessage) {\n            throw new Error('No system init message found in session');\n        }\n        const sessionId = systemMessage.session_id;\n        const parsedMessages = this.parseMessages(conversationMessages);\n        const toolUsage = this.analyzeToolUsage(parsedMessages, (resultMessage?.permission_denials || []).map((denial)=>({\n                toolName: denial.tool_name,\n                toolUseId: denial.tool_use_id,\n                toolInput: denial.tool_input\n            })));\n        const conversation = this.analyzeConversation(parsedMessages);\n        return {\n            sessionId,\n            title: this.generateTitle(parsedMessages),\n            duration: {\n                totalMs: resultMessage?.duration_ms || 0,\n                apiMs: resultMessage?.duration_api_ms || 0,\n                startTime: new Date().toISOString(),\n                endTime: new Date().toISOString()\n            },\n            performance: {\n                totalCost: resultMessage?.total_cost_usd || 0,\n                inputTokens: resultMessage?.usage?.input_tokens || 0,\n                outputTokens: resultMessage?.usage?.output_tokens || 0,\n                totalTokens: (resultMessage?.usage?.input_tokens || 0) + (resultMessage?.usage?.output_tokens || 0),\n                costPerToken: this.calculateCostPerToken(resultMessage),\n                turnsCount: resultMessage?.num_turns || 0,\n                isError: resultMessage?.is_error || false\n            },\n            environment: {\n                model: systemMessage.model,\n                cwd: systemMessage.cwd,\n                apiKeySource: systemMessage.apiKeySource,\n                permissionMode: systemMessage.permissionMode,\n                outputStyle: systemMessage.output_style,\n                enabledTools: systemMessage.tools,\n                mcpServers: systemMessage.mcp_servers,\n                slashCommands: systemMessage.slash_commands\n            },\n            toolUsage,\n            conversation,\n            messages: parsedMessages\n        };\n    }\n    /**\n   * Parse individual messages and extract metadata\n   */ parseMessages(messages) {\n        return messages.map((msg)=>{\n            const baseMessage = {\n                uuid: msg.uuid,\n                type: msg.type,\n                timestamp: new Date().toISOString(),\n                content: this.extractTextContent(msg.message.content),\n                metadata: {\n                    parent_tool_use_id: msg.parent_tool_use_id,\n                    raw_content: msg.message.content\n                }\n            };\n            // Extract tool calls for assistant messages\n            if (msg.type === 'assistant') {\n                const toolCalls = this.extractToolCalls(msg);\n                if (toolCalls.length > 0) {\n                    baseMessage.toolCalls = toolCalls;\n                }\n            }\n            return baseMessage;\n        });\n    }\n    /**\n   * Extract text content from message content array\n   */ extractTextContent(content) {\n        return content.filter((c)=>c.type === 'text').map((c)=>c.text).join('\\n').trim();\n    }\n    /**\n   * Extract tool calls from assistant messages\n   */ extractToolCalls(msg) {\n        return msg.message.content.filter((c)=>c.type === 'tool_use').map((c)=>({\n                id: c.id || 'unknown',\n                name: c.name || 'unknown',\n                input: c.input || {},\n                success: true\n            }));\n    }\n    /**\n   * Analyze tool usage patterns\n   */ analyzeToolUsage(messages, denials) {\n        const allToolCalls = messages.flatMap((m)=>m.toolCalls || []);\n        const toolFrequency = {};\n        allToolCalls.forEach((call)=>{\n            toolFrequency[call.name] = (toolFrequency[call.name] || 0) + 1;\n        });\n        const successfulCalls = allToolCalls.filter((call)=>call.success).length;\n        const successRate = allToolCalls.length > 0 ? successfulCalls / allToolCalls.length : 1;\n        return {\n            toolCalls: allToolCalls,\n            permissionDenials: denials,\n            toolFrequency,\n            successRate\n        };\n    }\n    /**\n   * Analyze conversation patterns\n   */ analyzeConversation(messages) {\n        const userMessages = messages.filter((m)=>m.type === 'user').length;\n        const assistantMessages = messages.filter((m)=>m.type === 'assistant').length;\n        const totalLength = messages.reduce((sum, m)=>sum + m.content.length, 0);\n        const averageMessageLength = messages.length > 0 ? totalLength / messages.length : 0;\n        const codeBlocks = this.extractCodeBlocks(messages);\n        const topics = this.extractTopics(messages);\n        return {\n            messageCount: messages.length,\n            userMessages,\n            assistantMessages,\n            averageMessageLength,\n            topics,\n            codeBlocks\n        };\n    }\n    /**\n   * Extract code blocks from conversation\n   */ extractCodeBlocks(messages) {\n        const codeBlocks = [];\n        const codeBlockRegex = /```(\\w+)?\\n([\\s\\S]*?)```/g;\n        messages.forEach((msg)=>{\n            let match;\n            while((match = codeBlockRegex.exec(msg.content)) !== null){\n                const language = match[1] || 'unknown';\n                const code = match[2].trim();\n                const lineCount = code.split('\\n').length;\n                codeBlocks.push({\n                    language,\n                    code,\n                    lineCount,\n                    context: msg.content.substring(Math.max(0, match.index - 100), match.index)\n                });\n            }\n        });\n        return codeBlocks;\n    }\n    /**\n   * Extract topics/keywords from conversation\n   */ extractTopics(messages) {\n        // Simple keyword extraction - could be enhanced with NLP\n        const text = messages.map((m)=>m.content).join(' ').toLowerCase();\n        const keywords = [\n            'database',\n            'api',\n            'function',\n            'error',\n            'bug',\n            'test',\n            'deploy',\n            'react',\n            'typescript',\n            'javascript',\n            'python',\n            'sql',\n            'docker',\n            'git',\n            'github',\n            'npm',\n            'yarn',\n            'webpack',\n            'next.js',\n            'express'\n        ];\n        return keywords.filter((keyword)=>text.includes(keyword));\n    }\n    /**\n   * Calculate cost per token\n   */ calculateCostPerToken(resultMessage) {\n        if (!resultMessage?.usage || !resultMessage.total_cost_usd) return 0;\n        const totalTokens = resultMessage.usage.input_tokens + resultMessage.usage.output_tokens;\n        return totalTokens > 0 ? resultMessage.total_cost_usd / totalTokens : 0;\n    }\n    /**\n   * Generate session title from content\n   */ generateTitle(messages) {\n        const firstUserMessage = messages.find((m)=>m.type === 'user');\n        if (firstUserMessage && firstUserMessage.content.length > 10) {\n            const content = firstUserMessage.content.trim();\n            const firstSentence = content.split(/[.!?]/)[0];\n            return firstSentence.length > 50 ? content.substring(0, 47) + '...' : firstSentence;\n        }\n        return `Claude Code Session ${new Date().toLocaleDateString()}`;\n    }\n    /**\n   * Parse session from raw JSON string\n   */ parseFromJsonString(jsonData) {\n        const lines = jsonData.split('\\n').filter((line)=>line.trim());\n        const messages = [];\n        for (const line of lines){\n            try {\n                const message = JSON.parse(line);\n                messages.push(message);\n            } catch (error) {\n                console.warn('Failed to parse JSON line:', line.substring(0, 100));\n            }\n        }\n        return this.parseSession(messages);\n    }\n}\n/**\n * Default parser instance\n */ const defaultParser = new ClaudeMetadataParser();\n/**\n * Convenience function for parsing sessions\n */ function parseClaudeSession(messages) {\n    return defaultParser.parseSession(messages);\n}\n/**\n * Parse from JSON string\n */ function parseClaudeSessionFromJson(jsonData) {\n    return defaultParser.parseFromJsonString(jsonData);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/capture/metadata-parser.ts\n");

/***/ }),

/***/ "(rsc)/./lib/capture/tool-tracker.ts":
/*!*************************************!*\
  !*** ./lib/capture/tool-tracker.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ToolCallTracker: () => (/* binding */ ToolCallTracker),\n/* harmony export */   defaultToolTracker: () => (/* binding */ defaultToolTracker)\n/* harmony export */ });\n/**\n * Tool Call Tracker\n *\n * Enhanced tracking and analysis of Claude Code tool calls and function executions,\n * including matching tool calls with their results and detailed execution analysis.\n */ /**\n * Enhanced tool call tracker\n */ class ToolCallTracker {\n    /**\n   * Process a message and extract/track tool calls\n   */ processMessage(message) {\n        const newCompletedCalls = [];\n        if (message.type === 'assistant') {\n            // Track new tool calls\n            const toolCalls = this.extractToolCalls(message);\n            for (const call of toolCalls){\n                if (call.id) {\n                    this.pendingToolCalls.set(call.id, call);\n                }\n            }\n        } else if (message.type === 'user') {\n            // Match tool results with pending calls\n            const results = this.extractToolResults(message);\n            for (const result of results){\n                const pendingCall = this.pendingToolCalls.get(result.tool_use_id);\n                if (pendingCall) {\n                    const completedCall = this.completeToolCall(pendingCall, result);\n                    if (completedCall) {\n                        this.completedToolCalls.push(completedCall);\n                        newCompletedCalls.push(completedCall);\n                        this.pendingToolCalls.delete(result.tool_use_id);\n                    }\n                }\n            }\n        }\n        return newCompletedCalls;\n    }\n    /**\n   * Extract tool calls from assistant messages\n   */ extractToolCalls(message) {\n        return message.message.content.filter((c)=>c.type === 'tool_use').map((c)=>({\n                id: c.id,\n                name: c.name,\n                input: c.input || {},\n                timestamp: new Date().toISOString(),\n                messageUuid: message.uuid,\n                sessionId: message.session_id,\n                parentToolUseId: message.parent_tool_use_id || undefined,\n                category: this.categorizeToolCall(c.name),\n                complexity: this.assessComplexity(c.name, c.input || {}),\n                impact: this.assessImpact(c.name, c.input || {})\n            }));\n    }\n    /**\n   * Extract tool results from user messages\n   */ extractToolResults(message) {\n        return message.message.content.filter((c)=>c.type === 'tool_result').map((c)=>({\n                tool_use_id: c.tool_use_id,\n                content: c.content,\n                error: c.is_error || false\n            }));\n    }\n    /**\n   * Complete a tool call by matching it with its result\n   */ completeToolCall(pendingCall, result) {\n        if (!pendingCall.id || !pendingCall.name || !pendingCall.input) {\n            return null;\n        }\n        const completed = {\n            ...pendingCall,\n            output: result.content,\n            success: !result.error,\n            error: result.error ? this.extractErrorMessage(result.content) : undefined\n        };\n        // Add specific analysis based on tool type\n        this.enhanceWithSpecificAnalysis(completed);\n        return completed;\n    }\n    /**\n   * Enhance tool call with specific analysis based on tool type\n   */ enhanceWithSpecificAnalysis(toolCall) {\n        switch(toolCall.name.toLowerCase()){\n            case 'read':\n                toolCall.fileOperations = this.analyzeFileRead(toolCall);\n                break;\n            case 'write':\n                toolCall.fileOperations = this.analyzeFileWrite(toolCall);\n                break;\n            case 'edit':\n                toolCall.fileOperations = this.analyzeFileEdit(toolCall);\n                break;\n            case 'bash':\n                toolCall.bashCommands = this.analyzeBashCommand(toolCall);\n                break;\n            case 'grep':\n            case 'glob':\n                toolCall.searchQueries = this.analyzeSearchCommand(toolCall);\n                break;\n        }\n    }\n    /**\n   * Analyze file read operations\n   */ analyzeFileRead(toolCall) {\n        const filePath = toolCall.input.file_path || toolCall.input.path || 'unknown';\n        return [\n            {\n                type: 'read',\n                filePath,\n                success: toolCall.success,\n                error: toolCall.error,\n                changes: toolCall.output ? {\n                    linesAdded: 0,\n                    linesRemoved: 0,\n                    size: typeof toolCall.output === 'string' ? toolCall.output.length : 0\n                } : undefined\n            }\n        ];\n    }\n    /**\n   * Analyze file write operations\n   */ analyzeFileWrite(toolCall) {\n        const filePath = toolCall.input.file_path || toolCall.input.path || 'unknown';\n        const content = toolCall.input.content || '';\n        return [\n            {\n                type: 'write',\n                filePath,\n                content,\n                success: toolCall.success,\n                error: toolCall.error,\n                changes: {\n                    linesAdded: content.split('\\n').length,\n                    linesRemoved: 0,\n                    size: content.length\n                }\n            }\n        ];\n    }\n    /**\n   * Analyze file edit operations\n   */ analyzeFileEdit(toolCall) {\n        const filePath = toolCall.input.file_path || toolCall.input.path || 'unknown';\n        const oldString = toolCall.input.old_string || '';\n        const newString = toolCall.input.new_string || '';\n        const oldLines = oldString.split('\\n').length;\n        const newLines = newString.split('\\n').length;\n        return [\n            {\n                type: 'edit',\n                filePath,\n                success: toolCall.success,\n                error: toolCall.error,\n                changes: {\n                    linesAdded: Math.max(0, newLines - oldLines),\n                    linesRemoved: Math.max(0, oldLines - newLines),\n                    size: newString.length - oldString.length\n                }\n            }\n        ];\n    }\n    /**\n   * Analyze bash command execution\n   */ analyzeBashCommand(toolCall) {\n        const command = toolCall.input.command || 'unknown';\n        const output = typeof toolCall.output === 'string' ? toolCall.output : JSON.stringify(toolCall.output || '');\n        return [\n            {\n                command,\n                output,\n                success: toolCall.success,\n                error: toolCall.error,\n                exitCode: toolCall.success ? 0 : 1\n            }\n        ];\n    }\n    /**\n   * Analyze search commands\n   */ analyzeSearchCommand(toolCall) {\n        const pattern = toolCall.input.pattern || toolCall.input.query || 'unknown';\n        const type = toolCall.name === 'grep' ? 'regex' : 'glob';\n        let resultsCount = 0;\n        let files = [];\n        if (Array.isArray(toolCall.output)) {\n            resultsCount = toolCall.output.length;\n            files = toolCall.output.map((item)=>typeof item === 'string' ? item : item.file || 'unknown');\n        }\n        return [\n            {\n                pattern,\n                type,\n                resultsCount,\n                files\n            }\n        ];\n    }\n    /**\n   * Categorize tool calls\n   */ categorizeToolCall(toolName) {\n        const name = toolName.toLowerCase();\n        if ([\n            'read',\n            'write',\n            'edit',\n            'glob'\n        ].includes(name)) {\n            return 'file_system';\n        } else if ([\n            'bash'\n        ].includes(name)) {\n            return 'code_execution';\n        } else if ([\n            'grep',\n            'search'\n        ].includes(name)) {\n            return 'search';\n        } else if ([\n            'webfetch',\n            'websearch'\n        ].includes(name)) {\n            return 'web_request';\n        } else if (name.startsWith('mcp__')) {\n            return 'mcp_tool';\n        } else {\n            return 'unknown';\n        }\n    }\n    /**\n   * Assess complexity of tool call\n   */ assessComplexity(toolName, input) {\n        const inputSize = JSON.stringify(input).length;\n        if (inputSize < 100) return 'simple';\n        if (inputSize < 1000) return 'medium';\n        return 'complex';\n    }\n    /**\n   * Assess impact of tool call\n   */ assessImpact(toolName, input) {\n        const name = toolName.toLowerCase();\n        if ([\n            'read',\n            'grep',\n            'glob'\n        ].includes(name)) {\n            return 'low' // Read-only operations\n            ;\n        } else if ([\n            'edit'\n        ].includes(name)) {\n            return 'medium' // Modifications\n            ;\n        } else if ([\n            'write',\n            'bash'\n        ].includes(name)) {\n            return 'high' // Creation or execution\n            ;\n        }\n        return 'medium';\n    }\n    /**\n   * Extract error message from tool result\n   */ extractErrorMessage(content) {\n        if (typeof content === 'string') {\n            return content;\n        } else if (content && typeof content === 'object') {\n            return content.error || content.message || JSON.stringify(content);\n        }\n        return 'Unknown error';\n    }\n    /**\n   * Get all completed tool calls\n   */ getCompletedToolCalls() {\n        return [\n            ...this.completedToolCalls\n        ];\n    }\n    /**\n   * Get tool usage statistics\n   */ getStatistics() {\n        const total = this.completedToolCalls.length;\n        const successful = this.completedToolCalls.filter((c)=>c.success).length;\n        const categoryBreakdown = this.completedToolCalls.reduce((acc, call)=>{\n            acc[call.category] = (acc[call.category] || 0) + 1;\n            return acc;\n        }, {});\n        const complexityBreakdown = this.completedToolCalls.reduce((acc, call)=>{\n            acc[call.complexity] = (acc[call.complexity] || 0) + 1;\n            return acc;\n        }, {});\n        const toolFrequency = this.completedToolCalls.reduce((acc, call)=>{\n            acc[call.name] = (acc[call.name] || 0) + 1;\n            return acc;\n        }, {});\n        const topTools = Object.entries(toolFrequency).sort(([, a], [, b])=>b - a).slice(0, 10).map(([name, count])=>({\n                name,\n                count\n            }));\n        return {\n            totalCalls: total,\n            successRate: total > 0 ? successful / total : 1,\n            categoryBreakdown,\n            complexityBreakdown,\n            topTools\n        };\n    }\n    /**\n   * Reset tracker for new session\n   */ reset() {\n        this.pendingToolCalls.clear();\n        this.completedToolCalls = [];\n    }\n    constructor(){\n        this.pendingToolCalls = new Map();\n        this.completedToolCalls = [];\n    }\n}\n/**\n * Default tracker instance\n */ const defaultToolTracker = new ToolCallTracker();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/capture/tool-tracker.ts\n");

/***/ }),

/***/ "(rsc)/./lib/claude/api-client.ts":
/*!**********************************!*\
  !*** ./lib/claude/api-client.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClaudeAPIClient: () => (/* binding */ ClaudeAPIClient),\n/* harmony export */   claudeClient: () => (/* binding */ claudeClient)\n/* harmony export */ });\n/* harmony import */ var _anthropic_ai_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @anthropic-ai/sdk */ \"(rsc)/./node_modules/@anthropic-ai/sdk/index.mjs\");\n/* harmony import */ var _capture__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../capture */ \"(rsc)/./lib/capture/index.ts\");\n/**\n * Real Claude API Client\n * Handles direct integration with Anthropic's Claude API\n */ \n\nclass ClaudeAPIClient {\n    constructor(){\n        this.defaultModel = 'claude-sonnet-4-20250514';\n        // Explicitly use the API key from environment, prioritizing .env.local\n        const apiKey = process.env.ANTHROPIC_API_KEY;\n        if (!apiKey) {\n            throw new Error('ANTHROPIC_API_KEY environment variable is required');\n        }\n        console.log('üîë Using Anthropic API key from environment:', apiKey.substring(0, 20) + '...');\n        this.client = new _anthropic_ai_sdk__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n            apiKey,\n            // Explicitly set to avoid any local Claude desktop interference\n            baseURL: 'https://api.anthropic.com'\n        });\n    }\n    /**\n   * Send a message to Claude and get the response\n   */ async sendMessage(prompt, options = {}) {\n        const { model = this.defaultModel, maxTokens = 4000, temperature = 0.7, systemPrompt, captureToDatabase = true, username = 'arrakis-user' } = options;\n        console.log('ü§ñ Sending message to Claude API...');\n        console.log(`üìù Prompt: ${prompt.substring(0, 100)}${prompt.length > 100 ? '...' : ''}`);\n        try {\n            // Build messages array\n            const messages = [\n                {\n                    role: 'user',\n                    content: prompt\n                }\n            ];\n            // Make API call to Claude\n            const response = await this.client.messages.create({\n                model,\n                max_tokens: maxTokens,\n                temperature,\n                system: systemPrompt || this.getDefaultSystemPrompt(),\n                messages\n            });\n            // Transform response to our format\n            const claudeResponse = {\n                id: response.id,\n                model: response.model,\n                usage: {\n                    input_tokens: response.usage.input_tokens,\n                    output_tokens: response.usage.output_tokens\n                },\n                content: response.content.map((block)=>{\n                    if (block.type === 'text') {\n                        return {\n                            type: 'text',\n                            text: block.text\n                        };\n                    } else if (block.type === 'tool_use') {\n                        return {\n                            type: 'tool_use',\n                            name: block.name,\n                            input: block.input\n                        };\n                    }\n                    return {\n                        type: block.type\n                    };\n                }),\n                stop_reason: response.stop_reason || 'end_turn',\n                timestamp: new Date().toISOString()\n            };\n            console.log('‚úÖ Claude API response received');\n            console.log(`üìä Tokens: ${response.usage.input_tokens} in, ${response.usage.output_tokens} out`);\n            // Auto-capture to database if enabled\n            if (captureToDatabase) {\n                await this.captureConversation(prompt, claudeResponse, username, systemPrompt);\n            }\n            return claudeResponse;\n        } catch (error) {\n            console.error('‚ùå Claude API error:', error);\n            throw new Error(`Claude API call failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    /**\n   * Stream a message to Claude with real-time responses\n   */ async streamMessage(prompt, options = {}, onChunk) {\n        const { model = this.defaultModel, maxTokens = 4000, temperature = 0.7, systemPrompt, captureToDatabase = true, username = 'arrakis-user' } = options;\n        console.log('üîÑ Starting Claude API stream...');\n        try {\n            const messages = [\n                {\n                    role: 'user',\n                    content: prompt\n                }\n            ];\n            const stream = this.client.messages.stream({\n                model,\n                max_tokens: maxTokens,\n                temperature,\n                system: systemPrompt || this.getDefaultSystemPrompt(),\n                messages\n            });\n            let fullResponse = '';\n            let usage = {\n                input_tokens: 0,\n                output_tokens: 0\n            };\n            let responseId = '';\n            let responseModel = model;\n            // Process stream chunks\n            for await (const chunk of stream){\n                if (chunk.type === 'message_start') {\n                    responseId = chunk.message.id;\n                    responseModel = chunk.message.model;\n                    usage = chunk.message.usage;\n                } else if (chunk.type === 'content_block_delta') {\n                    if (chunk.delta.type === 'text_delta') {\n                        const textChunk = chunk.delta.text;\n                        fullResponse += textChunk;\n                        // Send chunk to callback if provided\n                        onChunk?.({\n                            type: 'text',\n                            content: textChunk\n                        });\n                    }\n                } else if (chunk.type === 'message_delta') {\n                    if (chunk.usage) {\n                        usage.output_tokens = chunk.usage.output_tokens;\n                    }\n                }\n            }\n            // Send completion notification\n            onChunk?.({\n                type: 'complete',\n                usage\n            });\n            // Build final response\n            const claudeResponse = {\n                id: responseId,\n                model: responseModel,\n                usage,\n                content: [\n                    {\n                        type: 'text',\n                        text: fullResponse\n                    }\n                ],\n                stop_reason: 'end_turn',\n                timestamp: new Date().toISOString()\n            };\n            console.log('‚úÖ Claude API stream completed');\n            console.log(`üìä Tokens: ${usage.input_tokens} in, ${usage.output_tokens} out`);\n            // Auto-capture to database if enabled\n            if (captureToDatabase) {\n                await this.captureConversation(prompt, claudeResponse, username, systemPrompt);\n            }\n            return claudeResponse;\n        } catch (error) {\n            console.error('‚ùå Claude API stream error:', error);\n            throw new Error(`Claude API stream failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    /**\n   * Capture conversation to database\n   */ async captureConversation(prompt, response, username, systemPrompt) {\n        try {\n            const conversationData = {\n                title: this.generateTitle(prompt),\n                claudeSessionId: response.id,\n                messages: [\n                    {\n                        role: 'user',\n                        content: prompt,\n                        timestamp: new Date(Date.now() - 1000).toISOString(),\n                        metadata: {\n                            source: 'arrakis-demo',\n                            apiCall: true\n                        }\n                    },\n                    {\n                        role: 'assistant',\n                        content: response.content.find((c)=>c.type === 'text')?.text || '',\n                        timestamp: response.timestamp,\n                        metadata: {\n                            source: 'claude-api',\n                            modelUsed: response.model,\n                            stopReason: response.stop_reason,\n                            toolCalls: response.content.filter((c)=>c.type === 'tool_use')\n                        }\n                    }\n                ],\n                metadata: {\n                    source: 'manual',\n                    timestamp: response.timestamp,\n                    sessionInfo: {\n                        projectPath: process.cwd(),\n                        workingDirectory: process.cwd()\n                    },\n                    performance: {\n                        totalTokens: response.usage.input_tokens + response.usage.output_tokens,\n                        totalCost: this.calculateCost(response.usage, response.model),\n                        duration: 0\n                    }\n                }\n            };\n            const sessionId = await (0,_capture__WEBPACK_IMPORTED_MODULE_1__.captureConversation)(conversationData);\n            console.log(`üíæ Conversation captured to database: ${sessionId}`);\n        } catch (error) {\n            console.error('‚ùå Failed to capture conversation to database:', error);\n        // Don't throw - capture failures shouldn't break the API call\n        }\n    }\n    /**\n   * Generate a title from the prompt\n   */ generateTitle(prompt) {\n        // Take first 50 characters and clean up\n        const title = prompt.trim().substring(0, 50).replace(/\\n/g, ' ');\n        return title.length < prompt.length ? `${title}...` : title;\n    }\n    /**\n   * Calculate approximate cost based on token usage\n   */ calculateCost(usage, model) {\n        // Claude 3.5 Sonnet pricing (approximate)\n        const inputCostPer1K = 0.003 // $3 per 1M tokens\n        ;\n        const outputCostPer1K = 0.015 // $15 per 1M tokens\n        ;\n        const inputCost = usage.input_tokens / 1000 * inputCostPer1K;\n        const outputCost = usage.output_tokens / 1000 * outputCostPer1K;\n        return Number((inputCost + outputCost).toFixed(6));\n    }\n    /**\n   * Get default system prompt for Claude API calls\n   */ getDefaultSystemPrompt() {\n        return `You are Claude, an AI assistant created by Anthropic. You are being accessed through the Arrakis conversation capture system, which allows users to capture, search, and analyze AI conversations.\n\nYou should be helpful, harmless, and honest. Respond to the user's questions and requests in a clear and informative way.\n\nCurrent context:\n- Working directory: ${process.cwd()}\n- Platform: ${process.platform}\n- Date: ${new Date().toLocaleDateString()}\n\nThe user is testing the real Claude API integration through the Arrakis demo interface.`;\n    }\n}\n// Export default instance\nconst claudeClient = new ClaudeAPIClient();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/claude/api-client.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db/index.ts":
/*!*************************!*\
  !*** ./lib/db/index.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   conversationTags: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_1__.conversationTags),\n/* harmony export */   conversationTagsRelations: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_1__.conversationTagsRelations),\n/* harmony export */   conversationTemplates: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_1__.conversationTemplates),\n/* harmony export */   conversationTemplatesRelations: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_1__.conversationTemplatesRelations),\n/* harmony export */   db: () => (/* binding */ db),\n/* harmony export */   embeddingProcessingLog: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_1__.embeddingProcessingLog),\n/* harmony export */   embeddingQueue: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_1__.embeddingQueue),\n/* harmony export */   messageEmbeddings: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_1__.messageEmbeddings),\n/* harmony export */   messageEmbeddingsRelations: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_1__.messageEmbeddingsRelations),\n/* harmony export */   messages: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_1__.messages),\n/* harmony export */   messagesRelations: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_1__.messagesRelations),\n/* harmony export */   sessionEmbeddings: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_1__.sessionEmbeddings),\n/* harmony export */   sessionEmbeddingsRelations: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_1__.sessionEmbeddingsRelations),\n/* harmony export */   sessionTags: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_1__.sessionTags),\n/* harmony export */   sessionTagsRelations: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_1__.sessionTagsRelations),\n/* harmony export */   sessions: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_1__.sessions),\n/* harmony export */   sessionsRelations: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_1__.sessionsRelations),\n/* harmony export */   users: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_1__.users),\n/* harmony export */   usersRelations: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_1__.usersRelations)\n/* harmony export */ });\n/* harmony import */ var drizzle_orm_neon_serverless__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! drizzle-orm/neon-serverless */ \"(rsc)/./node_modules/drizzle-orm/neon-serverless/driver.js\");\n/* harmony import */ var _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @neondatabase/serverless */ \"(rsc)/./node_modules/@neondatabase/serverless/index.mjs\");\n/* harmony import */ var _schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./schema */ \"(rsc)/./lib/db/schema.ts\");\n\n\n\n// Database connection\nconst connectionString = process.env.DATABASE_URL;\nif (!connectionString) {\n    throw new Error('DATABASE_URL environment variable is not set');\n}\n// Create connection pool\nconst pool = new _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__.Pool({\n    connectionString\n});\n// Create drizzle instance\nconst db = (0,drizzle_orm_neon_serverless__WEBPACK_IMPORTED_MODULE_2__.drizzle)(pool, {\n    schema: _schema__WEBPACK_IMPORTED_MODULE_1__,\n    logger: \"development\" === 'development'\n});\n// Export schema for external use\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvZGIvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFxRDtBQUNOO0FBQ2I7QUFFbEMsc0JBQXNCO0FBQ3RCLE1BQU1HLG1CQUFtQkMsUUFBUUMsR0FBRyxDQUFDQyxZQUFZO0FBRWpELElBQUksQ0FBQ0gsa0JBQWtCO0lBQ3JCLE1BQU0sSUFBSUksTUFBTTtBQUNsQjtBQUVBLHlCQUF5QjtBQUN6QixNQUFNQyxPQUFPLElBQUlQLDBEQUFJQSxDQUFDO0lBQUVFO0FBQWlCO0FBRXpDLDBCQUEwQjtBQUNuQixNQUFNTSxLQUFLVCxvRUFBT0EsQ0FBQ1EsTUFBTTtJQUM5Qk4sTUFBTUEsc0NBQUFBO0lBQ05RLFFBQVFOLGtCQUF5QjtBQUNuQyxHQUFFO0FBRUYsaUNBQWlDO0FBQ1QiLCJzb3VyY2VzIjpbIkM6XFxwcm9qZWN0c1xcYXJyYWtpc1xcbGliXFxkYlxcaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZHJpenpsZSB9IGZyb20gJ2RyaXp6bGUtb3JtL25lb24tc2VydmVybGVzcydcbmltcG9ydCB7IFBvb2wgfSBmcm9tICdAbmVvbmRhdGFiYXNlL3NlcnZlcmxlc3MnXG5pbXBvcnQgKiBhcyBzY2hlbWEgZnJvbSAnLi9zY2hlbWEnXG5cbi8vIERhdGFiYXNlIGNvbm5lY3Rpb25cbmNvbnN0IGNvbm5lY3Rpb25TdHJpbmcgPSBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkxcblxuaWYgKCFjb25uZWN0aW9uU3RyaW5nKSB7XG4gIHRocm93IG5ldyBFcnJvcignREFUQUJBU0VfVVJMIGVudmlyb25tZW50IHZhcmlhYmxlIGlzIG5vdCBzZXQnKVxufVxuXG4vLyBDcmVhdGUgY29ubmVjdGlvbiBwb29sXG5jb25zdCBwb29sID0gbmV3IFBvb2woeyBjb25uZWN0aW9uU3RyaW5nIH0pXG5cbi8vIENyZWF0ZSBkcml6emxlIGluc3RhbmNlXG5leHBvcnQgY29uc3QgZGIgPSBkcml6emxlKHBvb2wsIHtcbiAgc2NoZW1hLFxuICBsb2dnZXI6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnLFxufSlcblxuLy8gRXhwb3J0IHNjaGVtYSBmb3IgZXh0ZXJuYWwgdXNlXG5leHBvcnQgKiBmcm9tICcuL3NjaGVtYSdcbmV4cG9ydCB0eXBlIERhdGFiYXNlID0gdHlwZW9mIGRiXG4iXSwibmFtZXMiOlsiZHJpenpsZSIsIlBvb2wiLCJzY2hlbWEiLCJjb25uZWN0aW9uU3RyaW5nIiwicHJvY2VzcyIsImVudiIsIkRBVEFCQVNFX1VSTCIsIkVycm9yIiwicG9vbCIsImRiIiwibG9nZ2VyIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/db/index.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db/queries.ts":
/*!***************************!*\
  !*** ./lib/db/queries.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createMessage: () => (/* binding */ createMessage),\n/* harmony export */   createMessageEmbedding: () => (/* binding */ createMessageEmbedding),\n/* harmony export */   createSession: () => (/* binding */ createSession),\n/* harmony export */   createUser: () => (/* binding */ createUser),\n/* harmony export */   getMessageCount: () => (/* binding */ getMessageCount),\n/* harmony export */   getMessageEmbedding: () => (/* binding */ getMessageEmbedding),\n/* harmony export */   getMessagesBySessionId: () => (/* binding */ getMessagesBySessionId),\n/* harmony export */   getOrCreateUser: () => (/* binding */ getOrCreateUser),\n/* harmony export */   getRecentMessages: () => (/* binding */ getRecentMessages),\n/* harmony export */   getSessionById: () => (/* binding */ getSessionById),\n/* harmony export */   getSessionCount: () => (/* binding */ getSessionCount),\n/* harmony export */   getSessionMessages: () => (/* binding */ getSessionMessages),\n/* harmony export */   getSessions: () => (/* binding */ getSessions),\n/* harmony export */   getSessionsByUserId: () => (/* binding */ getSessionsByUserId),\n/* harmony export */   getUserByUsername: () => (/* binding */ getUserByUsername),\n/* harmony export */   searchMessages: () => (/* binding */ searchMessages),\n/* harmony export */   updateSessionTitle: () => (/* binding */ updateSessionTitle)\n/* harmony export */ });\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! drizzle-orm */ \"(rsc)/./node_modules/drizzle-orm/sql/expressions/conditions.js\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! drizzle-orm */ \"(rsc)/./node_modules/drizzle-orm/sql/sql.js\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! drizzle-orm */ \"(rsc)/./node_modules/drizzle-orm/sql/expressions/select.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ \"(rsc)/./lib/db/index.ts\");\n/* harmony import */ var _schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./schema */ \"(rsc)/./lib/db/schema.ts\");\n\n\n\n// User operations\nasync function createUser(data) {\n    const [user] = await _index__WEBPACK_IMPORTED_MODULE_0__.db.insert(_schema__WEBPACK_IMPORTED_MODULE_1__.users).values(data).returning();\n    return user;\n}\nasync function getUserByUsername(username) {\n    const [user] = await _index__WEBPACK_IMPORTED_MODULE_0__.db.select().from(_schema__WEBPACK_IMPORTED_MODULE_1__.users).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_schema__WEBPACK_IMPORTED_MODULE_1__.users.username, username));\n    return user;\n}\nasync function getOrCreateUser(username) {\n    let user = await getUserByUsername(username);\n    if (!user) {\n        user = await createUser({\n            username\n        });\n    }\n    return user;\n}\n// Session operations\nasync function createSession(data) {\n    const [session] = await _index__WEBPACK_IMPORTED_MODULE_0__.db.insert(_schema__WEBPACK_IMPORTED_MODULE_1__.sessions).values(data).returning();\n    return session;\n}\nasync function getSessionById(id) {\n    const [session] = await _index__WEBPACK_IMPORTED_MODULE_0__.db.select({\n        id: _schema__WEBPACK_IMPORTED_MODULE_1__.sessions.id,\n        title: _schema__WEBPACK_IMPORTED_MODULE_1__.sessions.title,\n        status: _schema__WEBPACK_IMPORTED_MODULE_1__.sessions.status,\n        createdAt: _schema__WEBPACK_IMPORTED_MODULE_1__.sessions.createdAt,\n        updatedAt: _schema__WEBPACK_IMPORTED_MODULE_1__.sessions.updatedAt,\n        metadata: _schema__WEBPACK_IMPORTED_MODULE_1__.sessions.metadata,\n        claudeSessionId: _schema__WEBPACK_IMPORTED_MODULE_1__.sessions.claudeSessionId,\n        userId: _schema__WEBPACK_IMPORTED_MODULE_1__.sessions.userId,\n        messageCount: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_3__.sql)`(\n        SELECT COUNT(*) FROM ${_schema__WEBPACK_IMPORTED_MODULE_1__.messages}\n        WHERE ${_schema__WEBPACK_IMPORTED_MODULE_1__.messages.sessionId} = ${_schema__WEBPACK_IMPORTED_MODULE_1__.sessions.id}\n      )`\n    }).from(_schema__WEBPACK_IMPORTED_MODULE_1__.sessions).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_schema__WEBPACK_IMPORTED_MODULE_1__.sessions.id, id));\n    return session;\n}\nasync function getSessionsByUserId(userId) {\n    return _index__WEBPACK_IMPORTED_MODULE_0__.db.select().from(_schema__WEBPACK_IMPORTED_MODULE_1__.sessions).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_schema__WEBPACK_IMPORTED_MODULE_1__.sessions.userId, userId)).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_4__.desc)(_schema__WEBPACK_IMPORTED_MODULE_1__.sessions.updatedAt));\n}\nasync function updateSessionTitle(id, title) {\n    const [session] = await _index__WEBPACK_IMPORTED_MODULE_0__.db.update(_schema__WEBPACK_IMPORTED_MODULE_1__.sessions).set({\n        title,\n        updatedAt: new Date()\n    }).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_schema__WEBPACK_IMPORTED_MODULE_1__.sessions.id, id)).returning();\n    return session;\n}\n// Message operations\nasync function createMessage(data) {\n    const [message] = await _index__WEBPACK_IMPORTED_MODULE_0__.db.insert(_schema__WEBPACK_IMPORTED_MODULE_1__.messages).values(data).returning();\n    return message;\n}\nasync function getMessagesBySessionId(sessionId) {\n    return _index__WEBPACK_IMPORTED_MODULE_0__.db.select().from(_schema__WEBPACK_IMPORTED_MODULE_1__.messages).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_schema__WEBPACK_IMPORTED_MODULE_1__.messages.sessionId, sessionId)).orderBy(_schema__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt);\n}\nasync function getRecentMessages(limit = 50) {\n    return _index__WEBPACK_IMPORTED_MODULE_0__.db.select({\n        id: _schema__WEBPACK_IMPORTED_MODULE_1__.messages.id,\n        content: _schema__WEBPACK_IMPORTED_MODULE_1__.messages.content,\n        role: _schema__WEBPACK_IMPORTED_MODULE_1__.messages.role,\n        createdAt: _schema__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt,\n        sessionId: _schema__WEBPACK_IMPORTED_MODULE_1__.messages.sessionId,\n        sessionTitle: _schema__WEBPACK_IMPORTED_MODULE_1__.sessions.title\n    }).from(_schema__WEBPACK_IMPORTED_MODULE_1__.messages).leftJoin(_schema__WEBPACK_IMPORTED_MODULE_1__.sessions, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_schema__WEBPACK_IMPORTED_MODULE_1__.messages.sessionId, _schema__WEBPACK_IMPORTED_MODULE_1__.sessions.id)).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_4__.desc)(_schema__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt)).limit(limit);\n}\n// Message embedding operations\nasync function createMessageEmbedding(data) {\n    const [embedding] = await _index__WEBPACK_IMPORTED_MODULE_0__.db.insert(_schema__WEBPACK_IMPORTED_MODULE_1__.messageEmbeddings).values(data).returning();\n    return embedding;\n}\nasync function getMessageEmbedding(messageId) {\n    const [embedding] = await _index__WEBPACK_IMPORTED_MODULE_0__.db.select().from(_schema__WEBPACK_IMPORTED_MODULE_1__.messageEmbeddings).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_schema__WEBPACK_IMPORTED_MODULE_1__.messageEmbeddings.messageId, messageId));\n    return embedding;\n}\n// Search operations (basic for now, will enhance with vector search later)\nasync function searchMessages(query, limit = 20) {\n    return _index__WEBPACK_IMPORTED_MODULE_0__.db.select({\n        id: _schema__WEBPACK_IMPORTED_MODULE_1__.messages.id,\n        content: _schema__WEBPACK_IMPORTED_MODULE_1__.messages.content,\n        role: _schema__WEBPACK_IMPORTED_MODULE_1__.messages.role,\n        createdAt: _schema__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt,\n        sessionId: _schema__WEBPACK_IMPORTED_MODULE_1__.messages.sessionId,\n        sessionTitle: _schema__WEBPACK_IMPORTED_MODULE_1__.sessions.title\n    }).from(_schema__WEBPACK_IMPORTED_MODULE_1__.messages).leftJoin(_schema__WEBPACK_IMPORTED_MODULE_1__.sessions, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_schema__WEBPACK_IMPORTED_MODULE_1__.messages.sessionId, _schema__WEBPACK_IMPORTED_MODULE_1__.sessions.id)).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_3__.sql)`${_schema__WEBPACK_IMPORTED_MODULE_1__.messages.content} ILIKE ${`%${query}%`}`).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_4__.desc)(_schema__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt)).limit(limit);\n}\n// Analytics operations\nasync function getMessageCount() {\n    const [result] = await _index__WEBPACK_IMPORTED_MODULE_0__.db.select({\n        count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_3__.sql)`count(*)`\n    }).from(_schema__WEBPACK_IMPORTED_MODULE_1__.messages);\n    return result.count;\n}\nasync function getSessionCount() {\n    const [result] = await _index__WEBPACK_IMPORTED_MODULE_0__.db.select({\n        count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_3__.sql)`count(*)`\n    }).from(_schema__WEBPACK_IMPORTED_MODULE_1__.sessions);\n    return result.count;\n}\n// Additional session operations for tRPC\nasync function getSessions(options) {\n    const { limit = 20, cursor } = options;\n    return _index__WEBPACK_IMPORTED_MODULE_0__.db.select({\n        id: _schema__WEBPACK_IMPORTED_MODULE_1__.sessions.id,\n        title: _schema__WEBPACK_IMPORTED_MODULE_1__.sessions.title,\n        status: _schema__WEBPACK_IMPORTED_MODULE_1__.sessions.status,\n        createdAt: _schema__WEBPACK_IMPORTED_MODULE_1__.sessions.createdAt,\n        updatedAt: _schema__WEBPACK_IMPORTED_MODULE_1__.sessions.updatedAt,\n        metadata: _schema__WEBPACK_IMPORTED_MODULE_1__.sessions.metadata,\n        claudeSessionId: _schema__WEBPACK_IMPORTED_MODULE_1__.sessions.claudeSessionId,\n        messageCount: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_3__.sql)`(\n        SELECT COUNT(*) FROM ${_schema__WEBPACK_IMPORTED_MODULE_1__.messages}\n        WHERE ${_schema__WEBPACK_IMPORTED_MODULE_1__.messages.sessionId} = ${_schema__WEBPACK_IMPORTED_MODULE_1__.sessions.id}\n      )`\n    }).from(_schema__WEBPACK_IMPORTED_MODULE_1__.sessions).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_4__.desc)(_schema__WEBPACK_IMPORTED_MODULE_1__.sessions.updatedAt)).limit(limit);\n}\nasync function getSessionMessages(sessionId, options = {}) {\n    const { limit = 50, offset = 0 } = options;\n    return _index__WEBPACK_IMPORTED_MODULE_0__.db.select().from(_schema__WEBPACK_IMPORTED_MODULE_1__.messages).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_schema__WEBPACK_IMPORTED_MODULE_1__.messages.sessionId, sessionId)).orderBy(_schema__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt).limit(limit).offset(offset);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/db/queries.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db/schema.ts":
/*!**************************!*\
  !*** ./lib/db/schema.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   conversationTags: () => (/* binding */ conversationTags),\n/* harmony export */   conversationTagsRelations: () => (/* binding */ conversationTagsRelations),\n/* harmony export */   conversationTemplates: () => (/* binding */ conversationTemplates),\n/* harmony export */   conversationTemplatesRelations: () => (/* binding */ conversationTemplatesRelations),\n/* harmony export */   embeddingProcessingLog: () => (/* binding */ embeddingProcessingLog),\n/* harmony export */   embeddingQueue: () => (/* binding */ embeddingQueue),\n/* harmony export */   messageEmbeddings: () => (/* binding */ messageEmbeddings),\n/* harmony export */   messageEmbeddingsRelations: () => (/* binding */ messageEmbeddingsRelations),\n/* harmony export */   messages: () => (/* binding */ messages),\n/* harmony export */   messagesRelations: () => (/* binding */ messagesRelations),\n/* harmony export */   sessionEmbeddings: () => (/* binding */ sessionEmbeddings),\n/* harmony export */   sessionEmbeddingsRelations: () => (/* binding */ sessionEmbeddingsRelations),\n/* harmony export */   sessionTags: () => (/* binding */ sessionTags),\n/* harmony export */   sessionTagsRelations: () => (/* binding */ sessionTagsRelations),\n/* harmony export */   sessions: () => (/* binding */ sessions),\n/* harmony export */   sessionsRelations: () => (/* binding */ sessionsRelations),\n/* harmony export */   users: () => (/* binding */ users),\n/* harmony export */   usersRelations: () => (/* binding */ usersRelations)\n/* harmony export */ });\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! drizzle-orm */ \"(rsc)/./node_modules/drizzle-orm/relations.js\");\n/* harmony import */ var drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! drizzle-orm/pg-core */ \"(rsc)/./node_modules/drizzle-orm/pg-core/table.js\");\n/* harmony import */ var drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! drizzle-orm/pg-core */ \"(rsc)/./node_modules/drizzle-orm/pg-core/columns/serial.js\");\n/* harmony import */ var drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! drizzle-orm/pg-core */ \"(rsc)/./node_modules/drizzle-orm/pg-core/columns/varchar.js\");\n/* harmony import */ var drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! drizzle-orm/pg-core */ \"(rsc)/./node_modules/drizzle-orm/pg-core/columns/timestamp.js\");\n/* harmony import */ var drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! drizzle-orm/pg-core */ \"(rsc)/./node_modules/drizzle-orm/pg-core/columns/jsonb.js\");\n/* harmony import */ var drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! drizzle-orm/pg-core */ \"(rsc)/./node_modules/drizzle-orm/pg-core/columns/uuid.js\");\n/* harmony import */ var drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! drizzle-orm/pg-core */ \"(rsc)/./node_modules/drizzle-orm/pg-core/columns/integer.js\");\n/* harmony import */ var drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! drizzle-orm/pg-core */ \"(rsc)/./node_modules/drizzle-orm/pg-core/columns/text.js\");\n/* harmony import */ var drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! drizzle-orm/pg-core */ \"(rsc)/./node_modules/drizzle-orm/pg-core/columns/numeric.js\");\n/* harmony import */ var drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! drizzle-orm/pg-core */ \"(rsc)/./node_modules/drizzle-orm/pg-core/indexes.js\");\n/* harmony import */ var drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! drizzle-orm/pg-core */ \"(rsc)/./node_modules/drizzle-orm/pg-core/columns/boolean.js\");\n\n\n// Users table - minimal for single-user start\nconst users = (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_0__.pgTable)('users', {\n    id: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.serial)('id').primaryKey(),\n    username: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.varchar)('username', {\n        length: 50\n    }).notNull().unique(),\n    createdAt: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.timestamp)('created_at', {\n        withTimezone: true\n    }).defaultNow().notNull(),\n    settings: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_4__.jsonb)('settings').default('{}')\n});\n// Sessions table\nconst sessions = (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_0__.pgTable)('sessions', {\n    id: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_5__.uuid)('id').defaultRandom().primaryKey(),\n    userId: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_6__.integer)('user_id').references(()=>users.id).notNull(),\n    claudeSessionId: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.varchar)('claude_session_id', {\n        length: 255\n    }),\n    title: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.varchar)('title', {\n        length: 500\n    }),\n    createdAt: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.timestamp)('created_at', {\n        withTimezone: true\n    }).defaultNow().notNull(),\n    updatedAt: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.timestamp)('updated_at', {\n        withTimezone: true\n    }).defaultNow().notNull(),\n    status: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.varchar)('status', {\n        length: 20\n    }).default('active').notNull(),\n    metadata: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_4__.jsonb)('metadata').default('{}')\n});\n// Messages table\nconst messages = (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_0__.pgTable)('messages', {\n    id: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.serial)('id').primaryKey(),\n    sessionId: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_5__.uuid)('session_id').references(()=>sessions.id).notNull(),\n    role: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.varchar)('role', {\n        length: 20\n    }).notNull(),\n    content: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_7__.text)('content').notNull(),\n    createdAt: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.timestamp)('created_at', {\n        withTimezone: true\n    }).defaultNow().notNull(),\n    tokens: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_6__.integer)('tokens'),\n    costUsd: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_8__.decimal)('cost_usd', {\n        precision: 8,\n        scale: 6\n    }),\n    metadata: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_4__.jsonb)('metadata').default('{}')\n});\n// Message embeddings table for vector search\nconst messageEmbeddings = (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_0__.pgTable)('message_embeddings', {\n    id: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.serial)('id').primaryKey(),\n    messageId: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_6__.integer)('message_id').references(()=>messages.id).notNull(),\n    embedding: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_7__.text)('embedding').notNull(),\n    model: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.varchar)('model', {\n        length: 100\n    }).default('text-embedding-3-small').notNull(),\n    createdAt: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.timestamp)('created_at', {\n        withTimezone: true\n    }).defaultNow().notNull()\n}, (table)=>({\n        messageIdIdx: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_9__.index)('idx_message_embeddings_message_id').on(table.messageId)\n    }));\n// Conversation tags table\nconst conversationTags = (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_0__.pgTable)('conversation_tags', {\n    id: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.serial)('id').primaryKey(),\n    name: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.varchar)('name', {\n        length: 100\n    }).notNull().unique(),\n    color: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.varchar)('color', {\n        length: 7\n    }).default('#3b82f6').notNull(),\n    description: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_7__.text)('description'),\n    createdAt: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.timestamp)('created_at', {\n        withTimezone: true\n    }).defaultNow().notNull()\n});\n// Session tags junction table (many-to-many)\nconst sessionTags = (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_0__.pgTable)('session_tags', {\n    sessionId: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_5__.uuid)('session_id').references(()=>sessions.id).notNull(),\n    tagId: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_6__.integer)('tag_id').references(()=>conversationTags.id).notNull(),\n    createdAt: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.timestamp)('created_at', {\n        withTimezone: true\n    }).defaultNow().notNull()\n}, (table)=>({\n        pk: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_9__.index)('idx_session_tags_primary').on(table.sessionId, table.tagId)\n    }));\n// Conversation templates table\nconst conversationTemplates = (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_0__.pgTable)('conversation_templates', {\n    id: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.serial)('id').primaryKey(),\n    name: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.varchar)('name', {\n        length: 200\n    }).notNull(),\n    description: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_7__.text)('description'),\n    template: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_7__.text)('template').notNull(),\n    category: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.varchar)('category', {\n        length: 100\n    }).default('general'),\n    isPublic: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_10__.boolean)('is_public').default(false),\n    userId: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_6__.integer)('user_id').references(()=>users.id).notNull(),\n    usageCount: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_6__.integer)('usage_count').default(0),\n    createdAt: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.timestamp)('created_at', {\n        withTimezone: true\n    }).defaultNow().notNull(),\n    updatedAt: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.timestamp)('updated_at', {\n        withTimezone: true\n    }).defaultNow().notNull()\n});\n// Define relations\nconst usersRelations = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_11__.relations)(users, ({ many })=>({\n        sessions: many(sessions),\n        conversationTemplates: many(conversationTemplates)\n    }));\nconst sessionsRelations = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_11__.relations)(sessions, ({ one, many })=>({\n        user: one(users, {\n            fields: [\n                sessions.userId\n            ],\n            references: [\n                users.id\n            ]\n        }),\n        messages: many(messages),\n        sessionTags: many(sessionTags)\n    }));\nconst messagesRelations = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_11__.relations)(messages, ({ one, many })=>({\n        session: one(sessions, {\n            fields: [\n                messages.sessionId\n            ],\n            references: [\n                sessions.id\n            ]\n        }),\n        embeddings: many(messageEmbeddings)\n    }));\nconst messageEmbeddingsRelations = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_11__.relations)(messageEmbeddings, ({ one })=>({\n        message: one(messages, {\n            fields: [\n                messageEmbeddings.messageId\n            ],\n            references: [\n                messages.id\n            ]\n        })\n    }));\nconst conversationTagsRelations = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_11__.relations)(conversationTags, ({ many })=>({\n        sessionTags: many(sessionTags)\n    }));\nconst sessionTagsRelations = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_11__.relations)(sessionTags, ({ one })=>({\n        session: one(sessions, {\n            fields: [\n                sessionTags.sessionId\n            ],\n            references: [\n                sessions.id\n            ]\n        }),\n        tag: one(conversationTags, {\n            fields: [\n                sessionTags.tagId\n            ],\n            references: [\n                conversationTags.id\n            ]\n        })\n    }));\nconst conversationTemplatesRelations = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_11__.relations)(conversationTemplates, ({ one })=>({\n        user: one(users, {\n            fields: [\n                conversationTemplates.userId\n            ],\n            references: [\n                users.id\n            ]\n        })\n    }));\n// Enhanced embedding tables for Phase 6 RAG implementation\nconst sessionEmbeddings = (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_0__.pgTable)('session_embeddings', {\n    id: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.serial)('session_embedding_id').primaryKey(),\n    sessionId: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_5__.uuid)('session_id').references(()=>sessions.id, {\n        onDelete: 'cascade'\n    }).notNull(),\n    summaryText: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_7__.text)('summary_text').notNull(),\n    embedding: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_7__.text)('embedding').notNull(),\n    model: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.varchar)('model', {\n        length: 50\n    }).default('text-embedding-3-small').notNull(),\n    tokenCount: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_6__.integer)('token_count').default(0).notNull(),\n    createdAt: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.timestamp)('created_at', {\n        withTimezone: true\n    }).defaultNow().notNull(),\n    updatedAt: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.timestamp)('updated_at', {\n        withTimezone: true\n    }).defaultNow().notNull()\n});\nconst embeddingQueue = (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_0__.pgTable)('embedding_queue', {\n    id: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.serial)('queue_id').primaryKey(),\n    itemType: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.varchar)('item_type', {\n        length: 20\n    }).notNull(),\n    itemId: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.varchar)('item_id', {\n        length: 100\n    }).notNull(),\n    priority: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_6__.integer)('priority').default(5).notNull(),\n    status: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.varchar)('status', {\n        length: 20\n    }).default('pending').notNull(),\n    retryCount: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_6__.integer)('retry_count').default(0).notNull(),\n    errorMessage: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_7__.text)('error_message'),\n    createdAt: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.timestamp)('created_at', {\n        withTimezone: true\n    }).defaultNow().notNull(),\n    updatedAt: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.timestamp)('updated_at', {\n        withTimezone: true\n    }).defaultNow().notNull(),\n    processedAt: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.timestamp)('processed_at', {\n        withTimezone: true\n    })\n}, (table)=>({\n        uniqueItem: unique().on(table.itemType, table.itemId)\n    }));\nconst embeddingProcessingLog = (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_0__.pgTable)('embedding_processing_log', {\n    id: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.serial)('log_id').primaryKey(),\n    itemType: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.varchar)('item_type', {\n        length: 20\n    }).notNull(),\n    itemId: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.varchar)('item_id', {\n        length: 100\n    }).notNull(),\n    operation: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.varchar)('operation', {\n        length: 50\n    }).notNull(),\n    status: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.varchar)('status', {\n        length: 20\n    }).notNull(),\n    processingTimeMs: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_6__.integer)('processing_time_ms'),\n    tokenCount: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_6__.integer)('token_count'),\n    chunkCount: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_6__.integer)('chunk_count').default(1),\n    model: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.varchar)('model', {\n        length: 50\n    }),\n    errorMessage: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_7__.text)('error_message'),\n    createdAt: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.timestamp)('created_at', {\n        withTimezone: true\n    }).defaultNow().notNull()\n});\n// Relations for new embedding tables\nconst sessionEmbeddingsRelations = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_11__.relations)(sessionEmbeddings, ({ one })=>({\n        session: one(sessions, {\n            fields: [\n                sessionEmbeddings.sessionId\n            ],\n            references: [\n                sessions.id\n            ]\n        })\n    }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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U0FBU0osSUFBSXZDLFVBQVU7WUFDckJ5QyxRQUFRO2dCQUFDVSxrQkFBa0J6QyxTQUFTO2FBQUM7WUFDckNQLFlBQVk7Z0JBQUNILFNBQVNYLEVBQUU7YUFBQztRQUMzQjtJQUNGLElBQ0QiLCJzb3VyY2VzIjpbIkM6XFxwcm9qZWN0c1xcYXJyYWtpc1xcbGliXFxkYlxcc2NoZW1hLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbGF0aW9ucyB9IGZyb20gJ2RyaXp6bGUtb3JtJ1xuaW1wb3J0IHtcbiAgYm9vbGVhbixcbiAgZGVjaW1hbCxcbiAgaW5kZXgsXG4gIGludGVnZXIsXG4gIGpzb25iLFxuICBwZ1RhYmxlLFxuICBzZXJpYWwsXG4gIHRleHQsXG4gIHRpbWVzdGFtcCxcbiAgdXVpZCxcbiAgdmFyY2hhcixcbn0gZnJvbSAnZHJpenpsZS1vcm0vcGctY29yZSdcblxuLy8gVXNlcnMgdGFibGUgLSBtaW5pbWFsIGZvciBzaW5nbGUtdXNlciBzdGFydFxuZXhwb3J0IGNvbnN0IHVzZXJzID0gcGdUYWJsZSgndXNlcnMnLCB7XG4gIGlkOiBzZXJpYWwoJ2lkJykucHJpbWFyeUtleSgpLFxuICB1c2VybmFtZTogdmFyY2hhcigndXNlcm5hbWUnLCB7IGxlbmd0aDogNTAgfSkubm90TnVsbCgpLnVuaXF1ZSgpLFxuICBjcmVhdGVkQXQ6IHRpbWVzdGFtcCgnY3JlYXRlZF9hdCcsIHsgd2l0aFRpbWV6b25lOiB0cnVlIH0pXG4gICAgLmRlZmF1bHROb3coKVxuICAgIC5ub3ROdWxsKCksXG4gIHNldHRpbmdzOiBqc29uYignc2V0dGluZ3MnKS5kZWZhdWx0KCd7fScpLFxufSlcblxuLy8gU2Vzc2lvbnMgdGFibGVcbmV4cG9ydCBjb25zdCBzZXNzaW9ucyA9IHBnVGFibGUoJ3Nlc3Npb25zJywge1xuICBpZDogdXVpZCgnaWQnKS5kZWZhdWx0UmFuZG9tKCkucHJpbWFyeUtleSgpLFxuICB1c2VySWQ6IGludGVnZXIoJ3VzZXJfaWQnKVxuICAgIC5yZWZlcmVuY2VzKCgpID0+IHVzZXJzLmlkKVxuICAgIC5ub3ROdWxsKCksXG4gIGNsYXVkZVNlc3Npb25JZDogdmFyY2hhcignY2xhdWRlX3Nlc3Npb25faWQnLCB7IGxlbmd0aDogMjU1IH0pLFxuICB0aXRsZTogdmFyY2hhcigndGl0bGUnLCB7IGxlbmd0aDogNTAwIH0pLFxuICBjcmVhdGVkQXQ6IHRpbWVzdGFtcCgnY3JlYXRlZF9hdCcsIHsgd2l0aFRpbWV6b25lOiB0cnVlIH0pXG4gICAgLmRlZmF1bHROb3coKVxuICAgIC5ub3ROdWxsKCksXG4gIHVwZGF0ZWRBdDogdGltZXN0YW1wKCd1cGRhdGVkX2F0JywgeyB3aXRoVGltZXpvbmU6IHRydWUgfSlcbiAgICAuZGVmYXVsdE5vdygpXG4gICAgLm5vdE51bGwoKSxcbiAgc3RhdHVzOiB2YXJjaGFyKCdzdGF0dXMnLCB7IGxlbmd0aDogMjAgfSkuZGVmYXVsdCgnYWN0aXZlJykubm90TnVsbCgpLFxuICBtZXRhZGF0YToganNvbmIoJ21ldGFkYXRhJykuZGVmYXVsdCgne30nKSxcbn0pXG5cbi8vIE1lc3NhZ2VzIHRhYmxlXG5leHBvcnQgY29uc3QgbWVzc2FnZXMgPSBwZ1RhYmxlKCdtZXNzYWdlcycsIHtcbiAgaWQ6IHNlcmlhbCgnaWQnKS5wcmltYXJ5S2V5KCksXG4gIHNlc3Npb25JZDogdXVpZCgnc2Vzc2lvbl9pZCcpXG4gICAgLnJlZmVyZW5jZXMoKCkgPT4gc2Vzc2lvbnMuaWQpXG4gICAgLm5vdE51bGwoKSxcbiAgcm9sZTogdmFyY2hhcigncm9sZScsIHsgbGVuZ3RoOiAyMCB9KS5ub3ROdWxsKCksIC8vICd1c2VyJyB8ICdhc3Npc3RhbnQnIHwgJ3N5c3RlbSdcbiAgY29udGVudDogdGV4dCgnY29udGVudCcpLm5vdE51bGwoKSxcbiAgY3JlYXRlZEF0OiB0aW1lc3RhbXAoJ2NyZWF0ZWRfYXQnLCB7IHdpdGhUaW1lem9uZTogdHJ1ZSB9KVxuICAgIC5kZWZhdWx0Tm93KClcbiAgICAubm90TnVsbCgpLFxuICB0b2tlbnM6IGludGVnZXIoJ3Rva2VucycpLFxuICBjb3N0VXNkOiBkZWNpbWFsKCdjb3N0X3VzZCcsIHsgcHJlY2lzaW9uOiA4LCBzY2FsZTogNiB9KSxcbiAgbWV0YWRhdGE6IGpzb25iKCdtZXRhZGF0YScpLmRlZmF1bHQoJ3t9JyksXG59KVxuXG4vLyBNZXNzYWdlIGVtYmVkZGluZ3MgdGFibGUgZm9yIHZlY3RvciBzZWFyY2hcbmV4cG9ydCBjb25zdCBtZXNzYWdlRW1iZWRkaW5ncyA9IHBnVGFibGUoXG4gICdtZXNzYWdlX2VtYmVkZGluZ3MnLFxuICB7XG4gICAgaWQ6IHNlcmlhbCgnaWQnKS5wcmltYXJ5S2V5KCksXG4gICAgbWVzc2FnZUlkOiBpbnRlZ2VyKCdtZXNzYWdlX2lkJylcbiAgICAgIC5yZWZlcmVuY2VzKCgpID0+IG1lc3NhZ2VzLmlkKVxuICAgICAgLm5vdE51bGwoKSxcbiAgICBlbWJlZGRpbmc6IHRleHQoJ2VtYmVkZGluZycpLm5vdE51bGwoKSwgLy8gV2lsbCBzdG9yZSB2ZWN0b3IgYXMgdGV4dCBmb3Igbm93LCBwZ3ZlY3RvciBsYXRlclxuICAgIG1vZGVsOiB2YXJjaGFyKCdtb2RlbCcsIHsgbGVuZ3RoOiAxMDAgfSlcbiAgICAgIC5kZWZhdWx0KCd0ZXh0LWVtYmVkZGluZy0zLXNtYWxsJylcbiAgICAgIC5ub3ROdWxsKCksXG4gICAgY3JlYXRlZEF0OiB0aW1lc3RhbXAoJ2NyZWF0ZWRfYXQnLCB7IHdpdGhUaW1lem9uZTogdHJ1ZSB9KVxuICAgICAgLmRlZmF1bHROb3coKVxuICAgICAgLm5vdE51bGwoKSxcbiAgfSxcbiAgKHRhYmxlKSA9PiAoe1xuICAgIG1lc3NhZ2VJZElkeDogaW5kZXgoJ2lkeF9tZXNzYWdlX2VtYmVkZGluZ3NfbWVzc2FnZV9pZCcpLm9uKFxuICAgICAgdGFibGUubWVzc2FnZUlkXG4gICAgKSxcbiAgfSlcbilcblxuLy8gQ29udmVyc2F0aW9uIHRhZ3MgdGFibGVcbmV4cG9ydCBjb25zdCBjb252ZXJzYXRpb25UYWdzID0gcGdUYWJsZSgnY29udmVyc2F0aW9uX3RhZ3MnLCB7XG4gIGlkOiBzZXJpYWwoJ2lkJykucHJpbWFyeUtleSgpLFxuICBuYW1lOiB2YXJjaGFyKCduYW1lJywgeyBsZW5ndGg6IDEwMCB9KS5ub3ROdWxsKCkudW5pcXVlKCksXG4gIGNvbG9yOiB2YXJjaGFyKCdjb2xvcicsIHsgbGVuZ3RoOiA3IH0pLmRlZmF1bHQoJyMzYjgyZjYnKS5ub3ROdWxsKCksIC8vIEhleCBjb2xvclxuICBkZXNjcmlwdGlvbjogdGV4dCgnZGVzY3JpcHRpb24nKSxcbiAgY3JlYXRlZEF0OiB0aW1lc3RhbXAoJ2NyZWF0ZWRfYXQnLCB7IHdpdGhUaW1lem9uZTogdHJ1ZSB9KVxuICAgIC5kZWZhdWx0Tm93KClcbiAgICAubm90TnVsbCgpLFxufSlcblxuLy8gU2Vzc2lvbiB0YWdzIGp1bmN0aW9uIHRhYmxlIChtYW55LXRvLW1hbnkpXG5leHBvcnQgY29uc3Qgc2Vzc2lvblRhZ3MgPSBwZ1RhYmxlKFxuICAnc2Vzc2lvbl90YWdzJyxcbiAge1xuICAgIHNlc3Npb25JZDogdXVpZCgnc2Vzc2lvbl9pZCcpXG4gICAgICAucmVmZXJlbmNlcygoKSA9PiBzZXNzaW9ucy5pZClcbiAgICAgIC5ub3ROdWxsKCksXG4gICAgdGFnSWQ6IGludGVnZXIoJ3RhZ19pZCcpXG4gICAgICAucmVmZXJlbmNlcygoKSA9PiBjb252ZXJzYXRpb25UYWdzLmlkKVxuICAgICAgLm5vdE51bGwoKSxcbiAgICBjcmVhdGVkQXQ6IHRpbWVzdGFtcCgnY3JlYXRlZF9hdCcsIHsgd2l0aFRpbWV6b25lOiB0cnVlIH0pXG4gICAgICAuZGVmYXVsdE5vdygpXG4gICAgICAubm90TnVsbCgpLFxuICB9LFxuICAodGFibGUpID0+ICh7XG4gICAgcGs6IGluZGV4KCdpZHhfc2Vzc2lvbl90YWdzX3ByaW1hcnknKS5vbih0YWJsZS5zZXNzaW9uSWQsIHRhYmxlLnRhZ0lkKSxcbiAgfSlcbilcblxuLy8gQ29udmVyc2F0aW9uIHRlbXBsYXRlcyB0YWJsZVxuZXhwb3J0IGNvbnN0IGNvbnZlcnNhdGlvblRlbXBsYXRlcyA9IHBnVGFibGUoJ2NvbnZlcnNhdGlvbl90ZW1wbGF0ZXMnLCB7XG4gIGlkOiBzZXJpYWwoJ2lkJykucHJpbWFyeUtleSgpLFxuICBuYW1lOiB2YXJjaGFyKCduYW1lJywgeyBsZW5ndGg6IDIwMCB9KS5ub3ROdWxsKCksXG4gIGRlc2NyaXB0aW9uOiB0ZXh0KCdkZXNjcmlwdGlvbicpLFxuICB0ZW1wbGF0ZTogdGV4dCgndGVtcGxhdGUnKS5ub3ROdWxsKCksIC8vIFRlbXBsYXRlIGNvbnRlbnQgd2l0aCBwbGFjZWhvbGRlcnNcbiAgY2F0ZWdvcnk6IHZhcmNoYXIoJ2NhdGVnb3J5JywgeyBsZW5ndGg6IDEwMCB9KS5kZWZhdWx0KCdnZW5lcmFsJyksXG4gIGlzUHVibGljOiBib29sZWFuKCdpc19wdWJsaWMnKS5kZWZhdWx0KGZhbHNlKSxcbiAgdXNlcklkOiBpbnRlZ2VyKCd1c2VyX2lkJylcbiAgICAucmVmZXJlbmNlcygoKSA9PiB1c2Vycy5pZClcbiAgICAubm90TnVsbCgpLFxuICB1c2FnZUNvdW50OiBpbnRlZ2VyKCd1c2FnZV9jb3VudCcpLmRlZmF1bHQoMCksXG4gIGNyZWF0ZWRBdDogdGltZXN0YW1wKCdjcmVhdGVkX2F0JywgeyB3aXRoVGltZXpvbmU6IHRydWUgfSlcbiAgICAuZGVmYXVsdE5vdygpXG4gICAgLm5vdE51bGwoKSxcbiAgdXBkYXRlZEF0OiB0aW1lc3RhbXAoJ3VwZGF0ZWRfYXQnLCB7IHdpdGhUaW1lem9uZTogdHJ1ZSB9KVxuICAgIC5kZWZhdWx0Tm93KClcbiAgICAubm90TnVsbCgpLFxufSlcblxuLy8gRGVmaW5lIHJlbGF0aW9uc1xuZXhwb3J0IGNvbnN0IHVzZXJzUmVsYXRpb25zID0gcmVsYXRpb25zKHVzZXJzLCAoeyBtYW55IH0pID0+ICh7XG4gIHNlc3Npb25zOiBtYW55KHNlc3Npb25zKSxcbiAgY29udmVyc2F0aW9uVGVtcGxhdGVzOiBtYW55KGNvbnZlcnNhdGlvblRlbXBsYXRlcyksXG59KSlcblxuZXhwb3J0IGNvbnN0IHNlc3Npb25zUmVsYXRpb25zID0gcmVsYXRpb25zKHNlc3Npb25zLCAoeyBvbmUsIG1hbnkgfSkgPT4gKHtcbiAgdXNlcjogb25lKHVzZXJzLCB7XG4gICAgZmllbGRzOiBbc2Vzc2lvbnMudXNlcklkXSxcbiAgICByZWZlcmVuY2VzOiBbdXNlcnMuaWRdLFxuICB9KSxcbiAgbWVzc2FnZXM6IG1hbnkobWVzc2FnZXMpLFxuICBzZXNzaW9uVGFnczogbWFueShzZXNzaW9uVGFncyksXG59KSlcblxuZXhwb3J0IGNvbnN0IG1lc3NhZ2VzUmVsYXRpb25zID0gcmVsYXRpb25zKG1lc3NhZ2VzLCAoeyBvbmUsIG1hbnkgfSkgPT4gKHtcbiAgc2Vzc2lvbjogb25lKHNlc3Npb25zLCB7XG4gICAgZmllbGRzOiBbbWVzc2FnZXMuc2Vzc2lvbklkXSxcbiAgICByZWZlcmVuY2VzOiBbc2Vzc2lvbnMuaWRdLFxuICB9KSxcbiAgZW1iZWRkaW5nczogbWFueShtZXNzYWdlRW1iZWRkaW5ncyksXG59KSlcblxuZXhwb3J0IGNvbnN0IG1lc3NhZ2VFbWJlZGRpbmdzUmVsYXRpb25zID0gcmVsYXRpb25zKFxuICBtZXNzYWdlRW1iZWRkaW5ncyxcbiAgKHsgb25lIH0pID0+ICh7XG4gICAgbWVzc2FnZTogb25lKG1lc3NhZ2VzLCB7XG4gICAgICBmaWVsZHM6IFttZXNzYWdlRW1iZWRkaW5ncy5tZXNzYWdlSWRdLFxuICAgICAgcmVmZXJlbmNlczogW21lc3NhZ2VzLmlkXSxcbiAgICB9KSxcbiAgfSlcbilcblxuZXhwb3J0IGNvbnN0IGNvbnZlcnNhdGlvblRhZ3NSZWxhdGlvbnMgPSByZWxhdGlvbnMoXG4gIGNvbnZlcnNhdGlvblRhZ3MsXG4gICh7IG1hbnkgfSkgPT4gKHtcbiAgICBzZXNzaW9uVGFnczogbWFueShzZXNzaW9uVGFncyksXG4gIH0pXG4pXG5cbmV4cG9ydCBjb25zdCBzZXNzaW9uVGFnc1JlbGF0aW9ucyA9IHJlbGF0aW9ucyhzZXNzaW9uVGFncywgKHsgb25lIH0pID0+ICh7XG4gIHNlc3Npb246IG9uZShzZXNzaW9ucywge1xuICAgIGZpZWxkczogW3Nlc3Npb25UYWdzLnNlc3Npb25JZF0sXG4gICAgcmVmZXJlbmNlczogW3Nlc3Npb25zLmlkXSxcbiAgfSksXG4gIHRhZzogb25lKGNvbnZlcnNhdGlvblRhZ3MsIHtcbiAgICBmaWVsZHM6IFtzZXNzaW9uVGFncy50YWdJZF0sXG4gICAgcmVmZXJlbmNlczogW2NvbnZlcnNhdGlvblRhZ3MuaWRdLFxuICB9KSxcbn0pKVxuXG5leHBvcnQgY29uc3QgY29udmVyc2F0aW9uVGVtcGxhdGVzUmVsYXRpb25zID0gcmVsYXRpb25zKFxuICBjb252ZXJzYXRpb25UZW1wbGF0ZXMsXG4gICh7IG9uZSB9KSA9PiAoe1xuICAgIHVzZXI6IG9uZSh1c2Vycywge1xuICAgICAgZmllbGRzOiBbY29udmVyc2F0aW9uVGVtcGxhdGVzLnVzZXJJZF0sXG4gICAgICByZWZlcmVuY2VzOiBbdXNlcnMuaWRdLFxuICAgIH0pLFxuICB9KVxuKVxuXG4vLyBFbmhhbmNlZCBlbWJlZGRpbmcgdGFibGVzIGZvciBQaGFzZSA2IFJBRyBpbXBsZW1lbnRhdGlvblxuZXhwb3J0IGNvbnN0IHNlc3Npb25FbWJlZGRpbmdzID0gcGdUYWJsZSgnc2Vzc2lvbl9lbWJlZGRpbmdzJywge1xuICBpZDogc2VyaWFsKCdzZXNzaW9uX2VtYmVkZGluZ19pZCcpLnByaW1hcnlLZXkoKSxcbiAgc2Vzc2lvbklkOiB1dWlkKCdzZXNzaW9uX2lkJylcbiAgICAucmVmZXJlbmNlcygoKSA9PiBzZXNzaW9ucy5pZCwgeyBvbkRlbGV0ZTogJ2Nhc2NhZGUnIH0pXG4gICAgLm5vdE51bGwoKSxcbiAgc3VtbWFyeVRleHQ6IHRleHQoJ3N1bW1hcnlfdGV4dCcpLm5vdE51bGwoKSxcbiAgZW1iZWRkaW5nOiB0ZXh0KCdlbWJlZGRpbmcnKS5ub3ROdWxsKCksIC8vIFdpbGwgYmUgdmVjdG9yKDE1MzYpIGluIHByb2R1Y3Rpb25cbiAgbW9kZWw6IHZhcmNoYXIoJ21vZGVsJywgeyBsZW5ndGg6IDUwIH0pXG4gICAgLmRlZmF1bHQoJ3RleHQtZW1iZWRkaW5nLTMtc21hbGwnKVxuICAgIC5ub3ROdWxsKCksXG4gIHRva2VuQ291bnQ6IGludGVnZXIoJ3Rva2VuX2NvdW50JykuZGVmYXVsdCgwKS5ub3ROdWxsKCksXG4gIGNyZWF0ZWRBdDogdGltZXN0YW1wKCdjcmVhdGVkX2F0JywgeyB3aXRoVGltZXpvbmU6IHRydWUgfSlcbiAgICAuZGVmYXVsdE5vdygpXG4gICAgLm5vdE51bGwoKSxcbiAgdXBkYXRlZEF0OiB0aW1lc3RhbXAoJ3VwZGF0ZWRfYXQnLCB7IHdpdGhUaW1lem9uZTogdHJ1ZSB9KVxuICAgIC5kZWZhdWx0Tm93KClcbiAgICAubm90TnVsbCgpLFxufSlcblxuZXhwb3J0IGNvbnN0IGVtYmVkZGluZ1F1ZXVlID0gcGdUYWJsZShcbiAgJ2VtYmVkZGluZ19xdWV1ZScsXG4gIHtcbiAgICBpZDogc2VyaWFsKCdxdWV1ZV9pZCcpLnByaW1hcnlLZXkoKSxcbiAgICBpdGVtVHlwZTogdmFyY2hhcignaXRlbV90eXBlJywgeyBsZW5ndGg6IDIwIH0pLm5vdE51bGwoKSwgLy8gJ21lc3NhZ2UnIG9yICdzZXNzaW9uJ1xuICAgIGl0ZW1JZDogdmFyY2hhcignaXRlbV9pZCcsIHsgbGVuZ3RoOiAxMDAgfSkubm90TnVsbCgpLCAvLyBtZXNzYWdlX2lkIG9yIHNlc3Npb25faWRcbiAgICBwcmlvcml0eTogaW50ZWdlcigncHJpb3JpdHknKS5kZWZhdWx0KDUpLm5vdE51bGwoKSwgLy8gMSAoaGlnaGVzdCkgdG8gMTAgKGxvd2VzdClcbiAgICBzdGF0dXM6IHZhcmNoYXIoJ3N0YXR1cycsIHsgbGVuZ3RoOiAyMCB9KS5kZWZhdWx0KCdwZW5kaW5nJykubm90TnVsbCgpLCAvLyBwZW5kaW5nLCBwcm9jZXNzaW5nLCBjb21wbGV0ZWQsIGZhaWxlZFxuICAgIHJldHJ5Q291bnQ6IGludGVnZXIoJ3JldHJ5X2NvdW50JykuZGVmYXVsdCgwKS5ub3ROdWxsKCksXG4gICAgZXJyb3JNZXNzYWdlOiB0ZXh0KCdlcnJvcl9tZXNzYWdlJyksXG4gICAgY3JlYXRlZEF0OiB0aW1lc3RhbXAoJ2NyZWF0ZWRfYXQnLCB7IHdpdGhUaW1lem9uZTogdHJ1ZSB9KVxuICAgICAgLmRlZmF1bHROb3coKVxuICAgICAgLm5vdE51bGwoKSxcbiAgICB1cGRhdGVkQXQ6IHRpbWVzdGFtcCgndXBkYXRlZF9hdCcsIHsgd2l0aFRpbWV6b25lOiB0cnVlIH0pXG4gICAgICAuZGVmYXVsdE5vdygpXG4gICAgICAubm90TnVsbCgpLFxuICAgIHByb2Nlc3NlZEF0OiB0aW1lc3RhbXAoJ3Byb2Nlc3NlZF9hdCcsIHsgd2l0aFRpbWV6b25lOiB0cnVlIH0pLFxuICB9LFxuICAodGFibGUpID0+ICh7XG4gICAgdW5pcXVlSXRlbTogdW5pcXVlKCkub24odGFibGUuaXRlbVR5cGUsIHRhYmxlLml0ZW1JZCksXG4gIH0pXG4pXG5cbmV4cG9ydCBjb25zdCBlbWJlZGRpbmdQcm9jZXNzaW5nTG9nID0gcGdUYWJsZSgnZW1iZWRkaW5nX3Byb2Nlc3NpbmdfbG9nJywge1xuICBpZDogc2VyaWFsKCdsb2dfaWQnKS5wcmltYXJ5S2V5KCksXG4gIGl0ZW1UeXBlOiB2YXJjaGFyKCdpdGVtX3R5cGUnLCB7IGxlbmd0aDogMjAgfSkubm90TnVsbCgpLFxuICBpdGVtSWQ6IHZhcmNoYXIoJ2l0ZW1faWQnLCB7IGxlbmd0aDogMTAwIH0pLm5vdE51bGwoKSxcbiAgb3BlcmF0aW9uOiB2YXJjaGFyKCdvcGVyYXRpb24nLCB7IGxlbmd0aDogNTAgfSkubm90TnVsbCgpLCAvLyAnZW1iZWQnLCAncmVlbWJlZCcsICdkZWxldGUnXG4gIHN0YXR1czogdmFyY2hhcignc3RhdHVzJywgeyBsZW5ndGg6IDIwIH0pLm5vdE51bGwoKSwgLy8gJ3N1Y2Nlc3MnLCAnZXJyb3InXG4gIHByb2Nlc3NpbmdUaW1lTXM6IGludGVnZXIoJ3Byb2Nlc3NpbmdfdGltZV9tcycpLFxuICB0b2tlbkNvdW50OiBpbnRlZ2VyKCd0b2tlbl9jb3VudCcpLFxuICBjaHVua0NvdW50OiBpbnRlZ2VyKCdjaHVua19jb3VudCcpLmRlZmF1bHQoMSksXG4gIG1vZGVsOiB2YXJjaGFyKCdtb2RlbCcsIHsgbGVuZ3RoOiA1MCB9KSxcbiAgZXJyb3JNZXNzYWdlOiB0ZXh0KCdlcnJvcl9tZXNzYWdlJyksXG4gIGNyZWF0ZWRBdDogdGltZXN0YW1wKCdjcmVhdGVkX2F0JywgeyB3aXRoVGltZXpvbmU6IHRydWUgfSlcbiAgICAuZGVmYXVsdE5vdygpXG4gICAgLm5vdE51bGwoKSxcbn0pXG5cbi8vIFJlbGF0aW9ucyBmb3IgbmV3IGVtYmVkZGluZyB0YWJsZXNcbmV4cG9ydCBjb25zdCBzZXNzaW9uRW1iZWRkaW5nc1JlbGF0aW9ucyA9IHJlbGF0aW9ucyhcbiAgc2Vzc2lvbkVtYmVkZGluZ3MsXG4gICh7IG9uZSB9KSA9PiAoe1xuICAgIHNlc3Npb246IG9uZShzZXNzaW9ucywge1xuICAgICAgZmllbGRzOiBbc2Vzc2lvbkVtYmVkZGluZ3Muc2Vzc2lvbklkXSxcbiAgICAgIHJlZmVyZW5jZXM6IFtzZXNzaW9ucy5pZF0sXG4gICAgfSksXG4gIH0pXG4pXG5cbi8vIEV4cG9ydCB0eXBlc1xuZXhwb3J0IHR5cGUgVXNlciA9IHR5cGVvZiB1c2Vycy4kaW5mZXJTZWxlY3RcbmV4cG9ydCB0eXBlIE5ld1VzZXIgPSB0eXBlb2YgdXNlcnMuJGluZmVySW5zZXJ0XG5leHBvcnQgdHlwZSBTZXNzaW9uID0gdHlwZW9mIHNlc3Npb25zLiRpbmZlclNlbGVjdFxuZXhwb3J0IHR5cGUgTmV3U2Vzc2lvbiA9IHR5cGVvZiBzZXNzaW9ucy4kaW5mZXJJbnNlcnRcbmV4cG9ydCB0eXBlIE1lc3NhZ2UgPSB0eXBlb2YgbWVzc2FnZXMuJGluZmVyU2VsZWN0XG5leHBvcnQgdHlwZSBOZXdNZXNzYWdlID0gdHlwZW9mIG1lc3NhZ2VzLiRpbmZlckluc2VydFxuZXhwb3J0IHR5cGUgTWVzc2FnZUVtYmVkZGluZyA9IHR5cGVvZiBtZXNzYWdlRW1iZWRkaW5ncy4kaW5mZXJTZWxlY3RcbmV4cG9ydCB0eXBlIE5ld01lc3NhZ2VFbWJlZGRpbmcgPSB0eXBlb2YgbWVzc2FnZUVtYmVkZGluZ3MuJGluZmVySW5zZXJ0XG5leHBvcnQgdHlwZSBDb252ZXJzYXRpb25UYWcgPSB0eXBlb2YgY29udmVyc2F0aW9uVGFncy4kaW5mZXJTZWxlY3RcbmV4cG9ydCB0eXBlIE5ld0NvbnZlcnNhdGlvblRhZyA9IHR5cGVvZiBjb252ZXJzYXRpb25UYWdzLiRpbmZlckluc2VydFxuZXhwb3J0IHR5cGUgU2Vzc2lvblRhZyA9IHR5cGVvZiBzZXNzaW9uVGFncy4kaW5mZXJTZWxlY3RcbmV4cG9ydCB0eXBlIE5ld1Nlc3Npb25UYWcgPSB0eXBlb2Ygc2Vzc2lvblRhZ3MuJGluZmVySW5zZXJ0XG5leHBvcnQgdHlwZSBDb252ZXJzYXRpb25UZW1wbGF0ZSA9IHR5cGVvZiBjb252ZXJzYXRpb25UZW1wbGF0ZXMuJGluZmVyU2VsZWN0XG5leHBvcnQgdHlwZSBOZXdDb252ZXJzYXRpb25UZW1wbGF0ZSA9IHR5cGVvZiBjb252ZXJzYXRpb25UZW1wbGF0ZXMuJGluZmVySW5zZXJ0XG5leHBvcnQgdHlwZSBTZXNzaW9uRW1iZWRkaW5nID0gdHlwZW9mIHNlc3Npb25FbWJlZGRpbmdzLiRpbmZlclNlbGVjdFxuZXhwb3J0IHR5cGUgTmV3U2Vzc2lvbkVtYmVkZGluZyA9IHR5cGVvZiBzZXNzaW9uRW1iZWRkaW5ncy4kaW5mZXJJbnNlcnRcbmV4cG9ydCB0eXBlIEVtYmVkZGluZ1F1ZXVlID0gdHlwZW9mIGVtYmVkZGluZ1F1ZXVlLiRpbmZlclNlbGVjdFxuZXhwb3J0IHR5cGUgTmV3RW1iZWRkaW5nUXVldWUgPSB0eXBlb2YgZW1iZWRkaW5nUXVldWUuJGluZmVySW5zZXJ0XG5leHBvcnQgdHlwZSBFbWJlZGRpbmdQcm9jZXNzaW5nTG9nID0gdHlwZW9mIGVtYmVkZGluZ1Byb2Nlc3NpbmdMb2cuJGluZmVyU2VsZWN0XG5leHBvcnQgdHlwZSBOZXdFbWJlZGRpbmdQcm9jZXNzaW5nTG9nID0gdHlwZW9mIGVtYmVkZGluZ1Byb2Nlc3NpbmdMb2cuJGluZmVySW5zZXJ0XG4iXSwibmFtZXMiOlsicmVsYXRpb25zIiwiYm9vbGVhbiIsImRlY2ltYWwiLCJpbmRleCIsImludGVnZXIiLCJqc29uYiIsInBnVGFibGUiLCJzZXJpYWwiLCJ0ZXh0IiwidGltZXN0YW1wIiwidXVpZCIsInZhcmNoYXIiLCJ1c2VycyIsImlkIiwicHJpbWFyeUtleSIsInVzZXJuYW1lIiwibGVuZ3RoIiwibm90TnVsbCIsInVuaXF1ZSIsImNyZWF0ZWRBdCIsIndpdGhUaW1lem9uZSIsImRlZmF1bHROb3ciLCJzZXR0aW5ncyIsImRlZmF1bHQiLCJzZXNzaW9ucyIsImRlZmF1bHRSYW5kb20iLCJ1c2VySWQiLCJyZWZlcmVuY2VzIiwiY2xhdWRlU2Vzc2lvbklkIiwidGl0bGUiLCJ1cGRhdGVkQXQiLCJzdGF0dXMiLCJtZXRhZGF0YSIsIm1lc3NhZ2VzIiwic2Vzc2lvbklkIiwicm9sZSIsImNvbnRlbnQiLCJ0b2tlbnMiLCJjb3N0VXNkIiwicHJlY2lzaW9uIiwic2NhbGUiLCJtZXNzYWdlRW1iZWRkaW5ncyIsIm1lc3NhZ2VJZCIsImVtYmVkZGluZyIsIm1vZGVsIiwidGFibGUiLCJtZXNzYWdlSWRJZHgiLCJvbiIsImNvbnZlcnNhdGlvblRhZ3MiLCJuYW1lIiwiY29sb3IiLCJkZXNjcmlwdGlvbiIsInNlc3Npb25UYWdzIiwidGFnSWQiLCJwayIsImNvbnZlcnNhdGlvblRlbXBsYXRlcyIsInRlbXBsYXRlIiwiY2F0ZWdvcnkiLCJpc1B1YmxpYyIsInVzYWdlQ291bnQiLCJ1c2Vyc1JlbGF0aW9ucyIsIm1hbnkiLCJzZXNzaW9uc1JlbGF0aW9ucyIsIm9uZSIsInVzZXIiLCJmaWVsZHMiLCJtZXNzYWdlc1JlbGF0aW9ucyIsInNlc3Npb24iLCJlbWJlZGRpbmdzIiwibWVzc2FnZUVtYmVkZGluZ3NSZWxhdGlvbnMiLCJtZXNzYWdlIiwiY29udmVyc2F0aW9uVGFnc1JlbGF0aW9ucyIsInNlc3Npb25UYWdzUmVsYXRpb25zIiwidGFnIiwiY29udmVyc2F0aW9uVGVtcGxhdGVzUmVsYXRpb25zIiwic2Vzc2lvbkVtYmVkZGluZ3MiLCJvbkRlbGV0ZSIsInN1bW1hcnlUZXh0IiwidG9rZW5Db3VudCIsImVtYmVkZGluZ1F1ZXVlIiwiaXRlbVR5cGUiLCJpdGVtSWQiLCJwcmlvcml0eSIsInJldHJ5Q291bnQiLCJlcnJvck1lc3NhZ2UiLCJwcm9jZXNzZWRBdCIsInVuaXF1ZUl0ZW0iLCJlbWJlZGRpbmdQcm9jZXNzaW5nTG9nIiwib3BlcmF0aW9uIiwicHJvY2Vzc2luZ1RpbWVNcyIsImNodW5rQ291bnQiLCJzZXNzaW9uRW1iZWRkaW5nc1JlbGF0aW9ucyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/db/schema.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&page=%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute.ts&appDir=C%3A%5Cprojects%5Carrakis%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5Cprojects%5Carrakis&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":
/*!****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&page=%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute.ts&appDir=C%3A%5Cprojects%5Carrakis%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5Cprojects%5Carrakis&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var C_projects_arrakis_app_api_trpc_trpc_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./app/api/trpc/[trpc]/route.ts */ \"(rsc)/./app/api/trpc/[trpc]/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/trpc/[trpc]/route\",\n        pathname: \"/api/trpc/[trpc]\",\n        filename: \"route\",\n        bundlePath: \"app/api/trpc/[trpc]/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"C:\\\\projects\\\\arrakis\\\\app\\\\api\\\\trpc\\\\[trpc]\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_projects_arrakis_app_api_trpc_trpc_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/trpc/[trpc]/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        if (!(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&page=%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute.ts&appDir=C%3A%5Cprojects%5Carrakis%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5Cprojects%5Carrakis&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = require("child_process");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@trpc","vendor-chunks/superjson","vendor-chunks/is-what","vendor-chunks/copy-anything","vendor-chunks/drizzle-orm","vendor-chunks/@anthropic-ai","vendor-chunks/zod","vendor-chunks/@neondatabase"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&page=%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute.ts&appDir=C%3A%5Cprojects%5Carrakis%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5Cprojects%5Carrakis&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();