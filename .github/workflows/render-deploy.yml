name: Render.com Deployment

on:
  push:
    branches:
      - master        # Production deployment
      - staging       # Staging deployment
      - develop       # Development deployment
  workflow_dispatch:   # Manual deployment
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  NODE_VERSION: '20'
  BUN_VERSION: 'latest'

jobs:
  # Determine deployment environment based on branch
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      should-deploy: ${{ steps.env.outputs.should-deploy }}

    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "environment=none" >> $GITHUB_OUTPUT
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # Pre-deployment checks
  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    needs: determine-environment
    if: needs.determine-environment.outputs.should-deploy == 'true'
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run quality checks
        run: bun run check

      - name: Run type checking
        run: bun run type-check

      - name: Test build
        run: bun run build
        env:
          NODE_ENV: production

      - name: Validate render.yaml
        run: |
          if [ ! -f "render.yaml" ]; then
            echo "❌ render.yaml not found!"
            exit 1
          fi
          echo "✅ render.yaml found"

      - name: Security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  # Deploy to Render.com
  deploy-to-render:
    name: Deploy to ${{ needs.determine-environment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [determine-environment, pre-deployment-checks]
    if: needs.determine-environment.outputs.should-deploy == 'true'
    timeout-minutes: 20
    environment:
      name: ${{ needs.determine-environment.outputs.environment }}
      url: ${{ steps.deploy.outputs.service-url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Render CLI
        run: |
          curl -sL https://render.com/install.sh | bash
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Deploy to Render
        id: deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
        run: |
          # Wait for Render CLI to be available
          sleep 5

          # Deploy using Render CLI
          render deploy --blueprint render.yaml --wait

          # Set output URL based on environment
          if [[ "$ENVIRONMENT" == "production" ]]; then
            echo "service-url=https://arrakis.onrender.com" >> $GITHUB_OUTPUT
          elif [[ "$ENVIRONMENT" == "staging" ]]; then
            echo "service-url=https://arrakis-staging.onrender.com" >> $GITHUB_OUTPUT
          else
            echo "service-url=https://arrakis-dev.onrender.com" >> $GITHUB_OUTPUT
          fi

  # Post-deployment verification
  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-to-render]
    if: needs.determine-environment.outputs.should-deploy == 'true'
    timeout-minutes: 10

    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        env:
          SERVICE_URL: ${{ needs.deploy-to-render.outputs.service-url }}
        run: |
          echo "Checking health at: $SERVICE_URL/api/health"

          # Retry health check up to 10 times
          for i in {1..10}; do
            if curl -f -s "$SERVICE_URL/api/health" > /dev/null; then
              echo "✅ Health check passed on attempt $i"
              exit 0
            fi
            echo "⏳ Health check failed on attempt $i, retrying in 30s..."
            sleep 30
          done

          echo "❌ Health check failed after 10 attempts"
          exit 1

      - name: Smoke tests
        env:
          SERVICE_URL: ${{ needs.deploy-to-render.outputs.service-url }}
        run: |
          echo "Running smoke tests against: $SERVICE_URL"

          # Test homepage
          if curl -f -s "$SERVICE_URL" | grep -q "Arrakis"; then
            echo "✅ Homepage test passed"
          else
            echo "❌ Homepage test failed"
            exit 1
          fi

          # Test API endpoint
          if curl -f -s "$SERVICE_URL/api/health" | grep -q "healthy"; then
            echo "✅ API health test passed"
          else
            echo "❌ API health test failed"
            exit 1
          fi

  # Notification job
  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    if: always()
    needs: [determine-environment, deploy-to-render, verify-deployment]

    steps:
      - name: Create deployment summary
        env:
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
          DEPLOY_STATUS: ${{ needs.deploy-to-render.result }}
          VERIFY_STATUS: ${{ needs.verify-deployment.result }}
          SERVICE_URL: ${{ needs.deploy-to-render.outputs.service-url }}
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
          echo "**Deploy Status:** $DEPLOY_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "**Verification Status:** $VERIFY_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "**Service URL:** $SERVICE_URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "$DEPLOY_STATUS" == "success" && "$VERIFY_STATUS" == "success" ]]; then
            echo "✅ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment failed or verification failed**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request' && needs.deploy-to-render.result == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const environment = '${{ needs.determine-environment.outputs.environment }}';
            const serviceUrl = '${{ needs.deploy-to-render.outputs.service-url }}';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Deployment to ${environment} successful!**\n\n📱 **Preview URL:** ${serviceUrl}\n\n✅ All health checks passed`
            });

      - name: Send failure notification
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            console.log('Deployment failed - would send notification to team');
            // Add Slack/Discord/email notification here if needed